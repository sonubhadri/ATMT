{"remainingRequest":"/home/praveen/Desktop/logo/mt2414ui_admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/praveen/Desktop/logo/mt2414ui_admin/node_modules/bible-passage-reference-parser/js/en_bcv_parser.js","dependencies":[{"path":"/home/praveen/Desktop/logo/mt2414ui_admin/node_modules/bible-passage-reference-parser/js/en_bcv_parser.js","mtime":1493885571000},{"path":"/home/praveen/Desktop/logo/mt2414ui_admin/node_modules/cache-loader/dist/cjs.js","mtime":1534282358869},{"path":"/home/praveen/Desktop/logo/mt2414ui_admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["(function() {\r\n  var bcv_parser, bcv_passage, bcv_utils, root,\r\n    hasProp = {}.hasOwnProperty;\r\n\r\n  root = this;\r\n\r\n  bcv_parser = (function() {\r\n    bcv_parser.prototype.s = \"\";\r\n\r\n    bcv_parser.prototype.entities = [];\r\n\r\n    bcv_parser.prototype.passage = null;\r\n\r\n    bcv_parser.prototype.regexps = {};\r\n\r\n    bcv_parser.prototype.options = {\r\n      consecutive_combination_strategy: \"combine\",\r\n      osis_compaction_strategy: \"b\",\r\n      book_sequence_strategy: \"ignore\",\r\n      invalid_sequence_strategy: \"ignore\",\r\n      sequence_combination_strategy: \"combine\",\r\n      punctuation_strategy: \"us\",\r\n      invalid_passage_strategy: \"ignore\",\r\n      non_latin_digits_strategy: \"ignore\",\r\n      passage_existence_strategy: \"bcv\",\r\n      zero_chapter_strategy: \"error\",\r\n      zero_verse_strategy: \"error\",\r\n      single_chapter_1_strategy: \"chapter\",\r\n      book_alone_strategy: \"ignore\",\r\n      book_range_strategy: \"ignore\",\r\n      captive_end_digits_strategy: \"delete\",\r\n      end_range_digits_strategy: \"verse\",\r\n      include_apocrypha: false,\r\n      ps151_strategy: \"c\",\r\n      versification_system: \"default\",\r\n      case_sensitive: \"none\"\r\n    };\r\n\r\n    function bcv_parser() {\r\n      var key, ref, val;\r\n      this.options = {};\r\n      ref = bcv_parser.prototype.options;\r\n      for (key in ref) {\r\n        if (!hasProp.call(ref, key)) continue;\r\n        val = ref[key];\r\n        this.options[key] = val;\r\n      }\r\n      this.versification_system(this.options.versification_system);\r\n    }\r\n\r\n    bcv_parser.prototype.parse = function(s) {\r\n      var ref;\r\n      this.reset();\r\n      this.s = s;\r\n      s = this.replace_control_characters(s);\r\n      ref = this.match_books(s), s = ref[0], this.passage.books = ref[1];\r\n      this.entities = this.match_passages(s)[0];\r\n      return this;\r\n    };\r\n\r\n    bcv_parser.prototype.parse_with_context = function(s, context) {\r\n      var entities, ref, ref1, ref2;\r\n      this.reset();\r\n      ref = this.match_books(this.replace_control_characters(context)), context = ref[0], this.passage.books = ref[1];\r\n      ref1 = this.match_passages(context), entities = ref1[0], context = ref1[1];\r\n      this.reset();\r\n      this.s = s;\r\n      s = this.replace_control_characters(s);\r\n      ref2 = this.match_books(s), s = ref2[0], this.passage.books = ref2[1];\r\n      this.passage.books.push({\r\n        value: \"\",\r\n        parsed: [],\r\n        start_index: 0,\r\n        type: \"context\",\r\n        context: context\r\n      });\r\n      s = \"\\x1f\" + (this.passage.books.length - 1) + \"/9\\x1f\" + s;\r\n      this.entities = this.match_passages(s)[0];\r\n      return this;\r\n    };\r\n\r\n    bcv_parser.prototype.reset = function() {\r\n      this.s = \"\";\r\n      this.entities = [];\r\n      if (this.passage) {\r\n        this.passage.books = [];\r\n        return this.passage.indices = {};\r\n      } else {\r\n        this.passage = new bcv_passage;\r\n        this.passage.options = this.options;\r\n        return this.passage.translations = this.translations;\r\n      }\r\n    };\r\n\r\n    bcv_parser.prototype.set_options = function(options) {\r\n      var key, val;\r\n      for (key in options) {\r\n        if (!hasProp.call(options, key)) continue;\r\n        val = options[key];\r\n        if (key === \"include_apocrypha\" || key === \"versification_system\" || key === \"case_sensitive\") {\r\n          this[key](val);\r\n        } else {\r\n          this.options[key] = val;\r\n        }\r\n      }\r\n      return this;\r\n    };\r\n\r\n    bcv_parser.prototype.include_apocrypha = function(arg) {\r\n      var base, base1, ref, translation, verse_count;\r\n      if (!((arg != null) && (arg === true || arg === false))) {\r\n        return this;\r\n      }\r\n      this.options.include_apocrypha = arg;\r\n      this.regexps.books = this.regexps.get_books(arg, this.options.case_sensitive);\r\n      ref = this.translations;\r\n      for (translation in ref) {\r\n        if (!hasProp.call(ref, translation)) continue;\r\n        if (translation === \"aliases\" || translation === \"alternates\") {\r\n          continue;\r\n        }\r\n        if ((base = this.translations[translation]).chapters == null) {\r\n          base.chapters = {};\r\n        }\r\n        if ((base1 = this.translations[translation].chapters)[\"Ps\"] == null) {\r\n          base1[\"Ps\"] = bcv_utils.shallow_clone_array(this.translations[\"default\"].chapters[\"Ps\"]);\r\n        }\r\n        if (arg === true) {\r\n          if (this.translations[translation].chapters[\"Ps151\"] != null) {\r\n            verse_count = this.translations[translation].chapters[\"Ps151\"][0];\r\n          } else {\r\n            verse_count = this.translations[\"default\"].chapters[\"Ps151\"][0];\r\n          }\r\n          this.translations[translation].chapters[\"Ps\"][150] = verse_count;\r\n        } else {\r\n          if (this.translations[translation].chapters[\"Ps\"].length === 151) {\r\n            this.translations[translation].chapters[\"Ps\"].pop();\r\n          }\r\n        }\r\n      }\r\n      return this;\r\n    };\r\n\r\n    bcv_parser.prototype.versification_system = function(system) {\r\n      var base, base1, base2, book, chapter_list, ref, ref1;\r\n      if (!((system != null) && (this.translations[system] != null))) {\r\n        return this;\r\n      }\r\n      if (this.translations.alternates[\"default\"] != null) {\r\n        if (system === \"default\") {\r\n          if (this.translations.alternates[\"default\"].order != null) {\r\n            this.translations[\"default\"].order = bcv_utils.shallow_clone(this.translations.alternates[\"default\"].order);\r\n          }\r\n          ref = this.translations.alternates[\"default\"].chapters;\r\n          for (book in ref) {\r\n            if (!hasProp.call(ref, book)) continue;\r\n            chapter_list = ref[book];\r\n            this.translations[\"default\"].chapters[book] = bcv_utils.shallow_clone_array(chapter_list);\r\n          }\r\n        } else {\r\n          this.versification_system(\"default\");\r\n        }\r\n      }\r\n      if ((base = this.translations.alternates)[\"default\"] == null) {\r\n        base[\"default\"] = {\r\n          order: null,\r\n          chapters: {}\r\n        };\r\n      }\r\n      if (system !== \"default\" && (this.translations[system].order != null)) {\r\n        if ((base1 = this.translations.alternates[\"default\"]).order == null) {\r\n          base1.order = bcv_utils.shallow_clone(this.translations[\"default\"].order);\r\n        }\r\n        this.translations[\"default\"].order = bcv_utils.shallow_clone(this.translations[system].order);\r\n      }\r\n      if (system !== \"default\" && (this.translations[system].chapters != null)) {\r\n        ref1 = this.translations[system].chapters;\r\n        for (book in ref1) {\r\n          if (!hasProp.call(ref1, book)) continue;\r\n          chapter_list = ref1[book];\r\n          if ((base2 = this.translations.alternates[\"default\"].chapters)[book] == null) {\r\n            base2[book] = bcv_utils.shallow_clone_array(this.translations[\"default\"].chapters[book]);\r\n          }\r\n          this.translations[\"default\"].chapters[book] = bcv_utils.shallow_clone_array(chapter_list);\r\n        }\r\n      }\r\n      this.options.versification_system = system;\r\n      this.include_apocrypha(this.options.include_apocrypha);\r\n      return this;\r\n    };\r\n\r\n    bcv_parser.prototype.case_sensitive = function(arg) {\r\n      if (!((arg != null) && (arg === \"none\" || arg === \"books\"))) {\r\n        return this;\r\n      }\r\n      if (arg === this.options.case_sensitive) {\r\n        return this;\r\n      }\r\n      this.options.case_sensitive = arg;\r\n      this.regexps.books = this.regexps.get_books(this.options.include_apocrypha, arg);\r\n      return this;\r\n    };\r\n\r\n    bcv_parser.prototype.translation_info = function(new_translation) {\r\n      var book, chapter_list, id, old_translation, out, ref, ref1, ref2;\r\n      if (new_translation == null) {\r\n        new_translation = \"default\";\r\n      }\r\n      if ((new_translation != null) && (((ref = this.translations.aliases[new_translation]) != null ? ref.alias : void 0) != null)) {\r\n        new_translation = this.translations.aliases[new_translation].alias;\r\n      }\r\n      if (!((new_translation != null) && (this.translations[new_translation] != null))) {\r\n        new_translation = \"default\";\r\n      }\r\n      old_translation = this.options.versification_system;\r\n      if (new_translation !== old_translation) {\r\n        this.versification_system(new_translation);\r\n      }\r\n      out = {\r\n        alias: new_translation,\r\n        books: [],\r\n        chapters: {},\r\n        order: bcv_utils.shallow_clone(this.translations[\"default\"].order)\r\n      };\r\n      ref1 = this.translations[\"default\"].chapters;\r\n      for (book in ref1) {\r\n        if (!hasProp.call(ref1, book)) continue;\r\n        chapter_list = ref1[book];\r\n        out.chapters[book] = bcv_utils.shallow_clone_array(chapter_list);\r\n      }\r\n      ref2 = out.order;\r\n      for (book in ref2) {\r\n        if (!hasProp.call(ref2, book)) continue;\r\n        id = ref2[book];\r\n        out.books[id - 1] = book;\r\n      }\r\n      if (new_translation !== old_translation) {\r\n        this.versification_system(old_translation);\r\n      }\r\n      return out;\r\n    };\r\n\r\n    bcv_parser.prototype.replace_control_characters = function(s) {\r\n      s = s.replace(this.regexps.control, \" \");\r\n      if (this.options.non_latin_digits_strategy === \"replace\") {\r\n        s = s.replace(/[٠۰߀०০੦૦୦0౦೦൦๐໐༠၀႐០᠐᥆᧐᪀᪐᭐᮰᱀᱐꘠꣐꤀꧐꩐꯰０]/g, \"0\");\r\n        s = s.replace(/[١۱߁१১੧૧୧௧౧೧൧๑໑༡၁႑១᠑᥇᧑᪁᪑᭑᮱᱁᱑꘡꣑꤁꧑꩑꯱１]/g, \"1\");\r\n        s = s.replace(/[٢۲߂२২੨૨୨௨౨೨൨๒໒༢၂႒២᠒᥈᧒᪂᪒᭒᮲᱂᱒꘢꣒꤂꧒꩒꯲２]/g, \"2\");\r\n        s = s.replace(/[٣۳߃३৩੩૩୩௩౩೩൩๓໓༣၃႓៣᠓᥉᧓᪃᪓᭓᮳᱃᱓꘣꣓꤃꧓꩓꯳３]/g, \"3\");\r\n        s = s.replace(/[٤۴߄४৪੪૪୪௪౪೪൪๔໔༤၄႔៤᠔᥊᧔᪄᪔᭔᮴᱄᱔꘤꣔꤄꧔꩔꯴４]/g, \"4\");\r\n        s = s.replace(/[٥۵߅५৫੫૫୫௫౫೫൫๕໕༥၅႕៥᠕᥋᧕᪅᪕᭕᮵᱅᱕꘥꣕꤅꧕꩕꯵５]/g, \"5\");\r\n        s = s.replace(/[٦۶߆६৬੬૬୬௬౬೬൬๖໖༦၆႖៦᠖᥌᧖᪆᪖᭖᮶᱆᱖꘦꣖꤆꧖꩖꯶６]/g, \"6\");\r\n        s = s.replace(/[٧۷߇७৭੭૭୭௭౭೭൭๗໗༧၇႗៧᠗᥍᧗᪇᪗᭗᮷᱇᱗꘧꣗꤇꧗꩗꯷７]/g, \"7\");\r\n        s = s.replace(/[٨۸߈८৮੮૮୮௮౮೮൮๘໘༨၈႘៨᠘᥎᧘᪈᪘᭘᮸᱈᱘꘨꣘꤈꧘꩘꯸８]/g, \"8\");\r\n        s = s.replace(/[٩۹߉९৯੯૯୯௯౯೯൯๙໙༩၉႙៩᠙᥏᧙᪉᪙᭙᮹᱉᱙꘩꣙꤉꧙꩙꯹９]/g, \"9\");\r\n      }\r\n      return s;\r\n    };\r\n\r\n    bcv_parser.prototype.match_books = function(s) {\r\n      var book, books, has_replacement, k, len, ref;\r\n      books = [];\r\n      ref = this.regexps.books;\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        book = ref[k];\r\n        has_replacement = false;\r\n        s = s.replace(book.regexp, function(full, prev, bk) {\r\n          var extra;\r\n          has_replacement = true;\r\n          books.push({\r\n            value: bk,\r\n            parsed: book.osis,\r\n            type: \"book\"\r\n          });\r\n          extra = book.extra != null ? \"/\" + book.extra : \"\";\r\n          return prev + \"\\x1f\" + (books.length - 1) + extra + \"\\x1f\";\r\n        });\r\n        if (has_replacement === true && /^[\\s\\x1f\\d:.,;\\-\\u2013\\u2014]+$/.test(s)) {\r\n          break;\r\n        }\r\n      }\r\n      s = s.replace(this.regexps.translations, function(match) {\r\n        books.push({\r\n          value: match,\r\n          parsed: match.toLowerCase(),\r\n          type: \"translation\"\r\n        });\r\n        return \"\\x1e\" + (books.length - 1) + \"\\x1e\";\r\n      });\r\n      return [s, this.get_book_indices(books, s)];\r\n    };\r\n\r\n    bcv_parser.prototype.get_book_indices = function(books, s) {\r\n      var add_index, match, re;\r\n      add_index = 0;\r\n      re = /([\\x1f\\x1e])(\\d+)(?:\\/\\d+)?\\1/g;\r\n      while (match = re.exec(s)) {\r\n        books[match[2]].start_index = match.index + add_index;\r\n        add_index += books[match[2]].value.length - match[0].length;\r\n      }\r\n      return books;\r\n    };\r\n\r\n    bcv_parser.prototype.match_passages = function(s) {\r\n      var accum, book_id, entities, full, match, next_char, original_part_length, part, passage, post_context, ref, regexp_index_adjust, start_index_adjust;\r\n      entities = [];\r\n      post_context = {};\r\n      while (match = this.regexps.escaped_passage.exec(s)) {\r\n        full = match[0], part = match[1], book_id = match[2];\r\n        original_part_length = part.length;\r\n        match.index += full.length - original_part_length;\r\n        if (/\\s[2-9]\\d\\d\\s*$|\\s\\d{4,}\\s*$/.test(part)) {\r\n          part = part.replace(/\\s+\\d+\\s*$/, \"\");\r\n        }\r\n        if (!/[\\d\\x1f\\x1e)]$/.test(part)) {\r\n          part = this.replace_match_end(part);\r\n        }\r\n        if (this.options.captive_end_digits_strategy === \"delete\") {\r\n          next_char = match.index + part.length;\r\n          if (s.length > next_char && /^\\w/.test(s.substr(next_char, 1))) {\r\n            part = part.replace(/[\\s*]+\\d+$/, \"\");\r\n          }\r\n          part = part.replace(/(\\x1e[)\\]]?)[\\s*]*\\d+$/, \"$1\");\r\n        }\r\n        part = part.replace(/[A-Z]+/g, function(capitals) {\r\n          return capitals.toLowerCase();\r\n        });\r\n        start_index_adjust = part.substr(0, 1) === \"\\x1f\" ? 0 : part.split(\"\\x1f\")[0].length;\r\n        passage = {\r\n          value: grammar.parse(part, {\r\n            punctuation_strategy: this.options.punctuation_strategy\r\n          }),\r\n          type: \"base\",\r\n          start_index: this.passage.books[book_id].start_index - start_index_adjust,\r\n          match: part\r\n        };\r\n        if (this.options.book_alone_strategy === \"full\" && this.options.book_range_strategy === \"include\" && passage.value[0].type === \"b\" && (passage.value.length === 1 || (passage.value.length > 1 && passage.value[1].type === \"translation_sequence\")) && start_index_adjust === 0 && (this.passage.books[book_id].parsed.length === 1 || (this.passage.books[book_id].parsed.length > 1 && this.passage.books[book_id].parsed[1].type === \"translation\")) && /^[234]/.test(this.passage.books[book_id].parsed[0])) {\r\n          this.create_book_range(s, passage, book_id);\r\n        }\r\n        ref = this.passage.handle_obj(passage), accum = ref[0], post_context = ref[1];\r\n        entities = entities.concat(accum);\r\n        regexp_index_adjust = this.adjust_regexp_end(accum, original_part_length, part.length);\r\n        if (regexp_index_adjust > 0) {\r\n          this.regexps.escaped_passage.lastIndex -= regexp_index_adjust;\r\n        }\r\n      }\r\n      return [entities, post_context];\r\n    };\r\n\r\n    bcv_parser.prototype.adjust_regexp_end = function(accum, old_length, new_length) {\r\n      var regexp_index_adjust;\r\n      regexp_index_adjust = 0;\r\n      if (accum.length > 0) {\r\n        regexp_index_adjust = old_length - accum[accum.length - 1].indices[1] - 1;\r\n      } else if (old_length !== new_length) {\r\n        regexp_index_adjust = old_length - new_length;\r\n      }\r\n      return regexp_index_adjust;\r\n    };\r\n\r\n    bcv_parser.prototype.replace_match_end = function(part) {\r\n      var match, remove;\r\n      remove = part.length;\r\n      while (match = this.regexps.match_end_split.exec(part)) {\r\n        remove = match.index + match[0].length;\r\n      }\r\n      if (remove < part.length) {\r\n        part = part.substr(0, remove);\r\n      }\r\n      return part;\r\n    };\r\n\r\n    bcv_parser.prototype.create_book_range = function(s, passage, book_id) {\r\n      var cases, i, k, limit, prev, range_regexp, ref;\r\n      cases = [bcv_parser.prototype.regexps.first, bcv_parser.prototype.regexps.second, bcv_parser.prototype.regexps.third];\r\n      limit = parseInt(this.passage.books[book_id].parsed[0].substr(0, 1), 10);\r\n      for (i = k = 1, ref = limit; 1 <= ref ? k < ref : k > ref; i = 1 <= ref ? ++k : --k) {\r\n        range_regexp = i === limit - 1 ? bcv_parser.prototype.regexps.range_and : bcv_parser.prototype.regexps.range_only;\r\n        prev = s.match(RegExp(\"(?:^|\\\\W)(\" + cases[i - 1] + \"\\\\s*\" + range_regexp + \"\\\\s*)\\\\x1f\" + book_id + \"\\\\x1f\", \"i\"));\r\n        if (prev != null) {\r\n          return this.add_book_range_object(passage, prev, i);\r\n        }\r\n      }\r\n      return false;\r\n    };\r\n\r\n    bcv_parser.prototype.add_book_range_object = function(passage, prev, start_book_number) {\r\n      var i, k, length, ref, ref1, results;\r\n      length = prev[1].length;\r\n      passage.value[0] = {\r\n        type: \"b_range_pre\",\r\n        value: [\r\n          {\r\n            type: \"b_pre\",\r\n            value: start_book_number.toString(),\r\n            indices: [prev.index, prev.index + length]\r\n          }, passage.value[0]\r\n        ],\r\n        indices: [0, passage.value[0].indices[1] + length]\r\n      };\r\n      passage.value[0].value[1].indices[0] += length;\r\n      passage.value[0].value[1].indices[1] += length;\r\n      passage.start_index -= length;\r\n      passage.match = prev[1] + passage.match;\r\n      if (passage.value.length === 1) {\r\n        return;\r\n      }\r\n      results = [];\r\n      for (i = k = 1, ref = passage.value.length; 1 <= ref ? k < ref : k > ref; i = 1 <= ref ? ++k : --k) {\r\n        if (passage.value[i].value == null) {\r\n          continue;\r\n        }\r\n        if (((ref1 = passage.value[i].value[0]) != null ? ref1.indices : void 0) != null) {\r\n          passage.value[i].value[0].indices[0] += length;\r\n          passage.value[i].value[0].indices[1] += length;\r\n        }\r\n        passage.value[i].indices[0] += length;\r\n        results.push(passage.value[i].indices[1] += length);\r\n      }\r\n      return results;\r\n    };\r\n\r\n    bcv_parser.prototype.osis = function() {\r\n      var k, len, osis, out, ref;\r\n      out = [];\r\n      ref = this.parsed_entities();\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        osis = ref[k];\r\n        if (osis.osis.length > 0) {\r\n          out.push(osis.osis);\r\n        }\r\n      }\r\n      return out.join(\",\");\r\n    };\r\n\r\n    bcv_parser.prototype.osis_and_translations = function() {\r\n      var k, len, osis, out, ref;\r\n      out = [];\r\n      ref = this.parsed_entities();\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        osis = ref[k];\r\n        if (osis.osis.length > 0) {\r\n          out.push([osis.osis, osis.translations.join(\",\")]);\r\n        }\r\n      }\r\n      return out;\r\n    };\r\n\r\n    bcv_parser.prototype.osis_and_indices = function() {\r\n      var k, len, osis, out, ref;\r\n      out = [];\r\n      ref = this.parsed_entities();\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        osis = ref[k];\r\n        if (osis.osis.length > 0) {\r\n          out.push({\r\n            osis: osis.osis,\r\n            translations: osis.translations,\r\n            indices: osis.indices\r\n          });\r\n        }\r\n      }\r\n      return out;\r\n    };\r\n\r\n    bcv_parser.prototype.parsed_entities = function() {\r\n      var entity, entity_id, i, k, l, last_i, len, len1, length, m, n, osis, osises, out, passage, ref, ref1, ref2, ref3, strings, translation, translation_alias, translation_osis, translations;\r\n      out = [];\r\n      for (entity_id = k = 0, ref = this.entities.length; 0 <= ref ? k < ref : k > ref; entity_id = 0 <= ref ? ++k : --k) {\r\n        entity = this.entities[entity_id];\r\n        if (entity.type && entity.type === \"translation_sequence\" && out.length > 0 && entity_id === out[out.length - 1].entity_id + 1) {\r\n          out[out.length - 1].indices[1] = entity.absolute_indices[1];\r\n        }\r\n        if (entity.passages == null) {\r\n          continue;\r\n        }\r\n        if ((entity.type === \"b\" && this.options.book_alone_strategy === \"ignore\") || (entity.type === \"b_range\" && this.options.book_range_strategy === \"ignore\") || entity.type === \"context\") {\r\n          continue;\r\n        }\r\n        translations = [];\r\n        translation_alias = null;\r\n        if (entity.passages[0].translations != null) {\r\n          ref1 = entity.passages[0].translations;\r\n          for (l = 0, len = ref1.length; l < len; l++) {\r\n            translation = ref1[l];\r\n            translation_osis = ((ref2 = translation.osis) != null ? ref2.length : void 0) > 0 ? translation.osis : \"\";\r\n            if (translation_alias == null) {\r\n              translation_alias = translation.alias;\r\n            }\r\n            translations.push(translation_osis);\r\n          }\r\n        } else {\r\n          translations = [\"\"];\r\n          translation_alias = \"default\";\r\n        }\r\n        osises = [];\r\n        length = entity.passages.length;\r\n        for (i = m = 0, ref3 = length; 0 <= ref3 ? m < ref3 : m > ref3; i = 0 <= ref3 ? ++m : --m) {\r\n          passage = entity.passages[i];\r\n          if (passage.type == null) {\r\n            passage.type = entity.type;\r\n          }\r\n          if (passage.valid.valid === false) {\r\n            if (this.options.invalid_sequence_strategy === \"ignore\" && entity.type === \"sequence\") {\r\n              this.snap_sequence(\"ignore\", entity, osises, i, length);\r\n            }\r\n            if (this.options.invalid_passage_strategy === \"ignore\") {\r\n              continue;\r\n            }\r\n          }\r\n          if ((passage.type === \"b\" || passage.type === \"b_range\") && this.options.book_sequence_strategy === \"ignore\" && entity.type === \"sequence\") {\r\n            this.snap_sequence(\"book\", entity, osises, i, length);\r\n            continue;\r\n          }\r\n          if ((passage.type === \"b_range_start\" || passage.type === \"range_end_b\") && this.options.book_range_strategy === \"ignore\") {\r\n            this.snap_range(entity, i);\r\n          }\r\n          if (passage.absolute_indices == null) {\r\n            passage.absolute_indices = entity.absolute_indices;\r\n          }\r\n          osises.push({\r\n            osis: passage.valid.valid ? this.to_osis(passage.start, passage.end, translation_alias) : \"\",\r\n            type: passage.type,\r\n            indices: passage.absolute_indices,\r\n            translations: translations,\r\n            start: passage.start,\r\n            end: passage.end,\r\n            enclosed_indices: passage.enclosed_absolute_indices,\r\n            entity_id: entity_id,\r\n            entities: [passage]\r\n          });\r\n        }\r\n        if (osises.length === 0) {\r\n          continue;\r\n        }\r\n        if (osises.length > 1 && this.options.consecutive_combination_strategy === \"combine\") {\r\n          osises = this.combine_consecutive_passages(osises, translation_alias);\r\n        }\r\n        if (this.options.sequence_combination_strategy === \"separate\") {\r\n          out = out.concat(osises);\r\n        } else {\r\n          strings = [];\r\n          last_i = osises.length - 1;\r\n          if ((osises[last_i].enclosed_indices != null) && osises[last_i].enclosed_indices[1] >= 0) {\r\n            entity.absolute_indices[1] = osises[last_i].enclosed_indices[1];\r\n          }\r\n          for (n = 0, len1 = osises.length; n < len1; n++) {\r\n            osis = osises[n];\r\n            if (osis.osis.length > 0) {\r\n              strings.push(osis.osis);\r\n            }\r\n          }\r\n          out.push({\r\n            osis: strings.join(\",\"),\r\n            indices: entity.absolute_indices,\r\n            translations: translations,\r\n            entity_id: entity_id,\r\n            entities: osises\r\n          });\r\n        }\r\n      }\r\n      return out;\r\n    };\r\n\r\n    bcv_parser.prototype.to_osis = function(start, end, translation) {\r\n      var osis, out;\r\n      if ((end.c == null) && (end.v == null) && start.b === end.b && (start.c == null) && (start.v == null) && this.options.book_alone_strategy === \"first_chapter\") {\r\n        end.c = 1;\r\n      }\r\n      osis = {\r\n        start: \"\",\r\n        end: \"\"\r\n      };\r\n      if (start.c == null) {\r\n        start.c = 1;\r\n      }\r\n      if (start.v == null) {\r\n        start.v = 1;\r\n      }\r\n      if (end.c == null) {\r\n        if (this.options.passage_existence_strategy.indexOf(\"c\") >= 0 || ((this.passage.translations[translation].chapters[end.b] != null) && this.passage.translations[translation].chapters[end.b].length === 1)) {\r\n          end.c = this.passage.translations[translation].chapters[end.b].length;\r\n        } else {\r\n          end.c = 999;\r\n        }\r\n      }\r\n      if (end.v == null) {\r\n        if ((this.passage.translations[translation].chapters[end.b][end.c - 1] != null) && this.options.passage_existence_strategy.indexOf(\"v\") >= 0) {\r\n          end.v = this.passage.translations[translation].chapters[end.b][end.c - 1];\r\n        } else {\r\n          end.v = 999;\r\n        }\r\n      }\r\n      if (this.options.include_apocrypha && this.options.ps151_strategy === \"b\" && ((start.c === 151 && start.b === \"Ps\") || (end.c === 151 && end.b === \"Ps\"))) {\r\n        this.fix_ps151(start, end, translation);\r\n      }\r\n      if (this.options.osis_compaction_strategy === \"b\" && start.c === 1 && start.v === 1 && ((end.c === 999 && end.v === 999) || (end.c === this.passage.translations[translation].chapters[end.b].length && this.options.passage_existence_strategy.indexOf(\"c\") >= 0 && (end.v === 999 || (end.v === this.passage.translations[translation].chapters[end.b][end.c - 1] && this.options.passage_existence_strategy.indexOf(\"v\") >= 0))))) {\r\n        osis.start = start.b;\r\n        osis.end = end.b;\r\n      } else if (this.options.osis_compaction_strategy.length <= 2 && start.v === 1 && (end.v === 999 || (end.v === this.passage.translations[translation].chapters[end.b][end.c - 1] && this.options.passage_existence_strategy.indexOf(\"v\") >= 0))) {\r\n        osis.start = start.b + \".\" + start.c.toString();\r\n        osis.end = end.b + \".\" + end.c.toString();\r\n      } else {\r\n        osis.start = start.b + \".\" + start.c.toString() + \".\" + start.v.toString();\r\n        osis.end = end.b + \".\" + end.c.toString() + \".\" + end.v.toString();\r\n      }\r\n      if (osis.start === osis.end) {\r\n        out = osis.start;\r\n      } else {\r\n        out = osis.start + \"-\" + osis.end;\r\n      }\r\n      if (start.extra != null) {\r\n        out = start.extra + \",\" + out;\r\n      }\r\n      if (end.extra != null) {\r\n        out += \",\" + end.extra;\r\n      }\r\n      return out;\r\n    };\r\n\r\n    bcv_parser.prototype.fix_ps151 = function(start, end, translation) {\r\n      var ref;\r\n      if (translation !== \"default\" && (((ref = this.translations[translation]) != null ? ref.chapters[\"Ps151\"] : void 0) == null)) {\r\n        this.passage.promote_book_to_translation(\"Ps151\", translation);\r\n      }\r\n      if (start.c === 151 && start.b === \"Ps\") {\r\n        if (end.c === 151 && end.b === \"Ps\") {\r\n          start.b = \"Ps151\";\r\n          start.c = 1;\r\n          end.b = \"Ps151\";\r\n          return end.c = 1;\r\n        } else {\r\n          start.extra = this.to_osis({\r\n            b: \"Ps151\",\r\n            c: 1,\r\n            v: start.v\r\n          }, {\r\n            b: \"Ps151\",\r\n            c: 1,\r\n            v: this.passage.translations[translation].chapters[\"Ps151\"][0]\r\n          }, translation);\r\n          start.b = \"Prov\";\r\n          start.c = 1;\r\n          return start.v = 1;\r\n        }\r\n      } else {\r\n        end.extra = this.to_osis({\r\n          b: \"Ps151\",\r\n          c: 1,\r\n          v: 1\r\n        }, {\r\n          b: \"Ps151\",\r\n          c: 1,\r\n          v: end.v\r\n        }, translation);\r\n        end.c = 150;\r\n        return end.v = this.passage.translations[translation].chapters[\"Ps\"][149];\r\n      }\r\n    };\r\n\r\n    bcv_parser.prototype.combine_consecutive_passages = function(osises, translation) {\r\n      var enclosed_sequence_start, has_enclosed, i, is_enclosed_last, k, last_i, osis, out, prev, prev_i, ref;\r\n      out = [];\r\n      prev = {};\r\n      last_i = osises.length - 1;\r\n      enclosed_sequence_start = -1;\r\n      has_enclosed = false;\r\n      for (i = k = 0, ref = last_i; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {\r\n        osis = osises[i];\r\n        if (osis.osis.length > 0) {\r\n          prev_i = out.length - 1;\r\n          is_enclosed_last = false;\r\n          if (osis.enclosed_indices[0] !== enclosed_sequence_start) {\r\n            enclosed_sequence_start = osis.enclosed_indices[0];\r\n          }\r\n          if (enclosed_sequence_start >= 0 && (i === last_i || osises[i + 1].enclosed_indices[0] !== osis.enclosed_indices[0])) {\r\n            is_enclosed_last = true;\r\n            has_enclosed = true;\r\n          }\r\n          if (this.is_verse_consecutive(prev, osis.start, translation)) {\r\n            out[prev_i].end = osis.end;\r\n            out[prev_i].is_enclosed_last = is_enclosed_last;\r\n            out[prev_i].indices[1] = osis.indices[1];\r\n            out[prev_i].enclosed_indices[1] = osis.enclosed_indices[1];\r\n            out[prev_i].osis = this.to_osis(out[prev_i].start, osis.end, translation);\r\n          } else {\r\n            out.push(osis);\r\n          }\r\n          prev = {\r\n            b: osis.end.b,\r\n            c: osis.end.c,\r\n            v: osis.end.v\r\n          };\r\n        } else {\r\n          out.push(osis);\r\n          prev = {};\r\n        }\r\n      }\r\n      if (has_enclosed) {\r\n        this.snap_enclosed_indices(out);\r\n      }\r\n      return out;\r\n    };\r\n\r\n    bcv_parser.prototype.snap_enclosed_indices = function(osises) {\r\n      var k, len, osis;\r\n      for (k = 0, len = osises.length; k < len; k++) {\r\n        osis = osises[k];\r\n        if (osis.is_enclosed_last != null) {\r\n          if (osis.enclosed_indices[0] < 0 && osis.is_enclosed_last) {\r\n            osis.indices[1] = osis.enclosed_indices[1];\r\n          }\r\n          delete osis.is_enclosed_last;\r\n        }\r\n      }\r\n      return osises;\r\n    };\r\n\r\n    bcv_parser.prototype.is_verse_consecutive = function(prev, check, translation) {\r\n      var translation_order;\r\n      if (prev.b == null) {\r\n        return false;\r\n      }\r\n      translation_order = this.passage.translations[translation].order != null ? this.passage.translations[translation].order : this.passage.translations[\"default\"].order;\r\n      if (prev.b === check.b) {\r\n        if (prev.c === check.c) {\r\n          if (prev.v === check.v - 1) {\r\n            return true;\r\n          }\r\n        } else if (check.v === 1 && prev.c === check.c - 1) {\r\n          if (prev.v === this.passage.translations[translation].chapters[prev.b][prev.c - 1]) {\r\n            return true;\r\n          }\r\n        }\r\n      } else if (check.c === 1 && check.v === 1 && translation_order[prev.b] === translation_order[check.b] - 1) {\r\n        if (prev.c === this.passage.translations[translation].chapters[prev.b].length && prev.v === this.passage.translations[translation].chapters[prev.b][prev.c - 1]) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    };\r\n\r\n    bcv_parser.prototype.snap_range = function(entity, passage_i) {\r\n      var entity_i, key, pluck, ref, source_entity, target_entity, temp, type;\r\n      if (entity.type === \"b_range_start\" || (entity.type === \"sequence\" && entity.passages[passage_i].type === \"b_range_start\")) {\r\n        entity_i = 1;\r\n        source_entity = \"end\";\r\n        type = \"b_range_start\";\r\n      } else {\r\n        entity_i = 0;\r\n        source_entity = \"start\";\r\n        type = \"range_end_b\";\r\n      }\r\n      target_entity = source_entity === \"end\" ? \"start\" : \"end\";\r\n      ref = entity.passages[passage_i][target_entity];\r\n      for (key in ref) {\r\n        if (!hasProp.call(ref, key)) continue;\r\n        entity.passages[passage_i][target_entity][key] = entity.passages[passage_i][source_entity][key];\r\n      }\r\n      if (entity.type === \"sequence\") {\r\n        if (passage_i >= entity.value.length) {\r\n          passage_i = entity.value.length - 1;\r\n        }\r\n        pluck = this.passage.pluck(type, entity.value[passage_i]);\r\n        if (pluck != null) {\r\n          temp = this.snap_range(pluck, 0);\r\n          if (passage_i === 0) {\r\n            entity.absolute_indices[0] = temp.absolute_indices[0];\r\n          } else {\r\n            entity.absolute_indices[1] = temp.absolute_indices[1];\r\n          }\r\n        }\r\n      } else {\r\n        entity.original_type = entity.type;\r\n        entity.type = entity.value[entity_i].type;\r\n        entity.absolute_indices = [entity.value[entity_i].absolute_indices[0], entity.value[entity_i].absolute_indices[1]];\r\n      }\r\n      return entity;\r\n    };\r\n\r\n    bcv_parser.prototype.snap_sequence = function(type, entity, osises, i, length) {\r\n      var passage;\r\n      passage = entity.passages[i];\r\n      if (passage.absolute_indices[0] === entity.absolute_indices[0] && i < length - 1 && this.get_snap_sequence_i(entity.passages, i, length) !== i) {\r\n        entity.absolute_indices[0] = entity.passages[i + 1].absolute_indices[0];\r\n        this.remove_absolute_indices(entity.passages, i + 1);\r\n      } else if (passage.absolute_indices[1] === entity.absolute_indices[1] && i > 0) {\r\n        entity.absolute_indices[1] = osises.length > 0 ? osises[osises.length - 1].indices[1] : entity.passages[i - 1].absolute_indices[1];\r\n      } else if (type === \"book\" && i < length - 1 && !this.starts_with_book(entity.passages[i + 1])) {\r\n        entity.passages[i + 1].absolute_indices[0] = passage.absolute_indices[0];\r\n      }\r\n      return entity;\r\n    };\r\n\r\n    bcv_parser.prototype.get_snap_sequence_i = function(passages, i, length) {\r\n      var j, k, ref, ref1;\r\n      for (j = k = ref = i + 1, ref1 = length; ref <= ref1 ? k < ref1 : k > ref1; j = ref <= ref1 ? ++k : --k) {\r\n        if (this.starts_with_book(passages[j])) {\r\n          return j;\r\n        }\r\n        if (passages[j].valid.valid) {\r\n          return i;\r\n        }\r\n      }\r\n      return i;\r\n    };\r\n\r\n    bcv_parser.prototype.starts_with_book = function(passage) {\r\n      if (passage.type.substr(0, 1) === \"b\") {\r\n        return true;\r\n      }\r\n      if ((passage.type === \"range\" || passage.type === \"ff\") && passage.start.type.substr(0, 1) === \"b\") {\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    bcv_parser.prototype.remove_absolute_indices = function(passages, i) {\r\n      var end, k, len, passage, ref, ref1, start;\r\n      if (passages[i].enclosed_absolute_indices[0] < 0) {\r\n        return false;\r\n      }\r\n      ref = passages[i].enclosed_absolute_indices, start = ref[0], end = ref[1];\r\n      ref1 = passages.slice(i);\r\n      for (k = 0, len = ref1.length; k < len; k++) {\r\n        passage = ref1[k];\r\n        if (passage.enclosed_absolute_indices[0] === start && passage.enclosed_absolute_indices[1] === end) {\r\n          passage.enclosed_absolute_indices = [-1, -1];\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n\r\n    return bcv_parser;\r\n\r\n  })();\r\n\r\n  root.bcv_parser = bcv_parser;\r\n\r\n  bcv_passage = (function() {\r\n    function bcv_passage() {}\r\n\r\n    bcv_passage.prototype.books = [];\r\n\r\n    bcv_passage.prototype.indices = {};\r\n\r\n    bcv_passage.prototype.options = {};\r\n\r\n    bcv_passage.prototype.translations = {};\r\n\r\n    bcv_passage.prototype.handle_array = function(passages, accum, context) {\r\n      var k, len, passage, ref;\r\n      if (accum == null) {\r\n        accum = [];\r\n      }\r\n      if (context == null) {\r\n        context = {};\r\n      }\r\n      for (k = 0, len = passages.length; k < len; k++) {\r\n        passage = passages[k];\r\n        if (passage == null) {\r\n          continue;\r\n        }\r\n        if (passage.type === \"stop\") {\r\n          break;\r\n        }\r\n        ref = this.handle_obj(passage, accum, context), accum = ref[0], context = ref[1];\r\n      }\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.handle_obj = function(passage, accum, context) {\r\n      if ((passage.type != null) && (this[passage.type] != null)) {\r\n        return this[passage.type](passage, accum, context);\r\n      } else {\r\n        return [accum, context];\r\n      }\r\n    };\r\n\r\n    bcv_passage.prototype.b = function(passage, accum, context) {\r\n      var alternates, b, k, len, obj, ref, valid;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      passage.passages = [];\r\n      alternates = [];\r\n      ref = this.books[passage.value].parsed;\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        b = ref[k];\r\n        valid = this.validate_ref(passage.start_context.translations, {\r\n          b: b\r\n        });\r\n        obj = {\r\n          start: {\r\n            b: b\r\n          },\r\n          end: {\r\n            b: b\r\n          },\r\n          valid: valid\r\n        };\r\n        if (passage.passages.length === 0 && valid.valid) {\r\n          passage.passages.push(obj);\r\n        } else {\r\n          alternates.push(obj);\r\n        }\r\n      }\r\n      if (passage.passages.length === 0) {\r\n        passage.passages.push(alternates.shift());\r\n      }\r\n      if (alternates.length > 0) {\r\n        passage.passages[0].alternates = alternates;\r\n      }\r\n      if (passage.start_context.translations != null) {\r\n        passage.passages[0].translations = passage.start_context.translations;\r\n      }\r\n      if (passage.absolute_indices == null) {\r\n        passage.absolute_indices = this.get_absolute_indices(passage.indices);\r\n      }\r\n      accum.push(passage);\r\n      context = {\r\n        b: passage.passages[0].start.b\r\n      };\r\n      if (passage.start_context.translations != null) {\r\n        context.translations = passage.start_context.translations;\r\n      }\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.b_range = function(passage, accum, context) {\r\n      return this.range(passage, accum, context);\r\n    };\r\n\r\n    bcv_passage.prototype.b_range_pre = function(passage, accum, context) {\r\n      var book, end, ref, ref1, start_obj;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      passage.passages = [];\r\n      book = this.pluck(\"b\", passage.value);\r\n      ref = this.b(book, [], context), (ref1 = ref[0], end = ref1[0]), context = ref[1];\r\n      if (passage.absolute_indices == null) {\r\n        passage.absolute_indices = this.get_absolute_indices(passage.indices);\r\n      }\r\n      start_obj = {\r\n        b: passage.value[0].value + end.passages[0].start.b.substr(1),\r\n        type: \"b\"\r\n      };\r\n      passage.passages = [\r\n        {\r\n          start: start_obj,\r\n          end: end.passages[0].end,\r\n          valid: end.passages[0].valid\r\n        }\r\n      ];\r\n      if (passage.start_context.translations != null) {\r\n        passage.passages[0].translations = passage.start_context.translations;\r\n      }\r\n      accum.push(passage);\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.b_range_start = function(passage, accum, context) {\r\n      return this.range(passage, accum, context);\r\n    };\r\n\r\n    bcv_passage.prototype.base = function(passage, accum, context) {\r\n      this.indices = this.calculate_indices(passage.match, passage.start_index);\r\n      return this.handle_array(passage.value, accum, context);\r\n    };\r\n\r\n    bcv_passage.prototype.bc = function(passage, accum, context) {\r\n      var alternates, b, c, context_key, k, len, obj, ref, ref1, valid;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      passage.passages = [];\r\n      this.reset_context(context, [\"b\", \"c\", \"v\"]);\r\n      c = this.pluck(\"c\", passage.value).value;\r\n      alternates = [];\r\n      ref = this.books[this.pluck(\"b\", passage.value).value].parsed;\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        b = ref[k];\r\n        context_key = \"c\";\r\n        valid = this.validate_ref(passage.start_context.translations, {\r\n          b: b,\r\n          c: c\r\n        });\r\n        obj = {\r\n          start: {\r\n            b: b\r\n          },\r\n          end: {\r\n            b: b\r\n          },\r\n          valid: valid\r\n        };\r\n        if (valid.messages.start_chapter_not_exist_in_single_chapter_book || valid.messages.start_chapter_1) {\r\n          obj.valid = this.validate_ref(passage.start_context.translations, {\r\n            b: b,\r\n            v: c\r\n          });\r\n          if (valid.messages.start_chapter_not_exist_in_single_chapter_book) {\r\n            obj.valid.messages.start_chapter_not_exist_in_single_chapter_book = 1;\r\n          }\r\n          obj.start.c = 1;\r\n          obj.end.c = 1;\r\n          context_key = \"v\";\r\n        }\r\n        obj.start[context_key] = c;\r\n        ref1 = this.fix_start_zeroes(obj.valid, obj.start.c, obj.start.v), obj.start.c = ref1[0], obj.start.v = ref1[1];\r\n        if (obj.start.v == null) {\r\n          delete obj.start.v;\r\n        }\r\n        obj.end[context_key] = obj.start[context_key];\r\n        if (passage.passages.length === 0 && obj.valid.valid) {\r\n          passage.passages.push(obj);\r\n        } else {\r\n          alternates.push(obj);\r\n        }\r\n      }\r\n      if (passage.passages.length === 0) {\r\n        passage.passages.push(alternates.shift());\r\n      }\r\n      if (alternates.length > 0) {\r\n        passage.passages[0].alternates = alternates;\r\n      }\r\n      if (passage.start_context.translations != null) {\r\n        passage.passages[0].translations = passage.start_context.translations;\r\n      }\r\n      if (passage.absolute_indices == null) {\r\n        passage.absolute_indices = this.get_absolute_indices(passage.indices);\r\n      }\r\n      this.set_context_from_object(context, [\"b\", \"c\", \"v\"], passage.passages[0].start);\r\n      accum.push(passage);\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.bc_title = function(passage, accum, context) {\r\n      var bc, i, k, ref, ref1, ref2, title;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      ref = this.bc(this.pluck(\"bc\", passage.value), [], context), (ref1 = ref[0], bc = ref1[0]), context = ref[1];\r\n      if (bc.passages[0].start.b.substr(0, 2) !== \"Ps\" && (bc.passages[0].alternates != null)) {\r\n        for (i = k = 0, ref2 = bc.passages[0].alternates.length; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {\r\n          if (bc.passages[0].alternates[i].start.b.substr(0, 2) !== \"Ps\") {\r\n            continue;\r\n          }\r\n          bc.passages[0] = bc.passages[0].alternates[i];\r\n          break;\r\n        }\r\n      }\r\n      if (bc.passages[0].start.b.substr(0, 2) !== \"Ps\") {\r\n        accum.push(bc);\r\n        return [accum, context];\r\n      }\r\n      this.books[this.pluck(\"b\", bc.value).value].parsed = [\"Ps\"];\r\n      title = this.pluck(\"title\", passage.value);\r\n      if (title == null) {\r\n        title = this.pluck(\"v\", passage.value);\r\n      }\r\n      passage.value[1] = {\r\n        type: \"v\",\r\n        value: [\r\n          {\r\n            type: \"integer\",\r\n            value: 1,\r\n            indices: title.indices\r\n          }\r\n        ],\r\n        indices: title.indices\r\n      };\r\n      passage.type = \"bcv\";\r\n      return this.bcv(passage, accum, passage.start_context);\r\n    };\r\n\r\n    bcv_passage.prototype.bcv = function(passage, accum, context) {\r\n      var alternates, b, bc, c, k, len, obj, ref, ref1, v, valid;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      passage.passages = [];\r\n      this.reset_context(context, [\"b\", \"c\", \"v\"]);\r\n      bc = this.pluck(\"bc\", passage.value);\r\n      c = this.pluck(\"c\", bc.value).value;\r\n      v = this.pluck(\"v\", passage.value).value;\r\n      alternates = [];\r\n      ref = this.books[this.pluck(\"b\", bc.value).value].parsed;\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        b = ref[k];\r\n        valid = this.validate_ref(passage.start_context.translations, {\r\n          b: b,\r\n          c: c,\r\n          v: v\r\n        });\r\n        ref1 = this.fix_start_zeroes(valid, c, v), c = ref1[0], v = ref1[1];\r\n        obj = {\r\n          start: {\r\n            b: b,\r\n            c: c,\r\n            v: v\r\n          },\r\n          end: {\r\n            b: b,\r\n            c: c,\r\n            v: v\r\n          },\r\n          valid: valid\r\n        };\r\n        if (passage.passages.length === 0 && valid.valid) {\r\n          passage.passages.push(obj);\r\n        } else {\r\n          alternates.push(obj);\r\n        }\r\n      }\r\n      if (passage.passages.length === 0) {\r\n        passage.passages.push(alternates.shift());\r\n      }\r\n      if (alternates.length > 0) {\r\n        passage.passages[0].alternates = alternates;\r\n      }\r\n      if (passage.start_context.translations != null) {\r\n        passage.passages[0].translations = passage.start_context.translations;\r\n      }\r\n      if (passage.absolute_indices == null) {\r\n        passage.absolute_indices = this.get_absolute_indices(passage.indices);\r\n      }\r\n      this.set_context_from_object(context, [\"b\", \"c\", \"v\"], passage.passages[0].start);\r\n      accum.push(passage);\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.bv = function(passage, accum, context) {\r\n      var b, bcv, ref, ref1, ref2, v;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      ref = passage.value, b = ref[0], v = ref[1];\r\n      bcv = {\r\n        indices: passage.indices,\r\n        value: [\r\n          {\r\n            type: \"bc\",\r\n            value: [\r\n              b, {\r\n                type: \"c\",\r\n                value: [\r\n                  {\r\n                    type: \"integer\",\r\n                    value: 1\r\n                  }\r\n                ]\r\n              }\r\n            ]\r\n          }, v\r\n        ]\r\n      };\r\n      ref1 = this.bcv(bcv, [], context), (ref2 = ref1[0], bcv = ref2[0]), context = ref1[1];\r\n      passage.passages = bcv.passages;\r\n      if (passage.absolute_indices == null) {\r\n        passage.absolute_indices = this.get_absolute_indices(passage.indices);\r\n      }\r\n      accum.push(passage);\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.c = function(passage, accum, context) {\r\n      var c, valid;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      c = passage.type === \"integer\" ? passage.value : this.pluck(\"integer\", passage.value).value;\r\n      valid = this.validate_ref(passage.start_context.translations, {\r\n        b: context.b,\r\n        c: c\r\n      });\r\n      if (!valid.valid && valid.messages.start_chapter_not_exist_in_single_chapter_book) {\r\n        return this.v(passage, accum, context);\r\n      }\r\n      c = this.fix_start_zeroes(valid, c)[0];\r\n      passage.passages = [\r\n        {\r\n          start: {\r\n            b: context.b,\r\n            c: c\r\n          },\r\n          end: {\r\n            b: context.b,\r\n            c: c\r\n          },\r\n          valid: valid\r\n        }\r\n      ];\r\n      if (passage.start_context.translations != null) {\r\n        passage.passages[0].translations = passage.start_context.translations;\r\n      }\r\n      accum.push(passage);\r\n      context.c = c;\r\n      this.reset_context(context, [\"v\"]);\r\n      if (passage.absolute_indices == null) {\r\n        passage.absolute_indices = this.get_absolute_indices(passage.indices);\r\n      }\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.c_psalm = function(passage, accum, context) {\r\n      var c;\r\n      passage.type = \"bc\";\r\n      c = parseInt(this.books[passage.value].value.match(/^\\d+/)[0], 10);\r\n      passage.value = [\r\n        {\r\n          type: \"b\",\r\n          value: passage.value,\r\n          indices: passage.indices\r\n        }, {\r\n          type: \"c\",\r\n          value: [\r\n            {\r\n              type: \"integer\",\r\n              value: c,\r\n              indices: passage.indices\r\n            }\r\n          ],\r\n          indices: passage.indices\r\n        }\r\n      ];\r\n      return this.bc(passage, accum, context);\r\n    };\r\n\r\n    bcv_passage.prototype.c_title = function(passage, accum, context) {\r\n      var title;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      if (context.b !== \"Ps\") {\r\n        return this.c(passage.value[0], accum, context);\r\n      }\r\n      title = this.pluck(\"title\", passage.value);\r\n      passage.value[1] = {\r\n        type: \"v\",\r\n        value: [\r\n          {\r\n            type: \"integer\",\r\n            value: 1,\r\n            indices: title.indices\r\n          }\r\n        ],\r\n        indices: title.indices\r\n      };\r\n      passage.type = \"cv\";\r\n      return this.cv(passage, accum, passage.start_context);\r\n    };\r\n\r\n    bcv_passage.prototype.cv = function(passage, accum, context) {\r\n      var c, ref, v, valid;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      c = this.pluck(\"c\", passage.value).value;\r\n      v = this.pluck(\"v\", passage.value).value;\r\n      valid = this.validate_ref(passage.start_context.translations, {\r\n        b: context.b,\r\n        c: c,\r\n        v: v\r\n      });\r\n      ref = this.fix_start_zeroes(valid, c, v), c = ref[0], v = ref[1];\r\n      passage.passages = [\r\n        {\r\n          start: {\r\n            b: context.b,\r\n            c: c,\r\n            v: v\r\n          },\r\n          end: {\r\n            b: context.b,\r\n            c: c,\r\n            v: v\r\n          },\r\n          valid: valid\r\n        }\r\n      ];\r\n      if (passage.start_context.translations != null) {\r\n        passage.passages[0].translations = passage.start_context.translations;\r\n      }\r\n      accum.push(passage);\r\n      context.c = c;\r\n      context.v = v;\r\n      if (passage.absolute_indices == null) {\r\n        passage.absolute_indices = this.get_absolute_indices(passage.indices);\r\n      }\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.cb_range = function(passage, accum, context) {\r\n      var b, end_c, ref, start_c;\r\n      passage.type = \"range\";\r\n      ref = passage.value, b = ref[0], start_c = ref[1], end_c = ref[2];\r\n      passage.value = [\r\n        {\r\n          type: \"bc\",\r\n          value: [b, start_c],\r\n          indices: passage.indices\r\n        }, end_c\r\n      ];\r\n      end_c.indices[1] = passage.indices[1];\r\n      return this.range(passage, accum, context);\r\n    };\r\n\r\n    bcv_passage.prototype.context = function(passage, accum, context) {\r\n      var key, ref;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      passage.passages = [];\r\n      ref = this.books[passage.value].context;\r\n      for (key in ref) {\r\n        if (!hasProp.call(ref, key)) continue;\r\n        context[key] = this.books[passage.value].context[key];\r\n      }\r\n      accum.push(passage);\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.cv_psalm = function(passage, accum, context) {\r\n      var bc, c_psalm, ref, v;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      passage.type = \"bcv\";\r\n      ref = passage.value, c_psalm = ref[0], v = ref[1];\r\n      bc = this.c_psalm(c_psalm, [], passage.start_context)[0][0];\r\n      passage.value = [bc, v];\r\n      return this.bcv(passage, accum, context);\r\n    };\r\n\r\n    bcv_passage.prototype.ff = function(passage, accum, context) {\r\n      var ref, ref1;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      passage.value.push({\r\n        type: \"integer\",\r\n        indices: passage.indices,\r\n        value: 999\r\n      });\r\n      ref = this.range(passage, [], passage.start_context), (ref1 = ref[0], passage = ref1[0]), context = ref[1];\r\n      passage.value[0].indices = passage.value[1].indices;\r\n      passage.value[0].absolute_indices = passage.value[1].absolute_indices;\r\n      passage.value.pop();\r\n      if (passage.passages[0].valid.messages.end_verse_not_exist != null) {\r\n        delete passage.passages[0].valid.messages.end_verse_not_exist;\r\n      }\r\n      if (passage.passages[0].valid.messages.end_chapter_not_exist != null) {\r\n        delete passage.passages[0].valid.messages.end_chapter_not_exist;\r\n      }\r\n      if (passage.passages[0].end.original_c != null) {\r\n        delete passage.passages[0].end.original_c;\r\n      }\r\n      accum.push(passage);\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.integer_title = function(passage, accum, context) {\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      if (context.b !== \"Ps\") {\r\n        return this.integer(passage.value[0], accum, context);\r\n      }\r\n      passage.value[0] = {\r\n        type: \"c\",\r\n        value: [passage.value[0]],\r\n        indices: [passage.value[0].indices[0], passage.value[0].indices[1]]\r\n      };\r\n      passage.value[1].type = \"v\";\r\n      passage.value[1].original_type = \"title\";\r\n      passage.value[1].value = [\r\n        {\r\n          type: \"integer\",\r\n          value: 1,\r\n          indices: passage.value[1].value.indices\r\n        }\r\n      ];\r\n      passage.type = \"cv\";\r\n      return this.cv(passage, accum, passage.start_context);\r\n    };\r\n\r\n    bcv_passage.prototype.integer = function(passage, accum, context) {\r\n      if (context.v != null) {\r\n        return this.v(passage, accum, context);\r\n      }\r\n      return this.c(passage, accum, context);\r\n    };\r\n\r\n    bcv_passage.prototype.next_v = function(passage, accum, context) {\r\n      var prev_integer, psg, ref, ref1, ref2, ref3;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      prev_integer = this.pluck_last_recursively(\"integer\", passage.value);\r\n      if (prev_integer == null) {\r\n        prev_integer = {\r\n          value: 1\r\n        };\r\n      }\r\n      passage.value.push({\r\n        type: \"integer\",\r\n        indices: passage.indices,\r\n        value: prev_integer.value + 1\r\n      });\r\n      ref = this.range(passage, [], passage.start_context), (ref1 = ref[0], psg = ref1[0]), context = ref[1];\r\n      if ((psg.passages[0].valid.messages.end_verse_not_exist != null) && (psg.passages[0].valid.messages.start_verse_not_exist == null) && (psg.passages[0].valid.messages.start_chapter_not_exist == null) && (context.c != null)) {\r\n        passage.value.pop();\r\n        passage.value.push({\r\n          type: \"cv\",\r\n          indices: passage.indices,\r\n          value: [\r\n            {\r\n              type: \"c\",\r\n              value: [\r\n                {\r\n                  type: \"integer\",\r\n                  value: context.c + 1,\r\n                  indices: passage.indices\r\n                }\r\n              ],\r\n              indices: passage.indices\r\n            }, {\r\n              type: \"v\",\r\n              value: [\r\n                {\r\n                  type: \"integer\",\r\n                  value: 1,\r\n                  indices: passage.indices\r\n                }\r\n              ],\r\n              indices: passage.indices\r\n            }\r\n          ]\r\n        });\r\n        ref2 = this.range(passage, [], passage.start_context), (ref3 = ref2[0], psg = ref3[0]), context = ref2[1];\r\n      }\r\n      psg.value[0].indices = psg.value[1].indices;\r\n      psg.value[0].absolute_indices = psg.value[1].absolute_indices;\r\n      psg.value.pop();\r\n      if (psg.passages[0].valid.messages.end_verse_not_exist != null) {\r\n        delete psg.passages[0].valid.messages.end_verse_not_exist;\r\n      }\r\n      if (psg.passages[0].valid.messages.end_chapter_not_exist != null) {\r\n        delete psg.passages[0].valid.messages.end_chapter_not_exist;\r\n      }\r\n      if (psg.passages[0].end.original_c != null) {\r\n        delete psg.passages[0].end.original_c;\r\n      }\r\n      accum.push(psg);\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.sequence = function(passage, accum, context) {\r\n      var k, l, len, len1, obj, psg, ref, ref1, ref2, ref3, sub_psg;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      passage.passages = [];\r\n      ref = passage.value;\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        obj = ref[k];\r\n        ref1 = this.handle_array(obj, [], context), (ref2 = ref1[0], psg = ref2[0]), context = ref1[1];\r\n        ref3 = psg.passages;\r\n        for (l = 0, len1 = ref3.length; l < len1; l++) {\r\n          sub_psg = ref3[l];\r\n          if (sub_psg.type == null) {\r\n            sub_psg.type = psg.type;\r\n          }\r\n          if (sub_psg.absolute_indices == null) {\r\n            sub_psg.absolute_indices = psg.absolute_indices;\r\n          }\r\n          if (psg.start_context.translations != null) {\r\n            sub_psg.translations = psg.start_context.translations;\r\n          }\r\n          sub_psg.enclosed_absolute_indices = psg.type === \"sequence_post_enclosed\" ? psg.absolute_indices : [-1, -1];\r\n          passage.passages.push(sub_psg);\r\n        }\r\n      }\r\n      if (passage.absolute_indices == null) {\r\n        if (passage.passages.length > 0 && passage.type === \"sequence\") {\r\n          passage.absolute_indices = [passage.passages[0].absolute_indices[0], passage.passages[passage.passages.length - 1].absolute_indices[1]];\r\n        } else {\r\n          passage.absolute_indices = this.get_absolute_indices(passage.indices);\r\n        }\r\n      }\r\n      accum.push(passage);\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.sequence_post_enclosed = function(passage, accum, context) {\r\n      return this.sequence(passage, accum, context);\r\n    };\r\n\r\n    bcv_passage.prototype.v = function(passage, accum, context) {\r\n      var c, no_c, ref, v, valid;\r\n      v = passage.type === \"integer\" ? passage.value : this.pluck(\"integer\", passage.value).value;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      c = context.c != null ? context.c : 1;\r\n      valid = this.validate_ref(passage.start_context.translations, {\r\n        b: context.b,\r\n        c: c,\r\n        v: v\r\n      });\r\n      ref = this.fix_start_zeroes(valid, 0, v), no_c = ref[0], v = ref[1];\r\n      passage.passages = [\r\n        {\r\n          start: {\r\n            b: context.b,\r\n            c: c,\r\n            v: v\r\n          },\r\n          end: {\r\n            b: context.b,\r\n            c: c,\r\n            v: v\r\n          },\r\n          valid: valid\r\n        }\r\n      ];\r\n      if (passage.start_context.translations != null) {\r\n        passage.passages[0].translations = passage.start_context.translations;\r\n      }\r\n      if (passage.absolute_indices == null) {\r\n        passage.absolute_indices = this.get_absolute_indices(passage.indices);\r\n      }\r\n      accum.push(passage);\r\n      context.v = v;\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.range = function(passage, accum, context) {\r\n      var end, end_obj, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, return_now, return_value, start, start_obj, valid;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      ref = passage.value, start = ref[0], end = ref[1];\r\n      ref1 = this.handle_obj(start, [], context), (ref2 = ref1[0], start = ref2[0]), context = ref1[1];\r\n      if (end.type === \"v\" && ((start.type === \"bc\" && !((ref3 = start.passages) != null ? (ref4 = ref3[0]) != null ? (ref5 = ref4.valid) != null ? (ref6 = ref5.messages) != null ? ref6.start_chapter_not_exist_in_single_chapter_book : void 0 : void 0 : void 0 : void 0)) || start.type === \"c\") && this.options.end_range_digits_strategy === \"verse\") {\r\n        passage.value[0] = start;\r\n        return this.range_change_integer_end(passage, accum);\r\n      }\r\n      ref7 = this.handle_obj(end, [], context), (ref8 = ref7[0], end = ref8[0]), context = ref7[1];\r\n      passage.value = [start, end];\r\n      passage.indices = [start.indices[0], end.indices[1]];\r\n      delete passage.absolute_indices;\r\n      start_obj = {\r\n        b: start.passages[0].start.b,\r\n        c: start.passages[0].start.c,\r\n        v: start.passages[0].start.v,\r\n        type: start.type\r\n      };\r\n      end_obj = {\r\n        b: end.passages[0].end.b,\r\n        c: end.passages[0].end.c,\r\n        v: end.passages[0].end.v,\r\n        type: end.type\r\n      };\r\n      if (end.passages[0].valid.messages.start_chapter_is_zero) {\r\n        end_obj.c = 0;\r\n      }\r\n      if (end.passages[0].valid.messages.start_verse_is_zero) {\r\n        end_obj.v = 0;\r\n      }\r\n      valid = this.validate_ref(passage.start_context.translations, start_obj, end_obj);\r\n      if (valid.valid) {\r\n        ref9 = this.range_handle_valid(valid, passage, start, start_obj, end, end_obj, accum), return_now = ref9[0], return_value = ref9[1];\r\n        if (return_now) {\r\n          return return_value;\r\n        }\r\n      } else {\r\n        return this.range_handle_invalid(valid, passage, start, start_obj, end, end_obj, accum);\r\n      }\r\n      if (passage.absolute_indices == null) {\r\n        passage.absolute_indices = this.get_absolute_indices(passage.indices);\r\n      }\r\n      passage.passages = [\r\n        {\r\n          start: start_obj,\r\n          end: end_obj,\r\n          valid: valid\r\n        }\r\n      ];\r\n      if (passage.start_context.translations != null) {\r\n        passage.passages[0].translations = passage.start_context.translations;\r\n      }\r\n      if (start_obj.type === \"b\") {\r\n        if (end_obj.type === \"b\") {\r\n          passage.type = \"b_range\";\r\n        } else {\r\n          passage.type = \"b_range_start\";\r\n        }\r\n      } else if (end_obj.type === \"b\") {\r\n        passage.type = \"range_end_b\";\r\n      }\r\n      accum.push(passage);\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.range_change_end = function(passage, accum, new_end) {\r\n      var end, new_obj, ref, start;\r\n      ref = passage.value, start = ref[0], end = ref[1];\r\n      if (end.type === \"integer\") {\r\n        end.original_value = end.value;\r\n        end.value = new_end;\r\n      } else if (end.type === \"v\") {\r\n        new_obj = this.pluck(\"integer\", end.value);\r\n        new_obj.original_value = new_obj.value;\r\n        new_obj.value = new_end;\r\n      } else if (end.type === \"cv\") {\r\n        new_obj = this.pluck(\"c\", end.value);\r\n        new_obj.original_value = new_obj.value;\r\n        new_obj.value = new_end;\r\n      }\r\n      return this.handle_obj(passage, accum, passage.start_context);\r\n    };\r\n\r\n    bcv_passage.prototype.range_change_integer_end = function(passage, accum) {\r\n      var end, ref, start;\r\n      ref = passage.value, start = ref[0], end = ref[1];\r\n      if (passage.original_type == null) {\r\n        passage.original_type = passage.type;\r\n      }\r\n      if (passage.original_value == null) {\r\n        passage.original_value = [start, end];\r\n      }\r\n      passage.type = start.type === \"integer\" ? \"cv\" : start.type + \"v\";\r\n      if (start.type === \"integer\") {\r\n        passage.value[0] = {\r\n          type: \"c\",\r\n          value: [start],\r\n          indices: start.indices\r\n        };\r\n      }\r\n      if (end.type === \"integer\") {\r\n        passage.value[1] = {\r\n          type: \"v\",\r\n          value: [end],\r\n          indices: end.indices\r\n        };\r\n      }\r\n      return this.handle_obj(passage, accum, passage.start_context);\r\n    };\r\n\r\n    bcv_passage.prototype.range_check_new_end = function(translations, start_obj, end_obj, valid) {\r\n      var new_end, new_valid, obj_to_validate, type;\r\n      new_end = 0;\r\n      type = null;\r\n      if (valid.messages.end_chapter_before_start) {\r\n        type = \"c\";\r\n      } else if (valid.messages.end_verse_before_start) {\r\n        type = \"v\";\r\n      }\r\n      if (type != null) {\r\n        new_end = this.range_get_new_end_value(start_obj, end_obj, valid, type);\r\n      }\r\n      if (new_end > 0) {\r\n        obj_to_validate = {\r\n          b: end_obj.b,\r\n          c: end_obj.c,\r\n          v: end_obj.v\r\n        };\r\n        obj_to_validate[type] = new_end;\r\n        new_valid = this.validate_ref(translations, obj_to_validate);\r\n        if (!new_valid.valid) {\r\n          new_end = 0;\r\n        }\r\n      }\r\n      return new_end;\r\n    };\r\n\r\n    bcv_passage.prototype.range_end_b = function(passage, accum, context) {\r\n      return this.range(passage, accum, context);\r\n    };\r\n\r\n    bcv_passage.prototype.range_get_new_end_value = function(start_obj, end_obj, valid, key) {\r\n      var new_end;\r\n      new_end = 0;\r\n      if ((key === \"c\" && valid.messages.end_chapter_is_zero) || (key === \"v\" && valid.messages.end_verse_is_zero)) {\r\n        return new_end;\r\n      }\r\n      if (start_obj[key] >= 10 && end_obj[key] < 10 && start_obj[key] - 10 * Math.floor(start_obj[key] / 10) < end_obj[key]) {\r\n        new_end = end_obj[key] + 10 * Math.floor(start_obj[key] / 10);\r\n      } else if (start_obj[key] >= 100 && end_obj[key] < 100 && start_obj[key] - 100 < end_obj[key]) {\r\n        new_end = end_obj[key] + 100;\r\n      }\r\n      return new_end;\r\n    };\r\n\r\n    bcv_passage.prototype.range_handle_invalid = function(valid, passage, start, start_obj, end, end_obj, accum) {\r\n      var new_end, ref, temp_valid, temp_value;\r\n      if (valid.valid === false && (valid.messages.end_chapter_before_start || valid.messages.end_verse_before_start) && (end.type === \"integer\" || end.type === \"v\") || (valid.valid === false && valid.messages.end_chapter_before_start && end.type === \"cv\")) {\r\n        new_end = this.range_check_new_end(passage.start_context.translations, start_obj, end_obj, valid);\r\n        if (new_end > 0) {\r\n          return this.range_change_end(passage, accum, new_end);\r\n        }\r\n      }\r\n      if (this.options.end_range_digits_strategy === \"verse\" && (start_obj.v == null) && (end.type === \"integer\" || end.type === \"v\")) {\r\n        temp_value = end.type === \"v\" ? this.pluck(\"integer\", end.value) : end.value;\r\n        temp_valid = this.validate_ref(passage.start_context.translations, {\r\n          b: start_obj.b,\r\n          c: start_obj.c,\r\n          v: temp_value\r\n        });\r\n        if (temp_valid.valid) {\r\n          return this.range_change_integer_end(passage, accum);\r\n        }\r\n      }\r\n      if (passage.original_type == null) {\r\n        passage.original_type = passage.type;\r\n      }\r\n      passage.type = \"sequence\";\r\n      ref = [[start, end], [[start], [end]]], passage.original_value = ref[0], passage.value = ref[1];\r\n      return this.sequence(passage, accum, passage.start_context);\r\n    };\r\n\r\n    bcv_passage.prototype.range_handle_valid = function(valid, passage, start, start_obj, end, end_obj, accum) {\r\n      var temp_valid, temp_value;\r\n      if (valid.messages.end_chapter_not_exist && this.options.end_range_digits_strategy === \"verse\" && (start_obj.v == null) && (end.type === \"integer\" || end.type === \"v\") && this.options.passage_existence_strategy.indexOf(\"v\") >= 0) {\r\n        temp_value = end.type === \"v\" ? this.pluck(\"integer\", end.value) : end.value;\r\n        temp_valid = this.validate_ref(passage.start_context.translations, {\r\n          b: start_obj.b,\r\n          c: start_obj.c,\r\n          v: temp_value\r\n        });\r\n        if (temp_valid.valid) {\r\n          return [true, this.range_change_integer_end(passage, accum)];\r\n        }\r\n      }\r\n      this.range_validate(valid, start_obj, end_obj, passage);\r\n      return [false, null];\r\n    };\r\n\r\n    bcv_passage.prototype.range_validate = function(valid, start_obj, end_obj, passage) {\r\n      var ref;\r\n      if (valid.messages.end_chapter_not_exist || valid.messages.end_chapter_not_exist_in_single_chapter_book) {\r\n        end_obj.original_c = end_obj.c;\r\n        end_obj.c = valid.messages.end_chapter_not_exist ? valid.messages.end_chapter_not_exist : valid.messages.end_chapter_not_exist_in_single_chapter_book;\r\n        if (end_obj.v != null) {\r\n          end_obj.v = this.validate_ref(passage.start_context.translations, {\r\n            b: end_obj.b,\r\n            c: end_obj.c,\r\n            v: 999\r\n          }).messages.end_verse_not_exist;\r\n          delete valid.messages.end_verse_is_zero;\r\n        }\r\n      } else if (valid.messages.end_verse_not_exist) {\r\n        end_obj.original_v = end_obj.v;\r\n        end_obj.v = valid.messages.end_verse_not_exist;\r\n      }\r\n      if (valid.messages.end_verse_is_zero && this.options.zero_verse_strategy !== \"allow\") {\r\n        end_obj.v = valid.messages.end_verse_is_zero;\r\n      }\r\n      if (valid.messages.end_chapter_is_zero) {\r\n        end_obj.c = valid.messages.end_chapter_is_zero;\r\n      }\r\n      ref = this.fix_start_zeroes(valid, start_obj.c, start_obj.v), start_obj.c = ref[0], start_obj.v = ref[1];\r\n      return true;\r\n    };\r\n\r\n    bcv_passage.prototype.translation_sequence = function(passage, accum, context) {\r\n      var k, l, len, len1, ref, translation, translations, val;\r\n      passage.start_context = bcv_utils.shallow_clone(context);\r\n      translations = [];\r\n      translations.push({\r\n        translation: this.books[passage.value[0].value].parsed\r\n      });\r\n      ref = passage.value[1];\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        val = ref[k];\r\n        val = this.books[this.pluck(\"translation\", val).value].parsed;\r\n        if (val != null) {\r\n          translations.push({\r\n            translation: val\r\n          });\r\n        }\r\n      }\r\n      for (l = 0, len1 = translations.length; l < len1; l++) {\r\n        translation = translations[l];\r\n        if (this.translations.aliases[translation.translation] != null) {\r\n          translation.alias = this.translations.aliases[translation.translation].alias;\r\n          translation.osis = this.translations.aliases[translation.translation].osis || translation.translation.toUpperCase();\r\n        } else {\r\n          translation.alias = \"default\";\r\n          translation.osis = translation.translation.toUpperCase();\r\n        }\r\n      }\r\n      if (accum.length > 0) {\r\n        context = this.translation_sequence_apply(accum, translations);\r\n      }\r\n      if (passage.absolute_indices == null) {\r\n        passage.absolute_indices = this.get_absolute_indices(passage.indices);\r\n      }\r\n      accum.push(passage);\r\n      this.reset_context(context, [\"translations\"]);\r\n      return [accum, context];\r\n    };\r\n\r\n    bcv_passage.prototype.translation_sequence_apply = function(accum, translations) {\r\n      var context, i, k, new_accum, ref, ref1, use_i;\r\n      use_i = 0;\r\n      for (i = k = ref = accum.length - 1; ref <= 0 ? k <= 0 : k >= 0; i = ref <= 0 ? ++k : --k) {\r\n        if (accum[i].original_type != null) {\r\n          accum[i].type = accum[i].original_type;\r\n        }\r\n        if (accum[i].original_value != null) {\r\n          accum[i].value = accum[i].original_value;\r\n        }\r\n        if (accum[i].type !== \"translation_sequence\") {\r\n          continue;\r\n        }\r\n        use_i = i + 1;\r\n        break;\r\n      }\r\n      if (use_i < accum.length) {\r\n        accum[use_i].start_context.translations = translations;\r\n        ref1 = this.handle_array(accum.slice(use_i), [], accum[use_i].start_context), new_accum = ref1[0], context = ref1[1];\r\n      } else {\r\n        context = bcv_utils.shallow_clone(accum[accum.length - 1].start_context);\r\n      }\r\n      return context;\r\n    };\r\n\r\n    bcv_passage.prototype.pluck = function(type, passages) {\r\n      var k, len, passage;\r\n      for (k = 0, len = passages.length; k < len; k++) {\r\n        passage = passages[k];\r\n        if (!((passage != null) && (passage.type != null) && passage.type === type)) {\r\n          continue;\r\n        }\r\n        if (type === \"c\" || type === \"v\") {\r\n          return this.pluck(\"integer\", passage.value);\r\n        }\r\n        return passage;\r\n      }\r\n      return null;\r\n    };\r\n\r\n    bcv_passage.prototype.pluck_last_recursively = function(type, passages) {\r\n      var k, passage, value;\r\n      for (k = passages.length - 1; k >= 0; k += -1) {\r\n        passage = passages[k];\r\n        if (!((passage != null) && (passage.type != null))) {\r\n          continue;\r\n        }\r\n        if (passage.type === type) {\r\n          return this.pluck(type, [passage]);\r\n        }\r\n        value = this.pluck_last_recursively(type, passage.value);\r\n        if (value != null) {\r\n          return value;\r\n        }\r\n      }\r\n      return null;\r\n    };\r\n\r\n    bcv_passage.prototype.set_context_from_object = function(context, keys, obj) {\r\n      var k, len, results, type;\r\n      results = [];\r\n      for (k = 0, len = keys.length; k < len; k++) {\r\n        type = keys[k];\r\n        if (obj[type] == null) {\r\n          continue;\r\n        }\r\n        results.push(context[type] = obj[type]);\r\n      }\r\n      return results;\r\n    };\r\n\r\n    bcv_passage.prototype.reset_context = function(context, keys) {\r\n      var k, len, results, type;\r\n      results = [];\r\n      for (k = 0, len = keys.length; k < len; k++) {\r\n        type = keys[k];\r\n        results.push(delete context[type]);\r\n      }\r\n      return results;\r\n    };\r\n\r\n    bcv_passage.prototype.fix_start_zeroes = function(valid, c, v) {\r\n      if (valid.messages.start_chapter_is_zero && this.options.zero_chapter_strategy === \"upgrade\") {\r\n        c = valid.messages.start_chapter_is_zero;\r\n      }\r\n      if (valid.messages.start_verse_is_zero && this.options.zero_verse_strategy === \"upgrade\") {\r\n        v = valid.messages.start_verse_is_zero;\r\n      }\r\n      return [c, v];\r\n    };\r\n\r\n    bcv_passage.prototype.calculate_indices = function(match, adjust) {\r\n      var character, end_index, indices, k, l, len, len1, len2, m, match_index, part, part_length, parts, ref, switch_type, temp;\r\n      switch_type = \"book\";\r\n      indices = [];\r\n      match_index = 0;\r\n      adjust = parseInt(adjust, 10);\r\n      parts = [match];\r\n      ref = [\"\\x1e\", \"\\x1f\"];\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        character = ref[k];\r\n        temp = [];\r\n        for (l = 0, len1 = parts.length; l < len1; l++) {\r\n          part = parts[l];\r\n          temp = temp.concat(part.split(character));\r\n        }\r\n        parts = temp;\r\n      }\r\n      for (m = 0, len2 = parts.length; m < len2; m++) {\r\n        part = parts[m];\r\n        switch_type = switch_type === \"book\" ? \"rest\" : \"book\";\r\n        part_length = part.length;\r\n        if (part_length === 0) {\r\n          continue;\r\n        }\r\n        if (switch_type === \"book\") {\r\n          part = part.replace(/\\/\\d+$/, \"\");\r\n          end_index = match_index + part_length;\r\n          if (indices.length > 0 && indices[indices.length - 1].index === adjust) {\r\n            indices[indices.length - 1].end = end_index;\r\n          } else {\r\n            indices.push({\r\n              start: match_index,\r\n              end: end_index,\r\n              index: adjust\r\n            });\r\n          }\r\n          match_index += part_length + 2;\r\n          adjust = this.books[part].start_index + this.books[part].value.length - match_index;\r\n          indices.push({\r\n            start: end_index + 1,\r\n            end: end_index + 1,\r\n            index: adjust\r\n          });\r\n        } else {\r\n          end_index = match_index + part_length - 1;\r\n          if (indices.length > 0 && indices[indices.length - 1].index === adjust) {\r\n            indices[indices.length - 1].end = end_index;\r\n          } else {\r\n            indices.push({\r\n              start: match_index,\r\n              end: end_index,\r\n              index: adjust\r\n            });\r\n          }\r\n          match_index += part_length;\r\n        }\r\n      }\r\n      return indices;\r\n    };\r\n\r\n    bcv_passage.prototype.get_absolute_indices = function(arg1) {\r\n      var end, end_out, index, k, len, ref, start, start_out;\r\n      start = arg1[0], end = arg1[1];\r\n      start_out = null;\r\n      end_out = null;\r\n      ref = this.indices;\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        index = ref[k];\r\n        if (start_out === null && (index.start <= start && start <= index.end)) {\r\n          start_out = start + index.index;\r\n        }\r\n        if ((index.start <= end && end <= index.end)) {\r\n          end_out = end + index.index + 1;\r\n          break;\r\n        }\r\n      }\r\n      return [start_out, end_out];\r\n    };\r\n\r\n    bcv_passage.prototype.validate_ref = function(translations, start, end) {\r\n      var k, len, messages, temp_valid, translation, valid;\r\n      if (!((translations != null) && translations.length > 0)) {\r\n        translations = [\r\n          {\r\n            translation: \"default\",\r\n            osis: \"\",\r\n            alias: \"default\"\r\n          }\r\n        ];\r\n      }\r\n      valid = false;\r\n      messages = {};\r\n      for (k = 0, len = translations.length; k < len; k++) {\r\n        translation = translations[k];\r\n        if (translation.alias == null) {\r\n          translation.alias = \"default\";\r\n        }\r\n        if (translation.alias == null) {\r\n          if (messages.translation_invalid == null) {\r\n            messages.translation_invalid = [];\r\n          }\r\n          messages.translation_invalid.push(translation);\r\n          continue;\r\n        }\r\n        if (this.translations.aliases[translation.alias] == null) {\r\n          translation.alias = \"default\";\r\n          if (messages.translation_unknown == null) {\r\n            messages.translation_unknown = [];\r\n          }\r\n          messages.translation_unknown.push(translation);\r\n        }\r\n        temp_valid = this.validate_start_ref(translation.alias, start, messages)[0];\r\n        if (end) {\r\n          temp_valid = this.validate_end_ref(translation.alias, start, end, temp_valid, messages)[0];\r\n        }\r\n        if (temp_valid === true) {\r\n          valid = true;\r\n        }\r\n      }\r\n      return {\r\n        valid: valid,\r\n        messages: messages\r\n      };\r\n    };\r\n\r\n    bcv_passage.prototype.validate_start_ref = function(translation, start, messages) {\r\n      var ref, ref1, translation_order, valid;\r\n      valid = true;\r\n      if (translation !== \"default\" && (((ref = this.translations[translation]) != null ? ref.chapters[start.b] : void 0) == null)) {\r\n        this.promote_book_to_translation(start.b, translation);\r\n      }\r\n      translation_order = ((ref1 = this.translations[translation]) != null ? ref1.order : void 0) != null ? translation : \"default\";\r\n      if (start.v != null) {\r\n        start.v = parseInt(start.v, 10);\r\n      }\r\n      if (this.translations[translation_order].order[start.b] != null) {\r\n        if (start.c == null) {\r\n          start.c = 1;\r\n        }\r\n        start.c = parseInt(start.c, 10);\r\n        if (isNaN(start.c)) {\r\n          valid = false;\r\n          messages.start_chapter_not_numeric = true;\r\n          return [valid, messages];\r\n        }\r\n        if (start.c === 0) {\r\n          messages.start_chapter_is_zero = 1;\r\n          if (this.options.zero_chapter_strategy === \"error\") {\r\n            valid = false;\r\n          } else {\r\n            start.c = 1;\r\n          }\r\n        }\r\n        if ((start.v != null) && start.v === 0) {\r\n          messages.start_verse_is_zero = 1;\r\n          if (this.options.zero_verse_strategy === \"error\") {\r\n            valid = false;\r\n          } else if (this.options.zero_verse_strategy === \"upgrade\") {\r\n            start.v = 1;\r\n          }\r\n        }\r\n        if (start.c > 0 && (this.translations[translation].chapters[start.b][start.c - 1] != null)) {\r\n          if (start.v != null) {\r\n            if (isNaN(start.v)) {\r\n              valid = false;\r\n              messages.start_verse_not_numeric = true;\r\n            } else if (start.v > this.translations[translation].chapters[start.b][start.c - 1]) {\r\n              if (this.options.passage_existence_strategy.indexOf(\"v\") >= 0) {\r\n                valid = false;\r\n                messages.start_verse_not_exist = this.translations[translation].chapters[start.b][start.c - 1];\r\n              }\r\n            }\r\n          } else if (start.c === 1 && this.options.single_chapter_1_strategy === \"verse\" && this.translations[translation].chapters[start.b].length === 1) {\r\n            messages.start_chapter_1 = 1;\r\n          }\r\n        } else {\r\n          if (start.c !== 1 && this.translations[translation].chapters[start.b].length === 1) {\r\n            valid = false;\r\n            messages.start_chapter_not_exist_in_single_chapter_book = 1;\r\n          } else if (start.c > 0 && this.options.passage_existence_strategy.indexOf(\"c\") >= 0) {\r\n            valid = false;\r\n            messages.start_chapter_not_exist = this.translations[translation].chapters[start.b].length;\r\n          }\r\n        }\r\n      } else if (start.b == null) {\r\n        valid = false;\r\n        messages.start_book_not_defined = true;\r\n      } else {\r\n        if (this.options.passage_existence_strategy.indexOf(\"b\") >= 0) {\r\n          valid = false;\r\n        }\r\n        messages.start_book_not_exist = true;\r\n      }\r\n      return [valid, messages];\r\n    };\r\n\r\n    bcv_passage.prototype.validate_end_ref = function(translation, start, end, valid, messages) {\r\n      var ref, translation_order;\r\n      translation_order = ((ref = this.translations[translation]) != null ? ref.order : void 0) != null ? translation : \"default\";\r\n      if (end.c != null) {\r\n        end.c = parseInt(end.c, 10);\r\n        if (isNaN(end.c)) {\r\n          valid = false;\r\n          messages.end_chapter_not_numeric = true;\r\n        } else if (end.c === 0) {\r\n          messages.end_chapter_is_zero = 1;\r\n          if (this.options.zero_chapter_strategy === \"error\") {\r\n            valid = false;\r\n          } else {\r\n            end.c = 1;\r\n          }\r\n        }\r\n      }\r\n      if (end.v != null) {\r\n        end.v = parseInt(end.v, 10);\r\n        if (isNaN(end.v)) {\r\n          valid = false;\r\n          messages.end_verse_not_numeric = true;\r\n        } else if (end.v === 0) {\r\n          messages.end_verse_is_zero = 1;\r\n          if (this.options.zero_verse_strategy === \"error\") {\r\n            valid = false;\r\n          } else if (this.options.zero_verse_strategy === \"upgrade\") {\r\n            end.v = 1;\r\n          }\r\n        }\r\n      }\r\n      if (this.translations[translation_order].order[end.b] != null) {\r\n        if ((end.c == null) && this.translations[translation].chapters[end.b].length === 1) {\r\n          end.c = 1;\r\n        }\r\n        if ((this.translations[translation_order].order[start.b] != null) && this.translations[translation_order].order[start.b] > this.translations[translation_order].order[end.b]) {\r\n          if (this.options.passage_existence_strategy.indexOf(\"b\") >= 0) {\r\n            valid = false;\r\n          }\r\n          messages.end_book_before_start = true;\r\n        }\r\n        if (start.b === end.b && (end.c != null) && !isNaN(end.c)) {\r\n          if (start.c == null) {\r\n            start.c = 1;\r\n          }\r\n          if (!isNaN(parseInt(start.c, 10)) && start.c > end.c) {\r\n            valid = false;\r\n            messages.end_chapter_before_start = true;\r\n          } else if (start.c === end.c && (end.v != null) && !isNaN(end.v)) {\r\n            if (start.v == null) {\r\n              start.v = 1;\r\n            }\r\n            if (!isNaN(parseInt(start.v, 10)) && start.v > end.v) {\r\n              valid = false;\r\n              messages.end_verse_before_start = true;\r\n            }\r\n          }\r\n        }\r\n        if ((end.c != null) && !isNaN(end.c)) {\r\n          if (this.translations[translation].chapters[end.b][end.c - 1] == null) {\r\n            if (this.translations[translation].chapters[end.b].length === 1) {\r\n              messages.end_chapter_not_exist_in_single_chapter_book = 1;\r\n            } else if (end.c > 0 && this.options.passage_existence_strategy.indexOf(\"c\") >= 0) {\r\n              messages.end_chapter_not_exist = this.translations[translation].chapters[end.b].length;\r\n            }\r\n          }\r\n        }\r\n        if ((end.v != null) && !isNaN(end.v)) {\r\n          if (end.c == null) {\r\n            end.c = this.translations[translation].chapters[end.b].length;\r\n          }\r\n          if (end.v > this.translations[translation].chapters[end.b][end.c - 1] && this.options.passage_existence_strategy.indexOf(\"v\") >= 0) {\r\n            messages.end_verse_not_exist = this.translations[translation].chapters[end.b][end.c - 1];\r\n          }\r\n        }\r\n      } else {\r\n        valid = false;\r\n        messages.end_book_not_exist = true;\r\n      }\r\n      return [valid, messages];\r\n    };\r\n\r\n    bcv_passage.prototype.promote_book_to_translation = function(book, translation) {\r\n      var base, base1;\r\n      if ((base = this.translations)[translation] == null) {\r\n        base[translation] = {};\r\n      }\r\n      if ((base1 = this.translations[translation]).chapters == null) {\r\n        base1.chapters = {};\r\n      }\r\n      if (this.translations[translation].chapters[book] == null) {\r\n        return this.translations[translation].chapters[book] = bcv_utils.shallow_clone_array(this.translations[\"default\"].chapters[book]);\r\n      }\r\n    };\r\n\r\n    return bcv_passage;\r\n\r\n  })();\r\n\r\n  bcv_utils = {\r\n    shallow_clone: function(obj) {\r\n      var key, out, val;\r\n      if (obj == null) {\r\n        return obj;\r\n      }\r\n      out = {};\r\n      for (key in obj) {\r\n        if (!hasProp.call(obj, key)) continue;\r\n        val = obj[key];\r\n        out[key] = val;\r\n      }\r\n      return out;\r\n    },\r\n    shallow_clone_array: function(arr) {\r\n      var i, k, out, ref;\r\n      if (arr == null) {\r\n        return arr;\r\n      }\r\n      out = [];\r\n      for (i = k = 0, ref = arr.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {\r\n        if (typeof arr[i] !== \"undefined\") {\r\n          out[i] = arr[i];\r\n        }\r\n      }\r\n      return out;\r\n    }\r\n  };\r\n\r\n  bcv_parser.prototype.regexps.translations = /(?:(?:(?:E[RS]|AS|TNI|RS|KJ)V|LXX|MSG|CE[BV]|AMP|HCSB|N(?:(?:KJ|RS)V|LT|IR?V|A(?:B(?:RE)?|SB?))))\\b/gi;\r\n\r\n  bcv_parser.prototype.translations = {\r\n    aliases: {\r\n      ceb: {\r\n        alias: \"ceb\"\r\n      },\r\n      kjv: {\r\n        alias: \"kjv\"\r\n      },\r\n      lxx: {\r\n        alias: \"nab\"\r\n      },\r\n      nab: {\r\n        alias: \"nab\"\r\n      },\r\n      nabre: {\r\n        alias: \"nab\"\r\n      },\r\n      nas: {\r\n        osis: \"NASB\",\r\n        alias: \"default\"\r\n      },\r\n      nirv: {\r\n        alias: \"kjv\"\r\n      },\r\n      niv: {\r\n        alias: \"kjv\"\r\n      },\r\n      nkjv: {\r\n        alias: \"nkjv\"\r\n      },\r\n      nlt: {\r\n        alias: \"nlt\"\r\n      },\r\n      nrsv: {\r\n        alias: \"nrsv\"\r\n      },\r\n      tniv: {\r\n        alias: \"kjv\"\r\n      },\r\n      \"default\": {\r\n        osis: \"\",\r\n        alias: \"default\"\r\n      }\r\n    },\r\n    alternates: {},\r\n    \"default\": {\r\n      order: {\r\n        \"Gen\": 1,\r\n        \"Exod\": 2,\r\n        \"Lev\": 3,\r\n        \"Num\": 4,\r\n        \"Deut\": 5,\r\n        \"Josh\": 6,\r\n        \"Judg\": 7,\r\n        \"Ruth\": 8,\r\n        \"1Sam\": 9,\r\n        \"2Sam\": 10,\r\n        \"1Kgs\": 11,\r\n        \"2Kgs\": 12,\r\n        \"1Chr\": 13,\r\n        \"2Chr\": 14,\r\n        \"Ezra\": 15,\r\n        \"Neh\": 16,\r\n        \"Esth\": 17,\r\n        \"Job\": 18,\r\n        \"Ps\": 19,\r\n        \"Prov\": 20,\r\n        \"Eccl\": 21,\r\n        \"Song\": 22,\r\n        \"Isa\": 23,\r\n        \"Jer\": 24,\r\n        \"Lam\": 25,\r\n        \"Ezek\": 26,\r\n        \"Dan\": 27,\r\n        \"Hos\": 28,\r\n        \"Joel\": 29,\r\n        \"Amos\": 30,\r\n        \"Obad\": 31,\r\n        \"Jonah\": 32,\r\n        \"Mic\": 33,\r\n        \"Nah\": 34,\r\n        \"Hab\": 35,\r\n        \"Zeph\": 36,\r\n        \"Hag\": 37,\r\n        \"Zech\": 38,\r\n        \"Mal\": 39,\r\n        \"Matt\": 40,\r\n        \"Mark\": 41,\r\n        \"Luke\": 42,\r\n        \"John\": 43,\r\n        \"Acts\": 44,\r\n        \"Rom\": 45,\r\n        \"1Cor\": 46,\r\n        \"2Cor\": 47,\r\n        \"Gal\": 48,\r\n        \"Eph\": 49,\r\n        \"Phil\": 50,\r\n        \"Col\": 51,\r\n        \"1Thess\": 52,\r\n        \"2Thess\": 53,\r\n        \"1Tim\": 54,\r\n        \"2Tim\": 55,\r\n        \"Titus\": 56,\r\n        \"Phlm\": 57,\r\n        \"Heb\": 58,\r\n        \"Jas\": 59,\r\n        \"1Pet\": 60,\r\n        \"2Pet\": 61,\r\n        \"1John\": 62,\r\n        \"2John\": 63,\r\n        \"3John\": 64,\r\n        \"Jude\": 65,\r\n        \"Rev\": 66,\r\n        \"Tob\": 67,\r\n        \"Jdt\": 68,\r\n        \"GkEsth\": 69,\r\n        \"Wis\": 70,\r\n        \"Sir\": 71,\r\n        \"Bar\": 72,\r\n        \"PrAzar\": 73,\r\n        \"Sus\": 74,\r\n        \"Bel\": 75,\r\n        \"SgThree\": 76,\r\n        \"EpJer\": 77,\r\n        \"1Macc\": 78,\r\n        \"2Macc\": 79,\r\n        \"3Macc\": 80,\r\n        \"4Macc\": 81,\r\n        \"1Esd\": 82,\r\n        \"2Esd\": 83,\r\n        \"PrMan\": 84\r\n      },\r\n      chapters: {\r\n        \"Gen\": [31, 25, 24, 26, 32, 22, 24, 22, 29, 32, 32, 20, 18, 24, 21, 16, 27, 33, 38, 18, 34, 24, 20, 67, 34, 35, 46, 22, 35, 43, 55, 32, 20, 31, 29, 43, 36, 30, 23, 23, 57, 38, 34, 34, 28, 34, 31, 22, 33, 26],\r\n        \"Exod\": [22, 25, 22, 31, 23, 30, 25, 32, 35, 29, 10, 51, 22, 31, 27, 36, 16, 27, 25, 26, 36, 31, 33, 18, 40, 37, 21, 43, 46, 38, 18, 35, 23, 35, 35, 38, 29, 31, 43, 38],\r\n        \"Lev\": [17, 16, 17, 35, 19, 30, 38, 36, 24, 20, 47, 8, 59, 57, 33, 34, 16, 30, 37, 27, 24, 33, 44, 23, 55, 46, 34],\r\n        \"Num\": [54, 34, 51, 49, 31, 27, 89, 26, 23, 36, 35, 16, 33, 45, 41, 50, 13, 32, 22, 29, 35, 41, 30, 25, 18, 65, 23, 31, 40, 16, 54, 42, 56, 29, 34, 13],\r\n        \"Deut\": [46, 37, 29, 49, 33, 25, 26, 20, 29, 22, 32, 32, 18, 29, 23, 22, 20, 22, 21, 20, 23, 30, 25, 22, 19, 19, 26, 68, 29, 20, 30, 52, 29, 12],\r\n        \"Josh\": [18, 24, 17, 24, 15, 27, 26, 35, 27, 43, 23, 24, 33, 15, 63, 10, 18, 28, 51, 9, 45, 34, 16, 33],\r\n        \"Judg\": [36, 23, 31, 24, 31, 40, 25, 35, 57, 18, 40, 15, 25, 20, 20, 31, 13, 31, 30, 48, 25],\r\n        \"Ruth\": [22, 23, 18, 22],\r\n        \"1Sam\": [28, 36, 21, 22, 12, 21, 17, 22, 27, 27, 15, 25, 23, 52, 35, 23, 58, 30, 24, 42, 15, 23, 29, 22, 44, 25, 12, 25, 11, 31, 13],\r\n        \"2Sam\": [27, 32, 39, 12, 25, 23, 29, 18, 13, 19, 27, 31, 39, 33, 37, 23, 29, 33, 43, 26, 22, 51, 39, 25],\r\n        \"1Kgs\": [53, 46, 28, 34, 18, 38, 51, 66, 28, 29, 43, 33, 34, 31, 34, 34, 24, 46, 21, 43, 29, 53],\r\n        \"2Kgs\": [18, 25, 27, 44, 27, 33, 20, 29, 37, 36, 21, 21, 25, 29, 38, 20, 41, 37, 37, 21, 26, 20, 37, 20, 30],\r\n        \"1Chr\": [54, 55, 24, 43, 26, 81, 40, 40, 44, 14, 47, 40, 14, 17, 29, 43, 27, 17, 19, 8, 30, 19, 32, 31, 31, 32, 34, 21, 30],\r\n        \"2Chr\": [17, 18, 17, 22, 14, 42, 22, 18, 31, 19, 23, 16, 22, 15, 19, 14, 19, 34, 11, 37, 20, 12, 21, 27, 28, 23, 9, 27, 36, 27, 21, 33, 25, 33, 27, 23],\r\n        \"Ezra\": [11, 70, 13, 24, 17, 22, 28, 36, 15, 44],\r\n        \"Neh\": [11, 20, 32, 23, 19, 19, 73, 18, 38, 39, 36, 47, 31],\r\n        \"Esth\": [22, 23, 15, 17, 14, 14, 10, 17, 32, 3],\r\n        \"Job\": [22, 13, 26, 21, 27, 30, 21, 22, 35, 22, 20, 25, 28, 22, 35, 22, 16, 21, 29, 29, 34, 30, 17, 25, 6, 14, 23, 28, 25, 31, 40, 22, 33, 37, 16, 33, 24, 41, 30, 24, 34, 17],\r\n        \"Ps\": [6, 12, 8, 8, 12, 10, 17, 9, 20, 18, 7, 8, 6, 7, 5, 11, 15, 50, 14, 9, 13, 31, 6, 10, 22, 12, 14, 9, 11, 12, 24, 11, 22, 22, 28, 12, 40, 22, 13, 17, 13, 11, 5, 26, 17, 11, 9, 14, 20, 23, 19, 9, 6, 7, 23, 13, 11, 11, 17, 12, 8, 12, 11, 10, 13, 20, 7, 35, 36, 5, 24, 20, 28, 23, 10, 12, 20, 72, 13, 19, 16, 8, 18, 12, 13, 17, 7, 18, 52, 17, 16, 15, 5, 23, 11, 13, 12, 9, 9, 5, 8, 28, 22, 35, 45, 48, 43, 13, 31, 7, 10, 10, 9, 8, 18, 19, 2, 29, 176, 7, 8, 9, 4, 8, 5, 6, 5, 6, 8, 8, 3, 18, 3, 3, 21, 26, 9, 8, 24, 13, 10, 7, 12, 15, 21, 10, 20, 14, 9, 6],\r\n        \"Prov\": [33, 22, 35, 27, 23, 35, 27, 36, 18, 32, 31, 28, 25, 35, 33, 33, 28, 24, 29, 30, 31, 29, 35, 34, 28, 28, 27, 28, 27, 33, 31],\r\n        \"Eccl\": [18, 26, 22, 16, 20, 12, 29, 17, 18, 20, 10, 14],\r\n        \"Song\": [17, 17, 11, 16, 16, 13, 13, 14],\r\n        \"Isa\": [31, 22, 26, 6, 30, 13, 25, 22, 21, 34, 16, 6, 22, 32, 9, 14, 14, 7, 25, 6, 17, 25, 18, 23, 12, 21, 13, 29, 24, 33, 9, 20, 24, 17, 10, 22, 38, 22, 8, 31, 29, 25, 28, 28, 25, 13, 15, 22, 26, 11, 23, 15, 12, 17, 13, 12, 21, 14, 21, 22, 11, 12, 19, 12, 25, 24],\r\n        \"Jer\": [19, 37, 25, 31, 31, 30, 34, 22, 26, 25, 23, 17, 27, 22, 21, 21, 27, 23, 15, 18, 14, 30, 40, 10, 38, 24, 22, 17, 32, 24, 40, 44, 26, 22, 19, 32, 21, 28, 18, 16, 18, 22, 13, 30, 5, 28, 7, 47, 39, 46, 64, 34],\r\n        \"Lam\": [22, 22, 66, 22, 22],\r\n        \"Ezek\": [28, 10, 27, 17, 17, 14, 27, 18, 11, 22, 25, 28, 23, 23, 8, 63, 24, 32, 14, 49, 32, 31, 49, 27, 17, 21, 36, 26, 21, 26, 18, 32, 33, 31, 15, 38, 28, 23, 29, 49, 26, 20, 27, 31, 25, 24, 23, 35],\r\n        \"Dan\": [21, 49, 30, 37, 31, 28, 28, 27, 27, 21, 45, 13],\r\n        \"Hos\": [11, 23, 5, 19, 15, 11, 16, 14, 17, 15, 12, 14, 16, 9],\r\n        \"Joel\": [20, 32, 21],\r\n        \"Amos\": [15, 16, 15, 13, 27, 14, 17, 14, 15],\r\n        \"Obad\": [21],\r\n        \"Jonah\": [17, 10, 10, 11],\r\n        \"Mic\": [16, 13, 12, 13, 15, 16, 20],\r\n        \"Nah\": [15, 13, 19],\r\n        \"Hab\": [17, 20, 19],\r\n        \"Zeph\": [18, 15, 20],\r\n        \"Hag\": [15, 23],\r\n        \"Zech\": [21, 13, 10, 14, 11, 15, 14, 23, 17, 12, 17, 14, 9, 21],\r\n        \"Mal\": [14, 17, 18, 6],\r\n        \"Matt\": [25, 23, 17, 25, 48, 34, 29, 34, 38, 42, 30, 50, 58, 36, 39, 28, 27, 35, 30, 34, 46, 46, 39, 51, 46, 75, 66, 20],\r\n        \"Mark\": [45, 28, 35, 41, 43, 56, 37, 38, 50, 52, 33, 44, 37, 72, 47, 20],\r\n        \"Luke\": [80, 52, 38, 44, 39, 49, 50, 56, 62, 42, 54, 59, 35, 35, 32, 31, 37, 43, 48, 47, 38, 71, 56, 53],\r\n        \"John\": [51, 25, 36, 54, 47, 71, 53, 59, 41, 42, 57, 50, 38, 31, 27, 33, 26, 40, 42, 31, 25],\r\n        \"Acts\": [26, 47, 26, 37, 42, 15, 60, 40, 43, 48, 30, 25, 52, 28, 41, 40, 34, 28, 41, 38, 40, 30, 35, 27, 27, 32, 44, 31],\r\n        \"Rom\": [32, 29, 31, 25, 21, 23, 25, 39, 33, 21, 36, 21, 14, 23, 33, 27],\r\n        \"1Cor\": [31, 16, 23, 21, 13, 20, 40, 13, 27, 33, 34, 31, 13, 40, 58, 24],\r\n        \"2Cor\": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 14],\r\n        \"Gal\": [24, 21, 29, 31, 26, 18],\r\n        \"Eph\": [23, 22, 21, 32, 33, 24],\r\n        \"Phil\": [30, 30, 21, 23],\r\n        \"Col\": [29, 23, 25, 18],\r\n        \"1Thess\": [10, 20, 13, 18, 28],\r\n        \"2Thess\": [12, 17, 18],\r\n        \"1Tim\": [20, 15, 16, 16, 25, 21],\r\n        \"2Tim\": [18, 26, 17, 22],\r\n        \"Titus\": [16, 15, 15],\r\n        \"Phlm\": [25],\r\n        \"Heb\": [14, 18, 19, 16, 14, 20, 28, 13, 28, 39, 40, 29, 25],\r\n        \"Jas\": [27, 26, 18, 17, 20],\r\n        \"1Pet\": [25, 25, 22, 19, 14],\r\n        \"2Pet\": [21, 22, 18],\r\n        \"1John\": [10, 29, 24, 21, 21],\r\n        \"2John\": [13],\r\n        \"3John\": [15],\r\n        \"Jude\": [25],\r\n        \"Rev\": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 17, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21],\r\n        \"Tob\": [22, 14, 17, 21, 22, 18, 16, 21, 6, 13, 18, 22, 17, 15],\r\n        \"Jdt\": [16, 28, 10, 15, 24, 21, 32, 36, 14, 23, 23, 20, 20, 19, 14, 25],\r\n        \"GkEsth\": [22, 23, 15, 17, 14, 14, 10, 17, 32, 13, 12, 6, 18, 19, 16, 24],\r\n        \"Wis\": [16, 24, 19, 20, 23, 25, 30, 21, 18, 21, 26, 27, 19, 31, 19, 29, 21, 25, 22],\r\n        \"Sir\": [30, 18, 31, 31, 15, 37, 36, 19, 18, 31, 34, 18, 26, 27, 20, 30, 32, 33, 30, 31, 28, 27, 27, 34, 26, 29, 30, 26, 28, 25, 31, 24, 33, 31, 26, 31, 31, 34, 35, 30, 22, 25, 33, 23, 26, 20, 25, 25, 16, 29, 30],\r\n        \"Bar\": [22, 35, 37, 37, 9],\r\n        \"PrAzar\": [68],\r\n        \"Sus\": [64],\r\n        \"Bel\": [42],\r\n        \"SgThree\": [39],\r\n        \"EpJer\": [73],\r\n        \"1Macc\": [64, 70, 60, 61, 68, 63, 50, 32, 73, 89, 74, 53, 53, 49, 41, 24],\r\n        \"2Macc\": [36, 32, 40, 50, 27, 31, 42, 36, 29, 38, 38, 45, 26, 46, 39],\r\n        \"3Macc\": [29, 33, 30, 21, 51, 41, 23],\r\n        \"4Macc\": [35, 24, 21, 26, 38, 35, 23, 29, 32, 21, 27, 19, 27, 20, 32, 25, 24, 24],\r\n        \"1Esd\": [58, 30, 24, 63, 73, 34, 15, 96, 55],\r\n        \"2Esd\": [40, 48, 36, 52, 56, 59, 70, 63, 47, 59, 46, 51, 58, 48, 63, 78],\r\n        \"PrMan\": [15],\r\n        \"Ps151\": [7]\r\n      }\r\n    },\r\n    vulgate: {\r\n      chapters: {\r\n        \"Gen\": [31, 25, 24, 26, 32, 22, 24, 22, 29, 32, 32, 20, 18, 24, 21, 16, 27, 33, 38, 18, 34, 24, 20, 67, 34, 35, 46, 22, 35, 43, 55, 32, 20, 31, 29, 43, 36, 30, 23, 23, 57, 38, 34, 34, 28, 34, 31, 22, 32, 25],\r\n        \"Exod\": [22, 25, 22, 31, 23, 30, 25, 32, 35, 29, 10, 51, 22, 31, 27, 36, 16, 27, 25, 26, 36, 31, 33, 18, 40, 37, 21, 43, 46, 38, 18, 35, 23, 35, 35, 38, 29, 31, 43, 36],\r\n        \"Lev\": [17, 16, 17, 35, 19, 30, 38, 36, 24, 20, 47, 8, 59, 57, 33, 34, 16, 30, 37, 27, 24, 33, 44, 23, 55, 45, 34],\r\n        \"Num\": [54, 34, 51, 49, 31, 27, 89, 26, 23, 36, 34, 15, 34, 45, 41, 50, 13, 32, 22, 30, 35, 41, 30, 25, 18, 65, 23, 31, 39, 17, 54, 42, 56, 29, 34, 13],\r\n        \"Josh\": [18, 24, 17, 25, 16, 27, 26, 35, 27, 44, 23, 24, 33, 15, 63, 10, 18, 28, 51, 9, 43, 34, 16, 33],\r\n        \"Judg\": [36, 23, 31, 24, 32, 40, 25, 35, 57, 18, 40, 15, 25, 20, 20, 31, 13, 31, 30, 48, 24],\r\n        \"1Sam\": [28, 36, 21, 22, 12, 21, 17, 22, 27, 27, 15, 25, 23, 52, 35, 23, 58, 30, 24, 43, 15, 23, 28, 23, 44, 25, 12, 25, 11, 31, 13],\r\n        \"1Kgs\": [53, 46, 28, 34, 18, 38, 51, 66, 28, 29, 43, 33, 34, 31, 34, 34, 24, 46, 21, 43, 29, 54],\r\n        \"1Chr\": [54, 55, 24, 43, 26, 81, 40, 40, 44, 14, 46, 40, 14, 17, 29, 43, 27, 17, 19, 7, 30, 19, 32, 31, 31, 32, 34, 21, 30],\r\n        \"Neh\": [11, 20, 31, 23, 19, 19, 73, 18, 38, 39, 36, 46, 31],\r\n        \"Job\": [22, 13, 26, 21, 27, 30, 21, 22, 35, 22, 20, 25, 28, 22, 35, 23, 16, 21, 29, 29, 34, 30, 17, 25, 6, 14, 23, 28, 25, 31, 40, 22, 33, 37, 16, 33, 24, 41, 35, 28, 25, 16],\r\n        \"Ps\": [6, 13, 9, 10, 13, 11, 18, 10, 39, 8, 9, 6, 7, 5, 10, 15, 51, 15, 10, 14, 32, 6, 10, 22, 12, 14, 9, 11, 13, 25, 11, 22, 23, 28, 13, 40, 23, 14, 18, 14, 12, 5, 26, 18, 12, 10, 15, 21, 23, 21, 11, 7, 9, 24, 13, 12, 12, 18, 14, 9, 13, 12, 11, 14, 20, 8, 36, 37, 6, 24, 20, 28, 23, 11, 13, 21, 72, 13, 20, 17, 8, 19, 13, 14, 17, 7, 19, 53, 17, 16, 16, 5, 23, 11, 13, 12, 9, 9, 5, 8, 29, 22, 35, 45, 48, 43, 14, 31, 7, 10, 10, 9, 26, 9, 10, 2, 29, 176, 7, 8, 9, 4, 8, 5, 6, 5, 6, 8, 8, 3, 18, 3, 3, 21, 26, 9, 8, 24, 14, 10, 8, 12, 15, 21, 10, 11, 9, 14, 9, 6],\r\n        \"Eccl\": [18, 26, 22, 17, 19, 11, 30, 17, 18, 20, 10, 14],\r\n        \"Song\": [16, 17, 11, 16, 17, 12, 13, 14],\r\n        \"Jer\": [19, 37, 25, 31, 31, 30, 34, 22, 26, 25, 23, 17, 27, 22, 21, 21, 27, 23, 15, 18, 14, 30, 40, 10, 38, 24, 22, 17, 32, 24, 40, 44, 26, 22, 19, 32, 20, 28, 18, 16, 18, 22, 13, 30, 5, 28, 7, 47, 39, 46, 64, 34],\r\n        \"Ezek\": [28, 9, 27, 17, 17, 14, 27, 18, 11, 22, 25, 28, 23, 23, 8, 63, 24, 32, 14, 49, 32, 31, 49, 27, 17, 21, 36, 26, 21, 26, 18, 32, 33, 31, 15, 38, 28, 23, 29, 49, 26, 20, 27, 31, 25, 24, 23, 35],\r\n        \"Dan\": [21, 49, 100, 34, 31, 28, 28, 27, 27, 21, 45, 13, 65, 42],\r\n        \"Hos\": [11, 24, 5, 19, 15, 11, 16, 14, 17, 15, 12, 14, 15, 10],\r\n        \"Amos\": [15, 16, 15, 13, 27, 15, 17, 14, 14],\r\n        \"Jonah\": [16, 11, 10, 11],\r\n        \"Mic\": [16, 13, 12, 13, 14, 16, 20],\r\n        \"Hag\": [14, 24],\r\n        \"Matt\": [25, 23, 17, 25, 48, 34, 29, 34, 38, 42, 30, 50, 58, 36, 39, 28, 26, 35, 30, 34, 46, 46, 39, 51, 46, 75, 66, 20],\r\n        \"Mark\": [45, 28, 35, 40, 43, 56, 37, 39, 49, 52, 33, 44, 37, 72, 47, 20],\r\n        \"John\": [51, 25, 36, 54, 47, 72, 53, 59, 41, 42, 57, 50, 38, 31, 27, 33, 26, 40, 42, 31, 25],\r\n        \"Acts\": [26, 47, 26, 37, 42, 15, 59, 40, 43, 48, 30, 25, 52, 27, 41, 40, 34, 28, 40, 38, 40, 30, 35, 27, 27, 32, 44, 31],\r\n        \"2Cor\": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 13],\r\n        \"Rev\": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21],\r\n        \"Tob\": [25, 23, 25, 23, 28, 22, 20, 24, 12, 13, 21, 22, 23, 17],\r\n        \"Jdt\": [12, 18, 15, 17, 29, 21, 25, 34, 19, 20, 21, 20, 31, 18, 15, 31],\r\n        \"Wis\": [16, 25, 19, 20, 24, 27, 30, 21, 19, 21, 27, 27, 19, 31, 19, 29, 20, 25, 20],\r\n        \"Sir\": [40, 23, 34, 36, 18, 37, 40, 22, 25, 34, 36, 19, 32, 27, 22, 31, 31, 33, 28, 33, 31, 33, 38, 47, 36, 28, 33, 30, 35, 27, 42, 28, 33, 31, 26, 28, 34, 39, 41, 32, 28, 26, 37, 27, 31, 23, 31, 28, 19, 31, 38, 13],\r\n        \"Bar\": [22, 35, 38, 37, 9, 72],\r\n        \"1Macc\": [67, 70, 60, 61, 68, 63, 50, 32, 73, 89, 74, 54, 54, 49, 41, 24],\r\n        \"2Macc\": [36, 33, 40, 50, 27, 31, 42, 36, 29, 38, 38, 46, 26, 46, 40]\r\n      }\r\n    },\r\n    ceb: {\r\n      chapters: {\r\n        \"2Cor\": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 13],\r\n        \"Rev\": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21],\r\n        \"Tob\": [22, 14, 17, 21, 22, 18, 16, 21, 6, 13, 18, 22, 18, 15],\r\n        \"PrAzar\": [67],\r\n        \"EpJer\": [72],\r\n        \"1Esd\": [55, 26, 24, 63, 71, 33, 15, 92, 55]\r\n      }\r\n    },\r\n    kjv: {\r\n      chapters: {\r\n        \"3John\": [14]\r\n      }\r\n    },\r\n    nab: {\r\n      order: {\r\n        \"Gen\": 1,\r\n        \"Exod\": 2,\r\n        \"Lev\": 3,\r\n        \"Num\": 4,\r\n        \"Deut\": 5,\r\n        \"Josh\": 6,\r\n        \"Judg\": 7,\r\n        \"Ruth\": 8,\r\n        \"1Sam\": 9,\r\n        \"2Sam\": 10,\r\n        \"1Kgs\": 11,\r\n        \"2Kgs\": 12,\r\n        \"1Chr\": 13,\r\n        \"2Chr\": 14,\r\n        \"PrMan\": 15,\r\n        \"Ezra\": 16,\r\n        \"Neh\": 17,\r\n        \"1Esd\": 18,\r\n        \"2Esd\": 19,\r\n        \"Tob\": 20,\r\n        \"Jdt\": 21,\r\n        \"Esth\": 22,\r\n        \"GkEsth\": 23,\r\n        \"1Macc\": 24,\r\n        \"2Macc\": 25,\r\n        \"3Macc\": 26,\r\n        \"4Macc\": 27,\r\n        \"Job\": 28,\r\n        \"Ps\": 29,\r\n        \"Prov\": 30,\r\n        \"Eccl\": 31,\r\n        \"Song\": 32,\r\n        \"Wis\": 33,\r\n        \"Sir\": 34,\r\n        \"Isa\": 35,\r\n        \"Jer\": 36,\r\n        \"Lam\": 37,\r\n        \"Bar\": 38,\r\n        \"EpJer\": 39,\r\n        \"Ezek\": 40,\r\n        \"Dan\": 41,\r\n        \"PrAzar\": 42,\r\n        \"Sus\": 43,\r\n        \"Bel\": 44,\r\n        \"SgThree\": 45,\r\n        \"Hos\": 46,\r\n        \"Joel\": 47,\r\n        \"Amos\": 48,\r\n        \"Obad\": 49,\r\n        \"Jonah\": 50,\r\n        \"Mic\": 51,\r\n        \"Nah\": 52,\r\n        \"Hab\": 53,\r\n        \"Zeph\": 54,\r\n        \"Hag\": 55,\r\n        \"Zech\": 56,\r\n        \"Mal\": 57,\r\n        \"Matt\": 58,\r\n        \"Mark\": 59,\r\n        \"Luke\": 60,\r\n        \"John\": 61,\r\n        \"Acts\": 62,\r\n        \"Rom\": 63,\r\n        \"1Cor\": 64,\r\n        \"2Cor\": 65,\r\n        \"Gal\": 66,\r\n        \"Eph\": 67,\r\n        \"Phil\": 68,\r\n        \"Col\": 69,\r\n        \"1Thess\": 70,\r\n        \"2Thess\": 71,\r\n        \"1Tim\": 72,\r\n        \"2Tim\": 73,\r\n        \"Titus\": 74,\r\n        \"Phlm\": 75,\r\n        \"Heb\": 76,\r\n        \"Jas\": 77,\r\n        \"1Pet\": 78,\r\n        \"2Pet\": 79,\r\n        \"1John\": 80,\r\n        \"2John\": 81,\r\n        \"3John\": 82,\r\n        \"Jude\": 83,\r\n        \"Rev\": 84\r\n      },\r\n      chapters: {\r\n        \"Gen\": [31, 25, 24, 26, 32, 22, 24, 22, 29, 32, 32, 20, 18, 24, 21, 16, 27, 33, 38, 18, 34, 24, 20, 67, 34, 35, 46, 22, 35, 43, 54, 33, 20, 31, 29, 43, 36, 30, 23, 23, 57, 38, 34, 34, 28, 34, 31, 22, 33, 26],\r\n        \"Exod\": [22, 25, 22, 31, 23, 30, 29, 28, 35, 29, 10, 51, 22, 31, 27, 36, 16, 27, 25, 26, 37, 30, 33, 18, 40, 37, 21, 43, 46, 38, 18, 35, 23, 35, 35, 38, 29, 31, 43, 38],\r\n        \"Lev\": [17, 16, 17, 35, 26, 23, 38, 36, 24, 20, 47, 8, 59, 57, 33, 34, 16, 30, 37, 27, 24, 33, 44, 23, 55, 46, 34],\r\n        \"Num\": [54, 34, 51, 49, 31, 27, 89, 26, 23, 36, 35, 16, 33, 45, 41, 35, 28, 32, 22, 29, 35, 41, 30, 25, 19, 65, 23, 31, 39, 17, 54, 42, 56, 29, 34, 13],\r\n        \"Deut\": [46, 37, 29, 49, 33, 25, 26, 20, 29, 22, 32, 31, 19, 29, 23, 22, 20, 22, 21, 20, 23, 29, 26, 22, 19, 19, 26, 69, 28, 20, 30, 52, 29, 12],\r\n        \"1Sam\": [28, 36, 21, 22, 12, 21, 17, 22, 27, 27, 15, 25, 23, 52, 35, 23, 58, 30, 24, 42, 16, 23, 28, 23, 44, 25, 12, 25, 11, 31, 13],\r\n        \"2Sam\": [27, 32, 39, 12, 25, 23, 29, 18, 13, 19, 27, 31, 39, 33, 37, 23, 29, 32, 44, 26, 22, 51, 39, 25],\r\n        \"1Kgs\": [53, 46, 28, 20, 32, 38, 51, 66, 28, 29, 43, 33, 34, 31, 34, 34, 24, 46, 21, 43, 29, 54],\r\n        \"2Kgs\": [18, 25, 27, 44, 27, 33, 20, 29, 37, 36, 20, 22, 25, 29, 38, 20, 41, 37, 37, 21, 26, 20, 37, 20, 30],\r\n        \"1Chr\": [54, 55, 24, 43, 41, 66, 40, 40, 44, 14, 47, 41, 14, 17, 29, 43, 27, 17, 19, 8, 30, 19, 32, 31, 31, 32, 34, 21, 30],\r\n        \"2Chr\": [18, 17, 17, 22, 14, 42, 22, 18, 31, 19, 23, 16, 23, 14, 19, 14, 19, 34, 11, 37, 20, 12, 21, 27, 28, 23, 9, 27, 36, 27, 21, 33, 25, 33, 27, 23],\r\n        \"Neh\": [11, 20, 38, 17, 19, 19, 72, 18, 37, 40, 36, 47, 31],\r\n        \"Job\": [22, 13, 26, 21, 27, 30, 21, 22, 35, 22, 20, 25, 28, 22, 35, 22, 16, 21, 29, 29, 34, 30, 17, 25, 6, 14, 23, 28, 25, 31, 40, 22, 33, 37, 16, 33, 24, 41, 30, 32, 26, 17],\r\n        \"Ps\": [6, 11, 9, 9, 13, 11, 18, 10, 21, 18, 7, 9, 6, 7, 5, 11, 15, 51, 15, 10, 14, 32, 6, 10, 22, 12, 14, 9, 11, 13, 25, 11, 22, 23, 28, 13, 40, 23, 14, 18, 14, 12, 5, 27, 18, 12, 10, 15, 21, 23, 21, 11, 7, 9, 24, 14, 12, 12, 18, 14, 9, 13, 12, 11, 14, 20, 8, 36, 37, 6, 24, 20, 28, 23, 11, 13, 21, 72, 13, 20, 17, 8, 19, 13, 14, 17, 7, 19, 53, 17, 16, 16, 5, 23, 11, 13, 12, 9, 9, 5, 8, 29, 22, 35, 45, 48, 43, 14, 31, 7, 10, 10, 9, 8, 18, 19, 2, 29, 176, 7, 8, 9, 4, 8, 5, 6, 5, 6, 8, 8, 3, 18, 3, 3, 21, 26, 9, 8, 24, 14, 10, 8, 12, 15, 21, 10, 20, 14, 9, 6],\r\n        \"Eccl\": [18, 26, 22, 17, 19, 12, 29, 17, 18, 20, 10, 14],\r\n        \"Song\": [17, 17, 11, 16, 16, 12, 14, 14],\r\n        \"Isa\": [31, 22, 26, 6, 30, 13, 25, 23, 20, 34, 16, 6, 22, 32, 9, 14, 14, 7, 25, 6, 17, 25, 18, 23, 12, 21, 13, 29, 24, 33, 9, 20, 24, 17, 10, 22, 38, 22, 8, 31, 29, 25, 28, 28, 25, 13, 15, 22, 26, 11, 23, 15, 12, 17, 13, 12, 21, 14, 21, 22, 11, 12, 19, 11, 25, 24],\r\n        \"Jer\": [19, 37, 25, 31, 31, 30, 34, 23, 25, 25, 23, 17, 27, 22, 21, 21, 27, 23, 15, 18, 14, 30, 40, 10, 38, 24, 22, 17, 32, 24, 40, 44, 26, 22, 19, 32, 21, 28, 18, 16, 18, 22, 13, 30, 5, 28, 7, 47, 39, 46, 64, 34],\r\n        \"Ezek\": [28, 10, 27, 17, 17, 14, 27, 18, 11, 22, 25, 28, 23, 23, 8, 63, 24, 32, 14, 44, 37, 31, 49, 27, 17, 21, 36, 26, 21, 26, 18, 32, 33, 31, 15, 38, 28, 23, 29, 49, 26, 20, 27, 31, 25, 24, 23, 35],\r\n        \"Dan\": [21, 49, 100, 34, 30, 29, 28, 27, 27, 21, 45, 13, 64, 42],\r\n        \"Hos\": [9, 25, 5, 19, 15, 11, 16, 14, 17, 15, 11, 15, 15, 10],\r\n        \"Joel\": [20, 27, 5, 21],\r\n        \"Jonah\": [16, 11, 10, 11],\r\n        \"Mic\": [16, 13, 12, 14, 14, 16, 20],\r\n        \"Nah\": [14, 14, 19],\r\n        \"Zech\": [17, 17, 10, 14, 11, 15, 14, 23, 17, 12, 17, 14, 9, 21],\r\n        \"Mal\": [14, 17, 24],\r\n        \"Acts\": [26, 47, 26, 37, 42, 15, 60, 40, 43, 49, 30, 25, 52, 28, 41, 40, 34, 28, 40, 38, 40, 30, 35, 27, 27, 32, 44, 31],\r\n        \"2Cor\": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 13],\r\n        \"Rev\": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21],\r\n        \"Tob\": [22, 14, 17, 21, 22, 18, 17, 21, 6, 13, 18, 22, 18, 15],\r\n        \"Sir\": [30, 18, 31, 31, 15, 37, 36, 19, 18, 31, 34, 18, 26, 27, 20, 30, 32, 33, 30, 31, 28, 27, 27, 33, 26, 29, 30, 26, 28, 25, 31, 24, 33, 31, 26, 31, 31, 34, 35, 30, 22, 25, 33, 23, 26, 20, 25, 25, 16, 29, 30],\r\n        \"Bar\": [22, 35, 38, 37, 9, 72],\r\n        \"2Macc\": [36, 32, 40, 50, 27, 31, 42, 36, 29, 38, 38, 46, 26, 46, 39]\r\n      }\r\n    },\r\n    nlt: {\r\n      chapters: {\r\n        \"Rev\": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21]\r\n      }\r\n    },\r\n    nrsv: {\r\n      chapters: {\r\n        \"2Cor\": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 13],\r\n        \"Rev\": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21]\r\n      }\r\n    }\r\n  };\r\n\r\n  bcv_parser.prototype.languages = [\"en\"];\r\n\r\n  bcv_parser.prototype.regexps.space = \"[\\\\s\\\\xa0]\";\r\n\r\n  bcv_parser.prototype.regexps.escaped_passage = RegExp(\"(?:^|[^\\\\x1f\\\\x1e\\\\dA-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:ch(?:apters?|a?pts?\\\\.?|a?p?s?\\\\.?)?\\\\s*\\\\d+\\\\s*(?:[\\\\u2013\\\\u2014\\\\-]|through|thru|to)\\\\s*\\\\d+\\\\s*(?:from|of|in)(?:\\\\s+the\\\\s+book\\\\s+of)?\\\\s*)|(?:ch(?:apters?|a?pts?\\\\.?|a?p?s?\\\\.?)?\\\\s*\\\\d+\\\\s*(?:from|of|in)(?:\\\\s+the\\\\s+book\\\\s+of)?\\\\s*)|(?:\\\\d+(?:th|nd|st)\\\\s*ch(?:apter|a?pt\\\\.?|a?p?\\\\.?)?\\\\s*(?:from|of|in)(?:\\\\s+the\\\\s+book\\\\s+of)?\\\\s*))?\\\\x1f(\\\\d+)(?:/\\\\d+)?\\\\x1f(?:/\\\\d+\\\\x1f|[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014]|title(?![a-z])|see\" + bcv_parser.prototype.regexps.space + \"+also|ff(?![a-z0-9])|f(?![a-z0-9])|chapters|chapter|through|compare|chapts|verses|chpts|chapt|chaps|verse|chap|thru|also|chp|chs|cha|and|see|ver|vss|ch|to|cf|vs|vv|v|[a-e](?!\\\\w)|$)+)\", \"gi\");\r\n\r\n  bcv_parser.prototype.regexps.match_end_split = /\\d\\W*title|\\d\\W*(?:ff(?![a-z0-9])|f(?![a-z0-9]))(?:[\\s\\xa0*]*\\.)?|\\d[\\s\\xa0*]*[a-e](?!\\w)|\\x1e(?:[\\s\\xa0*]*[)\\]\\uff09])?|[\\d\\x1f]/gi;\r\n\r\n  bcv_parser.prototype.regexps.control = /[\\x1e\\x1f]/g;\r\n\r\n  bcv_parser.prototype.regexps.pre_book = \"[^A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ]\";\r\n\r\n  bcv_parser.prototype.regexps.first = \"(?:1st|1|I|First)\\\\.?\" + bcv_parser.prototype.regexps.space + \"*\";\r\n\r\n  bcv_parser.prototype.regexps.second = \"(?:2nd|2|II|Second)\\\\.?\" + bcv_parser.prototype.regexps.space + \"*\";\r\n\r\n  bcv_parser.prototype.regexps.third = \"(?:3rd|3|III|Third)\\\\.?\" + bcv_parser.prototype.regexps.space + \"*\";\r\n\r\n  bcv_parser.prototype.regexps.range_and = \"(?:[&\\u2013\\u2014-]|(?:and|compare|cf|see\" + bcv_parser.prototype.regexps.space + \"+also|also|see)|(?:through|thru|to))\";\r\n\r\n  bcv_parser.prototype.regexps.range_only = \"(?:[\\u2013\\u2014-]|(?:through|thru|to))\";\r\n\r\n  bcv_parser.prototype.regexps.get_books = function(include_apocrypha, case_sensitive) {\r\n    var book, books, k, len, out;\r\n    books = [\r\n      {\r\n        osis: [\"Ps\"],\r\n        apocrypha: true,\r\n        extra: \"2\",\r\n        regexp: /(\\b)(Ps151)(?=\\.1)/g\r\n      }, {\r\n        osis: [\"Gen\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Genes[ei]s)|(?:G(?:e(?:n(?:n(?:e(?:is(?:[eiu]s)?|s[eiu]s|es[eiu]s)|(?:i[ei]s[eiu]|is[eiu]|si)s)|(?:eis[eiu]|esu|si)s|es[ei]|eis|is[eiu]s|(?:i[ei]|ee)s[eiu]s)?)?|n)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Exod\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ex(?:o(?:d(?:[iu]s|[es])?)?|d)?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Bel\"],\r\n        apocrypha: true,\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Bel(?:[\\\\s\\\\xa0]*(?:and[\\\\s\\\\xa0]*(?:the[\\\\s\\\\xa0]*(?:S(?:erpent|nake)|Dragon)|S(?:erpent|nake)|Dragon)|&[\\\\s\\\\xa0]*(?:the[\\\\s\\\\xa0]*(?:S(?:erpent|nake)|Dragon)|S(?:erpent|nake)|Dragon)))?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Lev\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:L(?:e(?:v(?:it[ei]?cus|i|et[ei]?cus)?)?|iv[ei]t[ei]?cus|v)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Num\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:N(?:u(?:m(?:b(?:ers?)?)?)?|m)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Sir\"],\r\n        apocrypha: true,\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Sirach)|(?:Wisdom[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Jesus(?:[\\\\s\\\\xa0]*(?:Son[\\\\s\\\\xa0]*of|ben)|,[\\\\s\\\\xa0]*Son[\\\\s\\\\xa0]*of)[\\\\s\\\\xa0]*Sirach|Ecc(?:l[eu]siasticu)?s|Ben[\\\\s\\\\xa0]*Sira|Sir|Ecclus|The[\\\\s\\\\xa0]*Wisdom[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Jesus(?:[\\\\s\\\\xa0]*(?:Son[\\\\s\\\\xa0]*of|ben)|,[\\\\s\\\\xa0]*Son[\\\\s\\\\xa0]*of)[\\\\s\\\\xa0]*Sirach))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Wis\"],\r\n        apocrypha: true,\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Wis(?:(?:d(?:om)?)?[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Solomon|d(?:om)?|om[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Solomon)?|The[\\\\s\\\\xa0]*Wis(?:d(?:om)?|om)?[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Solomon))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Lam\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:L(?:a(?:m(?:[ei]ntations?)?)?|m)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"EpJer\"],\r\n        apocrypha: true,\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ep(?:istle[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Jeremy|[\\\\s\\\\xa0]*?Jer|istle[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Jeremiah|[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Jeremiah)|Let[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Jeremiah|(?:Let(?:ter|\\\\.)|Ep\\\\.)[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Jeremiah|The[\\\\s\\\\xa0]*(?:Ep(?:istle|\\\\.)?|Let(?:ter|\\\\.)?)[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Jeremiah))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Rev\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:R(?:e(?:v(?:elations?|el|lations?|[ao]lations?)?)?|v)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"PrMan\"],\r\n        apocrypha: true,\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Pr(?:ayer(?:s[\\\\s\\\\xa0]*(?:of[\\\\s\\\\xa0]*)?|[\\\\s\\\\xa0]*(?:of[\\\\s\\\\xa0]*)?)Manasseh|[\\\\s\\\\xa0]*Manasseh|[\\\\s\\\\xa0]*?Man|[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Manasseh)|The[\\\\s\\\\xa0]*Pr(?:ayer(?:s[\\\\s\\\\xa0]*(?:of[\\\\s\\\\xa0]*)?|[\\\\s\\\\xa0]*(?:of[\\\\s\\\\xa0]*)?)|[\\\\s\\\\xa0]*(?:of[\\\\s\\\\xa0]*)?)Manasseh))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Deut\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Duet[eo]rono?my)|(?:D(?:e(?:u(?:t[eo]rono?my|trono?my|t)?|et(?:[eo]rono?|rono?)my)|uut(?:[eo]rono?|rono?)my|uetrono?my|(?:ue)?t)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Josh\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:J(?:o(?:s(?:h?ua|h)?|ush?ua)|sh)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Judg\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:J(?:udg(?:es)?|d?gs|d?g)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Ruth\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:R(?:u(?:th?)?|th?)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"1Esd\"],\r\n        apocrypha: true,\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:1(?:st)?|I)[\\s\\xa0]*Esd(?:r(?:as)?)?|1Esd|(?:1(?:st)?|I)\\.[\\s\\xa0]*Esd(?:r(?:as)?)?|First[\\s\\xa0]*Esd(?:r(?:as)?)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"2Esd\"],\r\n        apocrypha: true,\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:2(?:nd)?|II)[\\s\\xa0]*Esd(?:r(?:as)?)?|2Esd|(?:2(?:nd)?|II)\\.[\\s\\xa0]*Esd(?:r(?:as)?)?|Second[\\s\\xa0]*Esd(?:r(?:as)?)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"Isa\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Isaisha?)|(?:I(?:s(?:a(?:a(?:[ai](?:[ai]ha?|ha?)|ha?)|i[ai](?:[ai]ha?|ha?)|i?ha?|i)?|i[ai](?:[ai](?:[ai]ha?|ha?)|ha?)|iha|sah)?|a)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"2Sam\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:2(?:nd)?|II)\\.[\\s\\xa0]*S(?:amu[ae]l[ls]|ma)|(?:2(?:nd)?|II)[\\s\\xa0]*S(?:amu[ae]l[ls]|ma)|Second[\\s\\xa0]*S(?:amu[ae]l[ls]|ma))|(?:2(?:[\\s\\xa0]*Samu[ae]l|(?:[\\s\\xa0]*S|Sa)m|[\\s\\xa0]*S(?:am?)?|[\\s\\xa0]*Kingdoms)|(?:2nd|II)[\\s\\xa0]*(?:S(?:amu[ae]l|m|am?)|Kingdoms)|(?:2(?:nd)?|II)\\.[\\s\\xa0]*(?:S(?:amu[ae]l|m|am?)|Kingdoms)|Second[\\s\\xa0]*(?:S(?:amu[ae]l|m|am?)|Kingdoms)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"1Sam\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:1st(?:\\.[\\s\\xa0]*S(?:amu[ae]l[ls]|ma)|[\\s\\xa0]*S(?:amu[ae]l[ls]|ma)))|(?:1(?:st(?:\\.[\\s\\xa0]*(?:S(?:amu[ae]l|m|am?)|Kingdoms)|[\\s\\xa0]*(?:S(?:amu[ae]l|m|am?)|Kingdoms))|\\.[\\s\\xa0]*S(?:amu[ae]l[ls]|ma)|[\\s\\xa0]*S(?:amu[ae]l[ls]|ma))|(?:First|I\\.)[\\s\\xa0]*S(?:amu[ae]l[ls]|ma)|I[\\s\\xa0]*S(?:amu[ae]l[ls]|ma))|(?:1(?:[\\s\\xa0]*Samu[ae]l|(?:[\\s\\xa0]*S|Sa)m|[\\s\\xa0]*S(?:am?)?|[\\s\\xa0]*Kingdoms)|I[\\s\\xa0]*(?:S(?:amu[ae]l|m|am?)|Kingdoms)|[1I]\\.[\\s\\xa0]*(?:S(?:amu[ae]l|m|am?)|Kingdoms)|First[\\s\\xa0]*(?:S(?:amu[ae]l|m|am?)|Kingdoms))|(?:Samu[ae]l[ls]?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"2Kgs\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:(?:Second|2\\.)[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?|2[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?|2nd(?:\\.[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?|[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?)|II(?:\\.[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?|[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?))s|(?:Second|2\\.)[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?|2[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?|2nd(?:\\.[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?|[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?)|II(?:\\.[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?|[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?)|2Kgs|(?:4(?:th)?|IV)[\\s\\xa0]*Kingdoms|(?:4(?:th)?|IV)\\.[\\s\\xa0]*Kingdoms|Fourth[\\s\\xa0]*Kingdoms))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"1Kgs\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:(?:1(?:st)?\\.|First)[\\s\\xa0]*K(?:i(?:ng?|g)|ng?|g)?|1(?:st)?[\\s\\xa0]*K(?:i(?:ng?|g)|ng?|g)?|I(?:\\.[\\s\\xa0]*K(?:i(?:ng?|g)|ng?|g)?|[\\s\\xa0]*K(?:i(?:ng?|g)|ng?|g)?))s|(?:1(?:st)?\\.|First)[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?|1(?:st)?[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?|I(?:\\.[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?|[\\s\\xa0]*K(?:i(?:ng?|g)?|ng?|g)?)|1Kgs|(?:3(?:rd)?|III)[\\s\\xa0]*Kingdoms|(?:3(?:rd)?|III)\\.[\\s\\xa0]*Kingdoms|Third[\\s\\xa0]*Kingdoms)|(?:K(?:in(?:gs)?|n?gs)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"2Chr\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:2[\\s\\xa0]*C(?:h(?:oron[io]|ron[io])|ron[io])|(?:2nd|II)[\\s\\xa0]*Chrono|(?:2(?:nd)?|II)\\.[\\s\\xa0]*Chrono|Second[\\s\\xa0]*Chrono)cles)|(?:(?:2nd|II)[\\s\\xa0]*(?:C(?:h(?:r(?:on(?:icals|ocle)|n|onicles)|oron[io]cles)|(?:oron[io]|ron[io])cles|h(?:r(?:onicle|on?)?|oron[io]cle)|ron(?:[io]cle)?|oron[io]cle)|Paralipomenon)|2(?:[\\s\\xa0]*C(?:h(?:oron[io]|rono)|ron[io])cle|[\\s\\xa0]*Chronicle|[\\s\\xa0]*Chrn|Chr|[\\s\\xa0]*Chronicals|[\\s\\xa0]*Coron[io]cles|[\\s\\xa0]*C(?:h(?:r(?:on?)?)?|ron|oron[io]cle)|[\\s\\xa0]*Paralipomenon)|(?:2(?:nd)?|II)\\.[\\s\\xa0]*(?:C(?:h(?:r(?:on(?:icals|ocle)|n|onicles)|oron[io]cles)|(?:oron[io]|ron[io])cles|h(?:r(?:onicle|on?)?|oron[io]cle)|ron(?:[io]cle)?|oron[io]cle)|Paralipomenon)|Second[\\s\\xa0]*(?:C(?:h(?:r(?:on(?:icals|ocle)|n|onicles)|oron[io]cles)|(?:oron[io]|ron[io])cles|h(?:r(?:onicle|on?)?|oron[io]cle)|ron(?:[io]cle)?|oron[io]cle)|Paralipomenon)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"1Chr\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:1[\\s\\xa0]*Ch(?:orono|roni)|(?:1st|I)[\\s\\xa0]*Chrono|(?:1(?:st)?|I)\\.[\\s\\xa0]*Chrono|First[\\s\\xa0]*Chrono)cles)|(?:1(?:[\\s\\xa0]*Chronicle|[\\s\\xa0]*Chrn|Chr)|(?:1[\\s\\xa0]*Chorono|Choroni)cle|1[\\s\\xa0]*C(?:ron[io]|hrono|oron[io])cles|1[\\s\\xa0]*Chronicals|1[\\s\\xa0]*Choronicles|1[\\s\\xa0]*C(?:(?:ron[io]|hrono|oron[io])cle|h(?:r(?:on?)?)?|ron)|1[\\s\\xa0]*Paralipomenon|(?:1st|I)[\\s\\xa0]*(?:C(?:h(?:r(?:onocle|n|onicles|onicals)|oron[io]cles)|(?:oron[io]|ron[io])cles|h(?:r(?:onicle|on?)?|oronocle)|(?:oron[io]|ron[io])cle|ron)|Paralipomenon)|(?:1(?:st)?|I)\\.[\\s\\xa0]*(?:C(?:h(?:r(?:onocle|n|onicles|onicals)|oron[io]cles)|(?:oron[io]|ron[io])cles|h(?:r(?:onicle|on?)?|oronocle)|(?:oron[io]|ron[io])cle|ron)|Paralipomenon)|First[\\s\\xa0]*(?:C(?:h(?:r(?:onocle|n|onicles|onicals)|oron[io]cles)|(?:oron[io]|ron[io])cles|h(?:r(?:onicle|on?)?|oronocle)|(?:oron[io]|ron[io])cle|ron)|Paralipomenon))|(?:C(?:(?:h(?:ron(?:ic(?:al|le)|ocle)|oron[io]cle)|(?:oron[io]|ron[io])cle)s|(?:h(?:ron[io]|orono)|oron[io]|ron[io])cle)|Paralipomenon))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"Ezra\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:E(?:zra?|sra)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Neh\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ne(?:h(?:[ei]m(?:i(?:a[ai]h|a?h|a|i[ai]?h)|a(?:[ai][ai]?)?h)|amiah|amia)?)?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"GkEsth\"],\r\n        apocrypha: true,\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:G(?:r(?:eek[\\\\s\\\\xa0]*Esther|[\\\\s\\\\xa0]*Esth)|k[\\\\s\\\\xa0]*?Esth|r(?:eek[\\\\s\\\\xa0]*Esth?|[\\\\s\\\\xa0]*Est)|k[\\\\s\\\\xa0]*Est)|Esther[\\\\s\\\\xa0]*\\\\(Greek\\\\)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Esth\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Es(?:t(?:h(?:er|r)?|er)?)?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Job\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Jo?b))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Ps\"],\r\n        extra: \"1\",\r\n        regexp: RegExp(\"(\\\\b)((?:(?:(?:1[02-5]|[2-9])?(?:1\" + bcv_parser.prototype.regexps.space + \"*st|2\" + bcv_parser.prototype.regexps.space + \"*nd|3\" + bcv_parser.prototype.regexps.space + \"*rd))|1?1[123]\" + bcv_parser.prototype.regexps.space + \"*th|(?:150|1[0-4][04-9]|[1-9][04-9]|[4-9])\" + bcv_parser.prototype.regexps.space + \"*th)\" + bcv_parser.prototype.regexps.space + \"*Psalm)\\\\b\", \"gi\")\r\n      }, {\r\n        osis: [\"Ps\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Psmals)|(?:Ps(?:a(?:(?:lm[alm]|mm)s?|(?:l[al]|ml)ms?|alms?)|(?:m(?:alm|l)|lam)s?|mal|lalms?))|(?:Psal[am]s?)|(?:Psals?)|(?:P(?:s(?:l(?:m[ms]|a)|m[am]|sm|a(?:m(?:l[as]|s)|aa))|asms|(?:a(?:s(?:ml|s)|m[ls]|l[lm])|s(?:a(?:am|ma)|lma))s|s(?:a(?:ml?)?|m|s|lm)?|a(?:ls|sl)ms?|l(?:a(?:s(?:m(?:as?|s)?|s)?|m(?:a?s)?|as?)|s(?:a?m|sss)s?|s(?:ss?|a)|ms))|Salms?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"PrAzar\"],\r\n        apocrypha: true,\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Pr(?:[\\\\s\\\\xa0]*Aza|Aza?)r|Azariah?|Pr[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Azariah?|Prayer(?:s[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Azariah?|[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Azariah?)|The[\\\\s\\\\xa0]*Pr(?:ayer(?:s[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Azariah?|[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Azariah?)|[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*Azariah?)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Prov\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Prover?bs)|(?:Prverbs)|(?:P(?:r(?:(?:ever|v)bs|verb|everb|vb|v|o(?:bv?erbs|verb|v)?)?|or?verbs|v)|Oroverbs))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Eccl\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ec(?:les(?:i(?:a(?:ias|s)?|s)|sias?)t|clesia(?:sti?|t))es)|(?:Ec(?:c(?:l(?:es(?:i(?:a(?:s?te|st|ates|astes|ia?stes)|(?:ias|s)?tes)|(?:ai?|sia)stes|(?:sia|ai)tes|(?:aia|sai)stes)?)?)?|lesiaste|l)?|Qo(?:heleth|h)?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"SgThree\"],\r\n        apocrypha: true,\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:S(?:[\\s\\xa0]*(?:of[\\s\\xa0]*(?:Th(?:ree(?:\\.[\\s\\xa0]*(?:Ch|Y)|[\\s\\xa0]*(?:Ch|Y))|\\.[\\s\\xa0]*(?:Ch|Y)|[\\s\\xa0]*(?:Ch|Y))|3(?:\\.[\\s\\xa0]*(?:Ch|Y)|[\\s\\xa0]*(?:Ch|Y)))|Th(?:ree(?:\\.[\\s\\xa0]*(?:Ch|Y)|[\\s\\xa0]*(?:Ch|Y))|\\.[\\s\\xa0]*(?:Ch|Y)|[\\s\\xa0]*(?:Ch|Y))|3(?:\\.[\\s\\xa0]*(?:Ch|Y)|[\\s\\xa0]*(?:Ch|Y)))|(?:g[\\s\\xa0]*?|ng[\\s\\xa0]*|ong[\\s\\xa0]*)Three|\\.[\\s\\xa0]*(?:of[\\s\\xa0]*(?:Th(?:ree(?:\\.[\\s\\xa0]*(?:Ch|Y)|[\\s\\xa0]*(?:Ch|Y))|\\.[\\s\\xa0]*(?:Ch|Y)|[\\s\\xa0]*(?:Ch|Y))|3(?:\\.[\\s\\xa0]*(?:Ch|Y)|[\\s\\xa0]*(?:Ch|Y)))|Th(?:ree(?:\\.[\\s\\xa0]*(?:Ch|Y)|[\\s\\xa0]*(?:Ch|Y))|\\.[\\s\\xa0]*(?:Ch|Y)|[\\s\\xa0]*(?:Ch|Y))|3(?:\\.[\\s\\xa0]*(?:Ch|Y)|[\\s\\xa0]*(?:Ch|Y)))|g[\\s\\xa0]*Thr)|The[\\s\\xa0]*Song[\\s\\xa0]*of[\\s\\xa0]*(?:the[\\s\\xa0]*(?:Three[\\s\\xa0]*(?:(?:Youth|Jew)s|Young[\\s\\xa0]*Men|Holy[\\s\\xa0]*Children)|3[\\s\\xa0]*(?:(?:Youth|Jew)s|Young[\\s\\xa0]*Men|Holy[\\s\\xa0]*Children))|Three[\\s\\xa0]*(?:(?:Youth|Jew)s|Young[\\s\\xa0]*Men|Holy[\\s\\xa0]*Children)|3[\\s\\xa0]*(?:(?:Youth|Jew)s|Young[\\s\\xa0]*Men|Holy[\\s\\xa0]*Children)))|(?:Song[\\s\\xa0]*of[\\s\\xa0]*(?:the[\\s\\xa0]*(?:Three[\\s\\xa0]*(?:(?:Youth|Jew)s|Young[\\s\\xa0]*Men|Holy[\\s\\xa0]*Children)|3[\\s\\xa0]*(?:(?:Youth|Jew)s|Young[\\s\\xa0]*Men|Holy[\\s\\xa0]*Children))|Three[\\s\\xa0]*(?:(?:Youth|Jew)s|Young[\\s\\xa0]*Men|Holy[\\s\\xa0]*Children)|3[\\s\\xa0]*(?:(?:Youth|Jew)s|Young[\\s\\xa0]*Men|Holy[\\s\\xa0]*Children))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"Song\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:The[\\\\s\\\\xa0]*Song(?:s[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*S(?:o(?:lom[ao]ns?|ngs?)|alom[ao]ns?)|[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*S(?:o(?:lom[ao]ns?|ngs?)|alom[ao]ns?))|S(?:o[Sln]|S|[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*S|o|n?gs?))|(?:Song(?:s(?:[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*S(?:o(?:lom[ao]ns?|ngs?)|alom[ao]ns?))?|[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*S(?:o(?:lom[ao]ns?|ngs?)|alom[ao]ns?))?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Jer\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:J(?:e(?:r(?:(?:im(?:i[ai]|a)|m[im]a|a(?:m[ai]i|ia))h|(?:ama|imi)h|amiha|amiah|amia|amih|e(?:m(?:i(?:ha|e|ah|a|h|ih)?|a(?:ia?)?h))?)?)?|r)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Ezek\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Eze[ei]ki?el)|(?:E(?:z(?:ek(?:i[ae]|e)l|ek?|k|i(?:[ei]ki?|ki?)el)|x[ei](?:[ei]ki?|ki?)el)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Dan\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:D(?:a(?:n(?:i[ae]l)?)?|[ln])))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Hos\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:H(?:o(?:s(?:ea)?)?|s)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Joel\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:J(?:oel?|l)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Amos\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Am(?:os?|s)?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Obad\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ob(?:a(?:d(?:iah?)?)?|idah|d)?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Jonah\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:J(?:on(?:ah)?|nh)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Mic\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Mi(?:c(?:hah?|ah?)?)?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Nah\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Na(?:h(?:um?)?)?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Hab\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Hab(?:ak(?:k[au]kk?|[au]kk?)|k|bak(?:k[au]kk?|[au]kk?))?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Zeph\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Z(?:e(?:p(?:h(?:an(?:aiah?|iah?))?)?|faniah?)|a(?:ph|f)aniah?|ph?)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Hag\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:H(?:ag(?:g(?:ia[hi]|ai)?|ai)?|gg?)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Zech\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Z(?:ec(?:h(?:[ae]r(?:i(?:a?h|a|ih)|a[ai]?h))?)?|(?:ekaria|c)h|ekaria|c|a(?:c(?:h(?:[ae]r(?:i(?:a?h|a|ih)|a[ai]?h))?)?|kariah))))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Mal\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Mal(?:ac(?:hi?|i)|ichi)?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Matt\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:The[\\\\s\\\\xa0]*Gospel[\\\\s\\\\xa0]*(?:according[\\\\s\\\\xa0]*to[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i)|[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i))|aint[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i))|Matt(?:h(?:[ht]i?|i)|thi?|t?i))|of[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i)|[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i))|aint[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i))|Matt(?:h(?:[ht]i?|i)|thi?|t?i)))ew)|(?:The[\\\\s\\\\xa0]*Gospel[\\\\s\\\\xa0]*(?:according[\\\\s\\\\xa0]*to[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*Matt[ht]?|[\\\\s\\\\xa0]*Matt[ht]?)|aint[\\\\s\\\\xa0]*Matt[ht]?)|Matt[ht]?)|of[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*Matt[ht]?|[\\\\s\\\\xa0]*Matt[ht]?)|aint[\\\\s\\\\xa0]*Matt[ht]?)|Matt[ht]?))ew)|(?:The[\\\\s\\\\xa0]*Gospel[\\\\s\\\\xa0]*(?:according[\\\\s\\\\xa0]*to[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t)|[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t))|aint[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t))|M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t))|of[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t)|[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t))|aint[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t))|M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t)))|Mtt)|(?:Gospel[\\\\s\\\\xa0]*(?:according[\\\\s\\\\xa0]*to[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i)|[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i))|aint[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i))|Matt(?:h(?:[ht]i?|i)|thi?|t?i))|of[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i)|[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i))|aint[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i))|Matt(?:h(?:[ht]i?|i)|thi?|t?i)))ew)|(?:(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i)|[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i))|aint[\\\\s\\\\xa0]*Matt(?:h(?:[ht]i?|i)|thi?|t?i))|Matt(?:h(?:[ht]i?|i)|thi?|t?i))ew)|(?:Gospel[\\\\s\\\\xa0]*(?:according[\\\\s\\\\xa0]*to[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*Matt[ht]?|[\\\\s\\\\xa0]*Matt[ht]?)|aint[\\\\s\\\\xa0]*Matt[ht]?)|Matt[ht]?)|of[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*Matt[ht]?|[\\\\s\\\\xa0]*Matt[ht]?)|aint[\\\\s\\\\xa0]*Matt[ht]?)|Matt[ht]?))ew)|(?:Gospel[\\\\s\\\\xa0]*(?:according[\\\\s\\\\xa0]*to[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t)|[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t))|aint[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t))|M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t))|of[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t)|[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t))|aint[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t))|M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t))))|(?:(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*Matt[ht]?|[\\\\s\\\\xa0]*Matt[ht]?)|aint[\\\\s\\\\xa0]*Matt[ht]?)|Matt[ht]?)ew)|(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t)|[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t))|aint[\\\\s\\\\xa0]*M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t)))|(?:M(?:at(?:h(?:[ht](?:[ht]i?|i)?|i)?ew|th?we|t)?|t)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Mark\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:The[\\\\s\\\\xa0]*Gospel[\\\\s\\\\xa0]*(?:according[\\\\s\\\\xa0]*to[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*M(?:rk?|k|ark?)|[\\\\s\\\\xa0]*M(?:rk?|k|ark?))|aint[\\\\s\\\\xa0]*M(?:rk?|k|ark?))|M(?:rk?|k|ark?))|of[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*M(?:rk?|k|ark?)|[\\\\s\\\\xa0]*M(?:rk?|k|ark?))|aint[\\\\s\\\\xa0]*M(?:rk?|k|ark?))|M(?:rk?|k|ark?))))|(?:Gospel[\\\\s\\\\xa0]*(?:according[\\\\s\\\\xa0]*to[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*M(?:rk?|k|ark?)|[\\\\s\\\\xa0]*M(?:rk?|k|ark?))|aint[\\\\s\\\\xa0]*M(?:rk?|k|ark?))|M(?:rk?|k|ark?))|of[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*M(?:rk?|k|ark?)|[\\\\s\\\\xa0]*M(?:rk?|k|ark?))|aint[\\\\s\\\\xa0]*M(?:rk?|k|ark?))|M(?:rk?|k|ark?)))|S(?:t(?:\\\\.[\\\\s\\\\xa0]*M(?:rk?|k|ark?)|[\\\\s\\\\xa0]*M(?:rk?|k|ark?))|aint[\\\\s\\\\xa0]*M(?:rk?|k|ark?))|M(?:rk?|k|ark?)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Luke\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:The[\\\\s\\\\xa0]*Gospel[\\\\s\\\\xa0]*(?:according[\\\\s\\\\xa0]*to[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k)|[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k))|aint[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k))|L(?:u(?:ke?)?|k))|of[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k)|[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k))|aint[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k))|L(?:u(?:ke?)?|k))))|(?:Gospel[\\\\s\\\\xa0]*(?:according[\\\\s\\\\xa0]*to[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k)|[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k))|aint[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k))|L(?:u(?:ke?)?|k))|of[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k)|[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k))|aint[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k))|L(?:u(?:ke?)?|k)))|S(?:t(?:\\\\.[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k)|[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k))|aint[\\\\s\\\\xa0]*L(?:u(?:ke?)?|k))|L(?:u(?:ke?)?|k)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"1John\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:1(?:st)?|I)[\\s\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)?|h[ho]n|h?n|h|phn)|1John|(?:1(?:st)?|I)\\.[\\s\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)?|h[ho]n|h?n|h|phn)|First[\\s\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)?|h[ho]n|h?n|h|phn)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"2John\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:2(?:nd)?|II)[\\s\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)?|h[ho]n|h?n|h|phn)|2John|(?:2(?:nd)?|II)\\.[\\s\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)?|h[ho]n|h?n|h|phn)|Second[\\s\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)?|h[ho]n|h?n|h|phn)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"3John\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:3(?:rd)?|III)[\\s\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)?|h[ho]n|h?n|h|phn)|3John|(?:3(?:rd)?|III)\\.[\\s\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)?|h[ho]n|h?n|h|phn)|Third[\\s\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)?|h[ho]n|h?n|h|phn)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"John\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:The[\\\\s\\\\xa0]*Gospel[\\\\s\\\\xa0]*(?:according[\\\\s\\\\xa0]*to[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn)|[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn))|aint[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn))|J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn))|of[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn)|[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn))|aint[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn))|J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn))))|(?:Gospel[\\\\s\\\\xa0]*(?:according[\\\\s\\\\xa0]*to[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn)|[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn))|aint[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn))|J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn))|of[\\\\s\\\\xa0]*(?:S(?:t(?:\\\\.[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn)|[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn))|aint[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn))|J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn)))|S(?:t(?:\\\\.[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn)|[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn))|aint[\\\\s\\\\xa0]*J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn))|J(?:o(?:h[mn]|nh|h|on|phn)|h[ho]n|h?n|h|phn)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Acts\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Actsss)|(?:Actss)|(?:Ac(?:ts[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*the[\\\\s\\\\xa0]*Apostles|ts?)?|The[\\\\s\\\\xa0]*Acts[\\\\s\\\\xa0]*of[\\\\s\\\\xa0]*the[\\\\s\\\\xa0]*Apostles))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Rom\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:R(?:o(?:m(?:a(?:n(?:ds|s)?|sn)|s)?|amns|s)?|m(?:n?s|n)?|pmans)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"2Cor\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:(?:2(?:nd)?|II)\\.[\\s\\xa0]*Cor(?:in(?:(?:t(?:h(?:i(?:a[ai]|o)|oa)|i[ao])|ithai)n|thia?n|(?:th[io]|ith)ian|thaian|[an]thian)|thian)|(?:2(?:nd)?|II)[\\s\\xa0]*Cor(?:in(?:(?:t(?:h(?:i(?:a[ai]|o)|oa)|i[ao])|ithai)n|thia?n|(?:th[io]|ith)ian|thaian|[an]thian)|thian)|Second[\\s\\xa0]*Cor(?:in(?:(?:t(?:h(?:i(?:a[ai]|o)|oa)|i[ao])|ithai)n|thia?n|(?:th[io]|ith)ian|thaian|[an]thian)|thian))s)|(?:(?:(?:2(?:nd)?|II)\\.[\\s\\xa0]*Corin(?:itha|thai)|(?:2(?:nd)?|II)[\\s\\xa0]*Corin(?:itha|thai)|Second[\\s\\xa0]*Corin(?:itha|thai))ns)|(?:(?:(?:2(?:nd)?|II)\\.|2(?:nd)?|II|Second)[\\s\\xa0]*Corinthans)|(?:(?:2(?:nd)?|II)[\\s\\xa0]*C(?:o(?:r(?:(?:n(?:ithaia|thai)|rin?thai|ninthai|nthia)ns|n(?:i(?:thai?|ntha)|thi)ns|thian|th|(?:(?:rin?|an|nin?)th|nthi)ians|i(?:(?:n(?:thi(?:an[ao]|na)|ithina)|th[ai]n)s|n(?:t(?:h(?:ian)?)?)?|th(?:ai|ia)ns|th(?:ii|o)ans|inthii?ans))?)?|hor(?:(?:[in]|an)thia|inth(?:ai|ia|i))ns)|2Cor|(?:2(?:nd)?|II)\\.[\\s\\xa0]*C(?:o(?:r(?:(?:n(?:ithaia|thai)|rin?thai|ninthai|nthia)ns|n(?:i(?:thai?|ntha)|thi)ns|thian|th|(?:(?:rin?|an|nin?)th|nthi)ians|i(?:(?:n(?:thi(?:an[ao]|na)|ithina)|th[ai]n)s|n(?:t(?:h(?:ian)?)?)?|th(?:ai|ia)ns|th(?:ii|o)ans|inthii?ans))?)?|hor(?:(?:[in]|an)thia|inth(?:ai|ia|i))ns)|Second[\\s\\xa0]*C(?:o(?:r(?:(?:n(?:ithaia|thai)|rin?thai|ninthai|nthia)ns|n(?:i(?:thai?|ntha)|thi)ns|thian|th|(?:(?:rin?|an|nin?)th|nthi)ians|i(?:(?:n(?:thi(?:an[ao]|na)|ithina)|th[ai]n)s|n(?:t(?:h(?:ian)?)?)?|th(?:ai|ia)ns|th(?:ii|o)ans|inthii?ans))?)?|hor(?:(?:[in]|an)thia|inth(?:ai|ia|i))ns)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"1Cor\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:(?:1(?:st)?|I)\\.[\\s\\xa0]*Cor(?:in(?:(?:t(?:h(?:i(?:a[ai]|o)|oa)|i[ao])|ithai)n|thia?n|(?:th[io]|ith)ian|thaian|[an]thian)|thian)|(?:1(?:st)?|I)[\\s\\xa0]*Cor(?:in(?:(?:t(?:h(?:i(?:a[ai]|o)|oa)|i[ao])|ithai)n|thia?n|(?:th[io]|ith)ian|thaian|[an]thian)|thian)|First[\\s\\xa0]*Cor(?:in(?:(?:t(?:h(?:i(?:a[ai]|o)|oa)|i[ao])|ithai)n|thia?n|(?:th[io]|ith)ian|thaian|[an]thian)|thian))s)|(?:(?:(?:1(?:st)?|I)\\.[\\s\\xa0]*Corin(?:itha|thai)|(?:1(?:st)?|I)[\\s\\xa0]*Corin(?:itha|thai)|First[\\s\\xa0]*Corin(?:itha|thai))ns)|(?:(?:(?:1(?:st)?|I)\\.|1(?:st)?|I|First)[\\s\\xa0]*Corinthans)|(?:(?:1(?:st)?|I)[\\s\\xa0]*C(?:o(?:r(?:(?:n(?:ithaia|thai)|rin?thai|ninthai|nthia)ns|n(?:i(?:thai?|ntha)|thi)ns|thian|th|(?:(?:rin?|an|nin?)th|nthi)ians|i(?:(?:n(?:thi(?:an[ao]|na)|ithina)|th[ai]n)s|n(?:t(?:h(?:ian)?)?)?|th(?:ai|ia)ns|th(?:ii|o)ans|inthii?ans))?)?|hor(?:(?:[in]|an)thia|inth(?:ai|ia|i))ns)|1Cor|(?:1(?:st)?|I)\\.[\\s\\xa0]*C(?:o(?:r(?:(?:n(?:ithaia|thai)|rin?thai|ninthai|nthia)ns|n(?:i(?:thai?|ntha)|thi)ns|thian|th|(?:(?:rin?|an|nin?)th|nthi)ians|i(?:(?:n(?:thi(?:an[ao]|na)|ithina)|th[ai]n)s|n(?:t(?:h(?:ian)?)?)?|th(?:ai|ia)ns|th(?:ii|o)ans|inthii?ans))?)?|hor(?:(?:[in]|an)thia|inth(?:ai|ia|i))ns)|First[\\s\\xa0]*C(?:o(?:r(?:(?:n(?:ithaia|thai)|rin?thai|ninthai|nthia)ns|n(?:i(?:thai?|ntha)|thi)ns|thian|th|(?:(?:rin?|an|nin?)th|nthi)ians|i(?:(?:n(?:thi(?:an[ao]|na)|ithina)|th[ai]n)s|n(?:t(?:h(?:ian)?)?)?|th(?:ai|ia)ns|th(?:ii|o)ans|inthii?ans))?)?|hor(?:(?:[in]|an)thia|inth(?:ai|ia|i))ns))|(?:C(?:or(?:i(?:(?:n(?:th(?:i(?:an[ao]|na)|ai?n)|ith(?:ina|an))|th[ai]n)s|nthi(?:a?ns|an)|(?:n(?:t(?:h(?:i(?:a[ai]|o)|aia)|i[ao])|ith(?:ai|ia))|th(?:ai|ia))ns|(?:n(?:[an]th|thi)i|th(?:ii|o))ans|nthoi?ans|inthii?ans)|(?:(?:rin?tha|ntha)i|nthia|ninthai|nithaia|n(?:intha|thi|ithai?)|(?:(?:nin?|rin?)th|nthi)ia)ns)|hor(?:inth(?:ai|ia|i)|(?:a?n|i)thia)ns)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"Gal\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:G(?:a(?:l(?:a(?:t(?:(?:i(?:on[an]|nan|an[ai])|o?n)s|i(?:na?|on?|an?)s|ian|(?:i(?:a[ai]|oa)|oa)ns|ii[ao]?ns|a(?:[ao]n|n|i[ao]?n)?s)?)?|lati[ao]?ns)?)?|l)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Eph\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Eph(?:es(?:i(?:an[ds]|ons)|ains)|i?sians))|(?:E(?:p(?:h(?:es(?:ai|ia)|i?sia)n|h(?:es?|s)?|e(?:he)?sians)?|hp(?:[ei]sians)?|sphesians)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Phil\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ph(?:il(?:ip(?:p(?:(?:i(?:a[ai]|ia|e)|(?:pi|e)a)n|ia?n|a(?:ia?)?n)|(?:i(?:[ae]|ia)?|ea?|a(?:ia?)?)n)s|p(?:(?:(?:pii|e|ppi)a|pia|ai)ns|an|ia?ns))|l(?:ipp?ians|pp)))|(?:Ph(?:i(?:l(?:l(?:i(?:p(?:(?:ai?|ia|ea)ns|(?:ai?|ia|ea)n|ie?ns|(?:i(?:a[ai]|ea)|aia|iia)ns|p(?:i(?:(?:[ei]a)?ns|a(?:ins|ns?))|(?:pia|ai)ns|eans?|ans))?)?|(?:l(?:ipi|p|i?pp)ia|p(?:ie|a))ns|(?:li|p)?pians|(?:li|p)?pian)|(?:ip(?:p(?:i?a|i|ea|pia)|ai?|ia)|pp?ia)n|i(?:pp?)?|pp?)?)?|(?:l(?:ip)?|li)?p)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Col\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Colossians)|(?:Colossian)|(?:C(?:o(?:l(?:(?:[ao]|as|l[ao])si[ao]|oss(?:io|a))ns|l(?:oss)?)?|al(?:l(?:os(?:i[ao]|sia)|asi[ao])|(?:[ao]s|[ao])si[ao])ns)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"2Thess\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:(?:2(?:nd)?|II)\\.|2(?:nd)?|II|Second)[\\s\\xa0]*Thsss)|(?:(?:2(?:nd)?|II)[\\s\\xa0]*Th(?:es(?:s(?:al(?:on(?:i(?:(?:[ao]a|io|e)ns|[ao]ns|[ao]n|ns|c(?:i[ae]|a)ns)|(?:(?:oi?|e)a|cie|aia)ns|a(?:ins?|ns))|lonians)|(?:[eo]lonian)?s|[eo]lonian|olonins|elonains)?|(?:al(?:oni[ci]|loni)a|alonio|elonai)ns|[aeo]lonians|[aeo]lonian|alonins)?|ss|s)?|2Thess|(?:2(?:nd)?|II)\\.[\\s\\xa0]*Th(?:es(?:s(?:al(?:on(?:i(?:(?:[ao]a|io|e)ns|[ao]ns|[ao]n|ns|c(?:i[ae]|a)ns)|(?:(?:oi?|e)a|cie|aia)ns|a(?:ins?|ns))|lonians)|(?:[eo]lonian)?s|[eo]lonian|olonins|elonains)?|(?:al(?:oni[ci]|loni)a|alonio|elonai)ns|[aeo]lonians|[aeo]lonian|alonins)?|ss|s)?|Second[\\s\\xa0]*Th(?:es(?:s(?:al(?:on(?:i(?:(?:[ao]a|io|e)ns|[ao]ns|[ao]n|ns|c(?:i[ae]|a)ns)|(?:(?:oi?|e)a|cie|aia)ns|a(?:ins?|ns))|lonians)|(?:[eo]lonian)?s|[eo]lonian|olonins|elonains)?|(?:al(?:oni[ci]|loni)a|alonio|elonai)ns|[aeo]lonians|[aeo]lonian|alonins)?|ss|s)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"1Thess\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:(?:1(?:st)?|I)\\.|1(?:st)?|I|First)[\\s\\xa0]*Thsss)|(?:(?:1(?:st)?|I)[\\s\\xa0]*Th(?:es(?:s(?:al(?:on(?:i(?:(?:[ao]a|io|e)ns|[ao]ns|[ao]n|ns|c(?:i[ae]|a)ns)|(?:(?:oi?|e)a|cie|aia)ns|a(?:ins?|ns))|lonians)|(?:[eo]lonian)?s|[eo]lonian|olonins|elonains)?|(?:al(?:oni[ci]|loni)a|alonio|elonai)ns|[aeo]lonians|[aeo]lonian|alonins)?|ss|s)?|1Thess|(?:1(?:st)?|I)\\.[\\s\\xa0]*Th(?:es(?:s(?:al(?:on(?:i(?:(?:[ao]a|io|e)ns|[ao]ns|[ao]n|ns|c(?:i[ae]|a)ns)|(?:(?:oi?|e)a|cie|aia)ns|a(?:ins?|ns))|lonians)|(?:[eo]lonian)?s|[eo]lonian|olonins|elonains)?|(?:al(?:oni[ci]|loni)a|alonio|elonai)ns|[aeo]lonians|[aeo]lonian|alonins)?|ss|s)?|First[\\s\\xa0]*Th(?:es(?:s(?:al(?:on(?:i(?:(?:[ao]a|io|e)ns|[ao]ns|[ao]n|ns|c(?:i[ae]|a)ns)|(?:(?:oi?|e)a|cie|aia)ns|a(?:ins?|ns))|lonians)|(?:[eo]lonian)?s|[eo]lonian|olonins|elonains)?|(?:al(?:oni[ci]|loni)a|alonio|elonai)ns|[aeo]lonians|[aeo]lonian|alonins)?|ss|s)?)|(?:Thes(?:s(?:al(?:on(?:i(?:[ao]ns|[ao]n|ns|(?:[ao]a|io)ns|c(?:i[ae]|a)ns)|(?:cie|ea|oi?a|aia)ns|a(?:ins?|ns))|lonians)|[eo]lonians|[eo]lonian|olonins|elonains)|(?:al(?:oni[ci]|loni)a|alonio|elonai)ns|[aeo]lonians|[aeo]lonian|alonins)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"2Tim\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:(?:2(?:nd)?|II)\\.[\\s\\xa0]*Timoth?|(?:2(?:nd)?|II)[\\s\\xa0]*Timoth?|Second[\\s\\xa0]*Timoth?)y)|(?:(?:2(?:nd)?|II)[\\s\\xa0]*T(?:imoth|m|im?|omothy|himoth?y)|2Tim|(?:2(?:nd)?|II)\\.[\\s\\xa0]*T(?:imoth|m|im?|omothy|himoth?y)|Second[\\s\\xa0]*T(?:imoth|m|im?|omothy|himoth?y)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"1Tim\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:(?:1(?:st)?|I)\\.[\\s\\xa0]*Timoth?|(?:1(?:st)?|I)[\\s\\xa0]*Timoth?|First[\\s\\xa0]*Timoth?)y)|(?:(?:1(?:st)?|I)[\\s\\xa0]*T(?:imoth|m|im?|omothy|himoth?y)|1Tim|(?:1(?:st)?|I)\\.[\\s\\xa0]*T(?:imoth|m|im?|omothy|himoth?y)|First[\\s\\xa0]*T(?:imoth|m|im?|omothy|himoth?y))|(?:Timothy?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"Titus\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ti(?:t(?:us)?)?))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Phlm\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ph(?:l?mn|l?m|l[ei]mon|ile(?:m(?:on)?)?)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Heb\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:H(?:e(?:b(?:(?:w(?:er|re)|ew[erw]|erw|r(?:rw|we|eww))s|r(?:ew?|w)?s|rew)?|[ew]breww?s)|(?:w[ew]breww?|w?breww?)s)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Jas\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:J(?:a(?:m(?:es?)?|s)?|ms?)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"2Pet\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:2(?:nd)?|II)[\\s\\xa0]*P(?:e(?:t(?:er?|r)?|r)?|tr?)?|2Pet|(?:2(?:nd)?|II)\\.[\\s\\xa0]*P(?:e(?:t(?:er?|r)?|r)?|tr?)?|Second[\\s\\xa0]*P(?:e(?:t(?:er?|r)?|r)?|tr?)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"1Pet\"],\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:1(?:st)?|I)[\\s\\xa0]*P(?:e(?:t(?:er?|r)?|r)?|tr?)?|1Pet|(?:1(?:st)?|I)\\.[\\s\\xa0]*P(?:e(?:t(?:er?|r)?|r)?|tr?)?|First[\\s\\xa0]*P(?:e(?:t(?:er?|r)?|r)?|tr?)?)|(?:Peter))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"Jude\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ju?de))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Tob\"],\r\n        apocrypha: true,\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:T(?:ob(?:i(?:as|t)?|t)?|b)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Jdt\"],\r\n        apocrypha: true,\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:J(?:ud(?:ith?|th?)|d(?:ith?|th?))))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Bar\"],\r\n        apocrypha: true,\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:B(?:ar(?:uch)?|r)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Sus\"],\r\n        apocrypha: true,\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:S(?:us(?:annah|anna)?|hoshana)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"2Macc\"],\r\n        apocrypha: true,\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:2(?:nd)?|II)\\.[\\s\\xa0]*Macc(?:abb(?:e(?:e[es]?|s)?|be[es]?)|cab(?:e(?:e[es]?|s)?|be[es]?))|(?:2(?:nd)?|II)[\\s\\xa0]*Macc(?:abb(?:e(?:e[es]?|s)?|be[es]?)|cab(?:e(?:e[es]?|s)?|be[es]?))|Second[\\s\\xa0]*Macc(?:abb(?:e(?:e[es]?|s)?|be[es]?)|cab(?:e(?:e[es]?|s)?|be[es]?)))|(?:2(?:[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?|(?:Mac|[\\s\\xa0]*M)c|[\\s\\xa0]*Ma)|(?:2nd|II)[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?|(?:2(?:nd)?|II)\\.[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?|Second[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"3Macc\"],\r\n        apocrypha: true,\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:3(?:rd)?|III)\\.[\\s\\xa0]*Macc(?:abb(?:e(?:e[es]?|s)?|be[es]?)|cab(?:e(?:e[es]?|s)?|be[es]?))|(?:3(?:rd)?|III)[\\s\\xa0]*Macc(?:abb(?:e(?:e[es]?|s)?|be[es]?)|cab(?:e(?:e[es]?|s)?|be[es]?))|Third[\\s\\xa0]*Macc(?:abb(?:e(?:e[es]?|s)?|be[es]?)|cab(?:e(?:e[es]?|s)?|be[es]?)))|(?:3(?:[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?|(?:Mac|[\\s\\xa0]*M)c)|(?:3rd|III)[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?|(?:3(?:rd)?|III)\\.[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?|Third[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"4Macc\"],\r\n        apocrypha: true,\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:4(?:th)?|IV)\\.[\\s\\xa0]*Macc(?:abb(?:e(?:e[es]?|s)?|be[es]?)|cab(?:e(?:e[es]?|s)?|be[es]?))|(?:4(?:th)?|IV)[\\s\\xa0]*Macc(?:abb(?:e(?:e[es]?|s)?|be[es]?)|cab(?:e(?:e[es]?|s)?|be[es]?))|Fourth[\\s\\xa0]*Macc(?:abb(?:e(?:e[es]?|s)?|be[es]?)|cab(?:e(?:e[es]?|s)?|be[es]?)))|(?:4(?:[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?|(?:Mac|[\\s\\xa0]*M)c)|(?:4th|IV)[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?|(?:4(?:th)?|IV)\\.[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?|Fourth[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"1Macc\"],\r\n        apocrypha: true,\r\n        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:1(?:st)?|I)\\.[\\s\\xa0]*Macc(?:abb(?:e(?:e[es]?|s)?|be[es]?)|cab(?:e(?:e[es]?|s)?|be[es]?))|(?:1(?:st)?|I)[\\s\\xa0]*Macc(?:abb(?:e(?:e[es]?|s)?|be[es]?)|cab(?:e(?:e[es]?|s)?|be[es]?))|First[\\s\\xa0]*Macc(?:abb(?:e(?:e[es]?|s)?|be[es]?)|cab(?:e(?:e[es]?|s)?|be[es]?)))|(?:1(?:[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?|(?:Mac|[\\s\\xa0]*M)c|[\\s\\xa0]*Ma)|(?:1st|I)[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?|(?:1(?:st)?|I)\\.[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?|First[\\s\\xa0]*Mac(?:ab(?:b(?:e(?:(?:ee?)?s|ee?)?|be(?:e[es]?|s)?)|e(?:(?:ee?)?s|ee?)?)|c(?:abe(?:ee?)?s|cabbbe)|cabe(?:ee?)?|cc?)?)|(?:Maccabees))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)\\uff08\\uff09\\[\\]\\/\"'\\*=~\\-\\u2013\\u2014])|$)/gi\r\n      }, {\r\n        osis: [\"Ezek\", \"Ezra\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ez))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Hab\", \"Hag\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ha))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Heb\", \"Hab\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Hb))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"John\", \"Jonah\", \"Job\", \"Josh\", \"Joel\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Jo))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Jude\", \"Judg\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:J(?:ud?|d)))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Matt\", \"Mark\", \"Mal\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ma))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Phil\", \"Phlm\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ph))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }, {\r\n        osis: [\"Zeph\", \"Zech\"],\r\n        regexp: RegExp(\"(^|\" + bcv_parser.prototype.regexps.pre_book + \")((?:Ze))(?:(?=[\\\\d\\\\s\\\\xa0.:,;\\\\x1e\\\\x1f&\\\\(\\\\)\\\\uff08\\\\uff09\\\\[\\\\]/\\\"'\\\\*=~\\\\-\\\\u2013\\\\u2014])|$)\", \"gi\")\r\n      }\r\n    ];\r\n    if (include_apocrypha === true && case_sensitive === \"none\") {\r\n      return books;\r\n    }\r\n    out = [];\r\n    for (k = 0, len = books.length; k < len; k++) {\r\n      book = books[k];\r\n      if (include_apocrypha === false && (book.apocrypha != null) && book.apocrypha === true) {\r\n        continue;\r\n      }\r\n      if (case_sensitive === \"books\") {\r\n        book.regexp = new RegExp(book.regexp.source, \"g\");\r\n      }\r\n      out.push(book);\r\n    }\r\n    return out;\r\n  };\r\n\r\n  bcv_parser.prototype.regexps.books = bcv_parser.prototype.regexps.get_books(false, \"none\");\r\nvar grammar;\r\n/*\r\n * Generated by PEG.js 0.10.0.\r\n *\r\n * http://pegjs.org/\r\n */\r\n(function(root) {\r\n  \"use strict\";\r\n\r\n  function peg$subclass(child, parent) {\r\n    function ctor() { this.constructor = child; }\r\n    ctor.prototype = parent.prototype;\r\n    child.prototype = new ctor();\r\n  }\r\n\r\n  function peg$SyntaxError(message, expected, found, location) {\r\n    this.message  = message;\r\n    this.expected = expected;\r\n    this.found    = found;\r\n    this.location = location;\r\n    this.name     = \"SyntaxError\";\r\n\r\n    if (typeof Error.captureStackTrace === \"function\") {\r\n      Error.captureStackTrace(this, peg$SyntaxError);\r\n    }\r\n  }\r\n\r\n  peg$subclass(peg$SyntaxError, Error);\r\n\r\n  peg$SyntaxError.buildMessage = function(expected, found) {\r\n    var DESCRIBE_EXPECTATION_FNS = {\r\n          literal: function(expectation) {\r\n            return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\r\n          },\r\n\r\n          \"class\": function(expectation) {\r\n            var escapedParts = \"\",\r\n                i;\r\n\r\n            for (i = 0; i < expectation.parts.length; i++) {\r\n              escapedParts += expectation.parts[i] instanceof Array\r\n                ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\r\n                : classEscape(expectation.parts[i]);\r\n            }\r\n\r\n            return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\r\n          },\r\n\r\n          any: function(expectation) {\r\n            return \"any character\";\r\n          },\r\n\r\n          end: function(expectation) {\r\n            return \"end of input\";\r\n          },\r\n\r\n          other: function(expectation) {\r\n            return expectation.description;\r\n          }\r\n        };\r\n\r\n    function hex(ch) {\r\n      return ch.charCodeAt(0).toString(16).toUpperCase();\r\n    }\r\n\r\n    function literalEscape(s) {\r\n      return s\r\n        .replace(/\\\\/g, '\\\\\\\\')\r\n        .replace(/\"/g,  '\\\\\"')\r\n        .replace(/\\0/g, '\\\\0')\r\n        .replace(/\\t/g, '\\\\t')\r\n        .replace(/\\n/g, '\\\\n')\r\n        .replace(/\\r/g, '\\\\r')\r\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\r\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\r\n    }\r\n\r\n    function classEscape(s) {\r\n      return s\r\n        .replace(/\\\\/g, '\\\\\\\\')\r\n        .replace(/\\]/g, '\\\\]')\r\n        .replace(/\\^/g, '\\\\^')\r\n        .replace(/-/g,  '\\\\-')\r\n        .replace(/\\0/g, '\\\\0')\r\n        .replace(/\\t/g, '\\\\t')\r\n        .replace(/\\n/g, '\\\\n')\r\n        .replace(/\\r/g, '\\\\r')\r\n        .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\r\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\r\n    }\r\n\r\n    function describeExpectation(expectation) {\r\n      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\r\n    }\r\n\r\n    function describeExpected(expected) {\r\n      var descriptions = new Array(expected.length),\r\n          i, j;\r\n\r\n      for (i = 0; i < expected.length; i++) {\r\n        descriptions[i] = describeExpectation(expected[i]);\r\n      }\r\n\r\n      descriptions.sort();\r\n\r\n      if (descriptions.length > 0) {\r\n        for (i = 1, j = 1; i < descriptions.length; i++) {\r\n          if (descriptions[i - 1] !== descriptions[i]) {\r\n            descriptions[j] = descriptions[i];\r\n            j++;\r\n          }\r\n        }\r\n        descriptions.length = j;\r\n      }\r\n\r\n      switch (descriptions.length) {\r\n        case 1:\r\n          return descriptions[0];\r\n\r\n        case 2:\r\n          return descriptions[0] + \" or \" + descriptions[1];\r\n\r\n        default:\r\n          return descriptions.slice(0, -1).join(\", \")\r\n            + \", or \"\r\n            + descriptions[descriptions.length - 1];\r\n      }\r\n    }\r\n\r\n    function describeFound(found) {\r\n      return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\r\n    }\r\n\r\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\r\n  };\r\n\r\n  function peg$parse(input, options) {\r\n    options = options !== void 0 ? options : {};\r\n\r\n    var peg$FAILED = {},\r\n\r\n        peg$startRuleFunctions = { start: peg$parsestart },\r\n        peg$startRuleFunction  = peg$parsestart,\r\n\r\n        peg$c0 = function(val_1, val_2) { val_2.unshift([val_1]); return {\"type\": \"sequence\", \"value\": val_2, \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c1 = \"(\",\r\n        peg$c2 = peg$literalExpectation(\"(\", false),\r\n        peg$c3 = \")\",\r\n        peg$c4 = peg$literalExpectation(\")\", false),\r\n        peg$c5 = function(val_1, val_2) { if (typeof(val_2) === \"undefined\") val_2 = []; val_2.unshift([val_1]); return {\"type\": \"sequence_post_enclosed\", \"value\": val_2, \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c6 = function(val_1, val_2) { if (val_1.length && val_1.length === 2) val_1 = val_1[0]; // for `b`, which returns [object, undefined]\r\n              return {\"type\": \"range\", \"value\": [val_1, val_2], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c7 = \"\\x1F\",\r\n        peg$c8 = peg$literalExpectation(\"\\x1F\", false),\r\n        peg$c9 = \"/\",\r\n        peg$c10 = peg$literalExpectation(\"/\", false),\r\n        peg$c11 = /^[1-8]/,\r\n        peg$c12 = peg$classExpectation([[\"1\", \"8\"]], false, false),\r\n        peg$c13 = function(val) { return {\"type\": \"b\", \"value\": val.value, \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c14 = function(val_1, val_2) { return {\"type\": \"bc\", \"value\": [val_1, val_2], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c15 = \",\",\r\n        peg$c16 = peg$literalExpectation(\",\", false),\r\n        peg$c17 = function(val_1, val_2) { return {\"type\": \"bc_title\", \"value\": [val_1, val_2], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c18 = \".\",\r\n        peg$c19 = peg$literalExpectation(\".\", false),\r\n        peg$c20 = function(val_1, val_2) { return {\"type\": \"bcv\", \"value\": [val_1, val_2], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c21 = \"-\",\r\n        peg$c22 = peg$literalExpectation(\"-\", false),\r\n        peg$c23 = function(val_1, val_2, val_3, val_4) { return {\"type\": \"range\", \"value\": [{\"type\": \"bcv\", \"value\": [{\"type\": \"bc\", \"value\": [val_1, val_2], \"indices\": [val_1.indices[0], val_2.indices[1]]}, val_3], \"indices\": [val_1.indices[0], val_3.indices[1]]}, val_4], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c24 = function(val_1, val_2) { return {\"type\": \"bv\", \"value\": [val_1, val_2], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c25 = function(val_1, val_2) { return {\"type\": \"bc\", \"value\": [val_2, val_1], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c26 = function(val_1, val_2, val_3) { return {\"type\": \"cb_range\", \"value\": [val_3, val_1, val_2], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c27 = \"th\",\r\n        peg$c28 = peg$literalExpectation(\"th\", false),\r\n        peg$c29 = \"nd\",\r\n        peg$c30 = peg$literalExpectation(\"nd\", false),\r\n        peg$c31 = \"st\",\r\n        peg$c32 = peg$literalExpectation(\"st\", false),\r\n        peg$c33 = \"/1\\x1F\",\r\n        peg$c34 = peg$literalExpectation(\"/1\\x1F\", false),\r\n        peg$c35 = function(val) { return {\"type\": \"c_psalm\", \"value\": val.value, \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c36 = function(val_1, val_2) { return {\"type\": \"cv_psalm\", \"value\": [val_1, val_2], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c37 = function(val_1, val_2) { return {\"type\": \"c_title\", \"value\": [val_1, val_2], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c38 = function(val_1, val_2) { return {\"type\": \"cv\", \"value\": [val_1, val_2], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c39 = function(val) { return {\"type\": \"c\", \"value\": [val], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c40 = \"ff\",\r\n        peg$c41 = peg$literalExpectation(\"ff\", false),\r\n        peg$c42 = /^[a-z0-9]/,\r\n        peg$c43 = peg$classExpectation([[\"a\", \"z\"], [\"0\", \"9\"]], false, false),\r\n        peg$c44 = \"f\",\r\n        peg$c45 = peg$literalExpectation(\"f\", false),\r\n        peg$c46 = /^[a-z]/,\r\n        peg$c47 = peg$classExpectation([[\"a\", \"z\"]], false, false),\r\n        peg$c48 = function(val_1) { return {\"type\": \"ff\", \"value\": [val_1], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c49 = function(val_1, val_2) { return {\"type\": \"integer_title\", \"value\": [val_1, val_2], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c50 = \"/9\\x1F\",\r\n        peg$c51 = peg$literalExpectation(\"/9\\x1F\", false),\r\n        peg$c52 = function(val) { return {\"type\": \"context\", \"value\": val.value, \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c53 = \"/2\\x1F\",\r\n        peg$c54 = peg$literalExpectation(\"/2\\x1F\", false),\r\n        peg$c55 = \".1\",\r\n        peg$c56 = peg$literalExpectation(\".1\", false),\r\n        peg$c57 = /^[0-9]/,\r\n        peg$c58 = peg$classExpectation([[\"0\", \"9\"]], false, false),\r\n        peg$c59 = function(val) { return {\"type\": \"bc\", \"value\": [val, {\"type\": \"c\", \"value\": [{\"type\": \"integer\", \"value\": 151, \"indices\": [peg$currPos - 2, peg$currPos - 1]}], \"indices\": [peg$currPos - 2, peg$currPos - 1]}], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c60 = function(val_1, val_2) { return {\"type\": \"bcv\", \"value\": [val_1, {\"type\": \"v\", \"value\": [val_2], \"indices\": [val_2.indices[0], val_2.indices[1]]}], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c61 = /^[a-e]/,\r\n        peg$c62 = peg$classExpectation([[\"a\", \"e\"]], false, false),\r\n        peg$c63 = function(val) { return {\"type\": \"v\", \"value\": [val], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c64 = \"ch\",\r\n        peg$c65 = peg$literalExpectation(\"ch\", false),\r\n        peg$c66 = \"apters\",\r\n        peg$c67 = peg$literalExpectation(\"apters\", false),\r\n        peg$c68 = \"apter\",\r\n        peg$c69 = peg$literalExpectation(\"apter\", false),\r\n        peg$c70 = \"apts\",\r\n        peg$c71 = peg$literalExpectation(\"apts\", false),\r\n        peg$c72 = \"pts\",\r\n        peg$c73 = peg$literalExpectation(\"pts\", false),\r\n        peg$c74 = \"apt\",\r\n        peg$c75 = peg$literalExpectation(\"apt\", false),\r\n        peg$c76 = \"aps\",\r\n        peg$c77 = peg$literalExpectation(\"aps\", false),\r\n        peg$c78 = \"ap\",\r\n        peg$c79 = peg$literalExpectation(\"ap\", false),\r\n        peg$c80 = \"p\",\r\n        peg$c81 = peg$literalExpectation(\"p\", false),\r\n        peg$c82 = \"s\",\r\n        peg$c83 = peg$literalExpectation(\"s\", false),\r\n        peg$c84 = \"a\",\r\n        peg$c85 = peg$literalExpectation(\"a\", false),\r\n        peg$c86 = function() { return {\"type\": \"c_explicit\"} },\r\n        peg$c87 = \"v\",\r\n        peg$c88 = peg$literalExpectation(\"v\", false),\r\n        peg$c89 = \"erses\",\r\n        peg$c90 = peg$literalExpectation(\"erses\", false),\r\n        peg$c91 = \"erse\",\r\n        peg$c92 = peg$literalExpectation(\"erse\", false),\r\n        peg$c93 = \"er\",\r\n        peg$c94 = peg$literalExpectation(\"er\", false),\r\n        peg$c95 = \"ss\",\r\n        peg$c96 = peg$literalExpectation(\"ss\", false),\r\n        peg$c97 = function() { return {\"type\": \"v_explicit\"} },\r\n        peg$c98 = \":\",\r\n        peg$c99 = peg$literalExpectation(\":\", false),\r\n        peg$c100 = /^[\"']/,\r\n        peg$c101 = peg$classExpectation([\"\\\"\", \"'\"], false, false),\r\n        peg$c102 = /^[,;\\/:&\\-\\u2013\\u2014~]/,\r\n        peg$c103 = peg$classExpectation([\",\", \";\", \"/\", \":\", \"&\", \"-\", \"\\u2013\", \"\\u2014\", \"~\"], false, false),\r\n        peg$c104 = \"and\",\r\n        peg$c105 = peg$literalExpectation(\"and\", false),\r\n        peg$c106 = \"compare\",\r\n        peg$c107 = peg$literalExpectation(\"compare\", false),\r\n        peg$c108 = \"cf\",\r\n        peg$c109 = peg$literalExpectation(\"cf\", false),\r\n        peg$c110 = \"see\",\r\n        peg$c111 = peg$literalExpectation(\"see\", false),\r\n        peg$c112 = \"also\",\r\n        peg$c113 = peg$literalExpectation(\"also\", false),\r\n        peg$c114 = function() { return \"\" },\r\n        peg$c115 = /^[\\-\\u2013\\u2014]/,\r\n        peg$c116 = peg$classExpectation([\"-\", \"\\u2013\", \"\\u2014\"], false, false),\r\n        peg$c117 = \"through\",\r\n        peg$c118 = peg$literalExpectation(\"through\", false),\r\n        peg$c119 = \"thru\",\r\n        peg$c120 = peg$literalExpectation(\"thru\", false),\r\n        peg$c121 = \"to\",\r\n        peg$c122 = peg$literalExpectation(\"to\", false),\r\n        peg$c123 = \"title\",\r\n        peg$c124 = peg$literalExpectation(\"title\", false),\r\n        peg$c125 = function(val) { return {type:\"title\", value: [val], \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c126 = \"from\",\r\n        peg$c127 = peg$literalExpectation(\"from\", false),\r\n        peg$c128 = \"of\",\r\n        peg$c129 = peg$literalExpectation(\"of\", false),\r\n        peg$c130 = \"in\",\r\n        peg$c131 = peg$literalExpectation(\"in\", false),\r\n        peg$c132 = \"the\",\r\n        peg$c133 = peg$literalExpectation(\"the\", false),\r\n        peg$c134 = \"book\",\r\n        peg$c135 = peg$literalExpectation(\"book\", false),\r\n        peg$c136 = /^[([]/,\r\n        peg$c137 = peg$classExpectation([\"(\", \"[\"], false, false),\r\n        peg$c138 = /^[)\\]]/,\r\n        peg$c139 = peg$classExpectation([\")\", \"]\"], false, false),\r\n        peg$c140 = function(val) { return {\"type\": \"translation_sequence\", \"value\": val, \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c141 = \"\\x1E\",\r\n        peg$c142 = peg$literalExpectation(\"\\x1E\", false),\r\n        peg$c143 = function(val) { return {\"type\": \"translation\", \"value\": val.value, \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c144 = \",000\",\r\n        peg$c145 = peg$literalExpectation(\",000\", false),\r\n        peg$c146 = function(val) { return {\"type\": \"integer\", \"value\": parseInt(val.join(\"\"), 10), \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c147 = /^[^\\x1F\\x1E([]/,\r\n        peg$c148 = peg$classExpectation([\"\\x1F\", \"\\x1E\", \"(\", \"[\"], true, false),\r\n        peg$c149 = function(val) { return {\"type\": \"word\", \"value\": val.join(\"\"), \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c150 = function(val) { return {\"type\": \"stop\", \"value\": val, \"indices\": [peg$savedPos, peg$currPos - 1]} },\r\n        peg$c151 = /^[\\s\\xa0*]/,\r\n        peg$c152 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\", \"\\xA0\", \"*\"], false, false),\r\n\r\n        peg$currPos          = 0,\r\n        peg$savedPos         = 0,\r\n        peg$posDetailsCache  = [{ line: 1, column: 1 }],\r\n        peg$maxFailPos       = 0,\r\n        peg$maxFailExpected  = [],\r\n        peg$silentFails      = 0,\r\n\r\n        peg$result;\r\n\r\n    if (\"startRule\" in options) {\r\n      if (!(options.startRule in peg$startRuleFunctions)) {\r\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\r\n      }\r\n\r\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\r\n    }\r\n\r\n    if (\"punctuation_strategy\" in options && options.punctuation_strategy === \"eu\") {\r\n        peg$parsecv_sep = peg$parseeu_cv_sep;\r\n        peg$c102 = /^[;\\/:&\\-\\u2013\\u2014~]/;\r\n    }\r\n\r\n    function text() {\r\n      return input.substring(peg$savedPos, peg$currPos);\r\n    }\r\n\r\n    function location() {\r\n      return peg$computeLocation(peg$savedPos, peg$currPos);\r\n    }\r\n\r\n    function expected(description, location) {\r\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\r\n\r\n      throw peg$buildStructuredError(\r\n        [peg$otherExpectation(description)],\r\n        input.substring(peg$savedPos, peg$currPos),\r\n        location\r\n      );\r\n    }\r\n\r\n    function error(message, location) {\r\n      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\r\n\r\n      throw peg$buildSimpleError(message, location);\r\n    }\r\n\r\n    function peg$literalExpectation(text, ignoreCase) {\r\n      return { type: \"literal\", text: text, ignoreCase: ignoreCase };\r\n    }\r\n\r\n    function peg$classExpectation(parts, inverted, ignoreCase) {\r\n      return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\r\n    }\r\n\r\n    function peg$anyExpectation() {\r\n      return { type: \"any\" };\r\n    }\r\n\r\n    function peg$endExpectation() {\r\n      return { type: \"end\" };\r\n    }\r\n\r\n    function peg$otherExpectation(description) {\r\n      return { type: \"other\", description: description };\r\n    }\r\n\r\n    function peg$computePosDetails(pos) {\r\n      var details = peg$posDetailsCache[pos], p;\r\n\r\n      if (details) {\r\n        return details;\r\n      } else {\r\n        p = pos - 1;\r\n        while (!peg$posDetailsCache[p]) {\r\n          p--;\r\n        }\r\n\r\n        details = peg$posDetailsCache[p];\r\n        details = {\r\n          line:   details.line,\r\n          column: details.column\r\n        };\r\n\r\n        while (p < pos) {\r\n          if (input.charCodeAt(p) === 10) {\r\n            details.line++;\r\n            details.column = 1;\r\n          } else {\r\n            details.column++;\r\n          }\r\n\r\n          p++;\r\n        }\r\n\r\n        peg$posDetailsCache[pos] = details;\r\n        return details;\r\n      }\r\n    }\r\n\r\n    function peg$computeLocation(startPos, endPos) {\r\n      var startPosDetails = peg$computePosDetails(startPos),\r\n          endPosDetails   = peg$computePosDetails(endPos);\r\n\r\n      return {\r\n        start: {\r\n          offset: startPos,\r\n          line:   startPosDetails.line,\r\n          column: startPosDetails.column\r\n        },\r\n        end: {\r\n          offset: endPos,\r\n          line:   endPosDetails.line,\r\n          column: endPosDetails.column\r\n        }\r\n      };\r\n    }\r\n\r\n    function peg$fail(expected) {\r\n      if (peg$currPos < peg$maxFailPos) { return; }\r\n\r\n      if (peg$currPos > peg$maxFailPos) {\r\n        peg$maxFailPos = peg$currPos;\r\n        peg$maxFailExpected = [];\r\n      }\r\n\r\n      peg$maxFailExpected.push(expected);\r\n    }\r\n\r\n    function peg$buildSimpleError(message, location) {\r\n      return new peg$SyntaxError(message, null, null, location);\r\n    }\r\n\r\n    function peg$buildStructuredError(expected, found, location) {\r\n      return new peg$SyntaxError(\r\n        peg$SyntaxError.buildMessage(expected, found),\r\n        expected,\r\n        found,\r\n        location\r\n      );\r\n    }\r\n\r\n    function peg$parsestart() {\r\n      var s0, s1;\r\n\r\n      s0 = [];\r\n      s1 = peg$parsebcv_hyphen_range();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parsesequence();\r\n        if (s1 === peg$FAILED) {\r\n          s1 = peg$parsecb_range();\r\n          if (s1 === peg$FAILED) {\r\n            s1 = peg$parserange();\r\n            if (s1 === peg$FAILED) {\r\n              s1 = peg$parseff();\r\n              if (s1 === peg$FAILED) {\r\n                s1 = peg$parsebcv_comma();\r\n                if (s1 === peg$FAILED) {\r\n                  s1 = peg$parsebc_title();\r\n                  if (s1 === peg$FAILED) {\r\n                    s1 = peg$parseps151_bcv();\r\n                    if (s1 === peg$FAILED) {\r\n                      s1 = peg$parsebcv();\r\n                      if (s1 === peg$FAILED) {\r\n                        s1 = peg$parsebcv_weak();\r\n                        if (s1 === peg$FAILED) {\r\n                          s1 = peg$parseps151_bc();\r\n                          if (s1 === peg$FAILED) {\r\n                            s1 = peg$parsebc();\r\n                            if (s1 === peg$FAILED) {\r\n                              s1 = peg$parsecv_psalm();\r\n                              if (s1 === peg$FAILED) {\r\n                                s1 = peg$parsebv();\r\n                                if (s1 === peg$FAILED) {\r\n                                  s1 = peg$parsec_psalm();\r\n                                  if (s1 === peg$FAILED) {\r\n                                    s1 = peg$parseb();\r\n                                    if (s1 === peg$FAILED) {\r\n                                      s1 = peg$parsecbv();\r\n                                      if (s1 === peg$FAILED) {\r\n                                        s1 = peg$parsecbv_ordinal();\r\n                                        if (s1 === peg$FAILED) {\r\n                                          s1 = peg$parsecb();\r\n                                          if (s1 === peg$FAILED) {\r\n                                            s1 = peg$parsecb_ordinal();\r\n                                            if (s1 === peg$FAILED) {\r\n                                              s1 = peg$parsetranslation_sequence_enclosed();\r\n                                              if (s1 === peg$FAILED) {\r\n                                                s1 = peg$parsetranslation_sequence();\r\n                                                if (s1 === peg$FAILED) {\r\n                                                  s1 = peg$parsesequence_sep();\r\n                                                  if (s1 === peg$FAILED) {\r\n                                                    s1 = peg$parsec_title();\r\n                                                    if (s1 === peg$FAILED) {\r\n                                                      s1 = peg$parseinteger_title();\r\n                                                      if (s1 === peg$FAILED) {\r\n                                                        s1 = peg$parsecv();\r\n                                                        if (s1 === peg$FAILED) {\r\n                                                          s1 = peg$parsecv_weak();\r\n                                                          if (s1 === peg$FAILED) {\r\n                                                            s1 = peg$parsev_letter();\r\n                                                            if (s1 === peg$FAILED) {\r\n                                                              s1 = peg$parseinteger();\r\n                                                              if (s1 === peg$FAILED) {\r\n                                                                s1 = peg$parsec();\r\n                                                                if (s1 === peg$FAILED) {\r\n                                                                  s1 = peg$parsev();\r\n                                                                  if (s1 === peg$FAILED) {\r\n                                                                    s1 = peg$parseword();\r\n                                                                    if (s1 === peg$FAILED) {\r\n                                                                      s1 = peg$parseword_parenthesis();\r\n                                                                      if (s1 === peg$FAILED) {\r\n                                                                        s1 = peg$parsecontext();\r\n                                                                      }\r\n                                                                    }\r\n                                                                  }\r\n                                                                }\r\n                                                              }\r\n                                                            }\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                    }\r\n                                                  }\r\n                                                }\r\n                                              }\r\n                                            }\r\n                                          }\r\n                                        }\r\n                                      }\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        while (s1 !== peg$FAILED) {\r\n          s0.push(s1);\r\n          s1 = peg$parsebcv_hyphen_range();\r\n          if (s1 === peg$FAILED) {\r\n            s1 = peg$parsesequence();\r\n            if (s1 === peg$FAILED) {\r\n              s1 = peg$parsecb_range();\r\n              if (s1 === peg$FAILED) {\r\n                s1 = peg$parserange();\r\n                if (s1 === peg$FAILED) {\r\n                  s1 = peg$parseff();\r\n                  if (s1 === peg$FAILED) {\r\n                    s1 = peg$parsebcv_comma();\r\n                    if (s1 === peg$FAILED) {\r\n                      s1 = peg$parsebc_title();\r\n                      if (s1 === peg$FAILED) {\r\n                        s1 = peg$parseps151_bcv();\r\n                        if (s1 === peg$FAILED) {\r\n                          s1 = peg$parsebcv();\r\n                          if (s1 === peg$FAILED) {\r\n                            s1 = peg$parsebcv_weak();\r\n                            if (s1 === peg$FAILED) {\r\n                              s1 = peg$parseps151_bc();\r\n                              if (s1 === peg$FAILED) {\r\n                                s1 = peg$parsebc();\r\n                                if (s1 === peg$FAILED) {\r\n                                  s1 = peg$parsecv_psalm();\r\n                                  if (s1 === peg$FAILED) {\r\n                                    s1 = peg$parsebv();\r\n                                    if (s1 === peg$FAILED) {\r\n                                      s1 = peg$parsec_psalm();\r\n                                      if (s1 === peg$FAILED) {\r\n                                        s1 = peg$parseb();\r\n                                        if (s1 === peg$FAILED) {\r\n                                          s1 = peg$parsecbv();\r\n                                          if (s1 === peg$FAILED) {\r\n                                            s1 = peg$parsecbv_ordinal();\r\n                                            if (s1 === peg$FAILED) {\r\n                                              s1 = peg$parsecb();\r\n                                              if (s1 === peg$FAILED) {\r\n                                                s1 = peg$parsecb_ordinal();\r\n                                                if (s1 === peg$FAILED) {\r\n                                                  s1 = peg$parsetranslation_sequence_enclosed();\r\n                                                  if (s1 === peg$FAILED) {\r\n                                                    s1 = peg$parsetranslation_sequence();\r\n                                                    if (s1 === peg$FAILED) {\r\n                                                      s1 = peg$parsesequence_sep();\r\n                                                      if (s1 === peg$FAILED) {\r\n                                                        s1 = peg$parsec_title();\r\n                                                        if (s1 === peg$FAILED) {\r\n                                                          s1 = peg$parseinteger_title();\r\n                                                          if (s1 === peg$FAILED) {\r\n                                                            s1 = peg$parsecv();\r\n                                                            if (s1 === peg$FAILED) {\r\n                                                              s1 = peg$parsecv_weak();\r\n                                                              if (s1 === peg$FAILED) {\r\n                                                                s1 = peg$parsev_letter();\r\n                                                                if (s1 === peg$FAILED) {\r\n                                                                  s1 = peg$parseinteger();\r\n                                                                  if (s1 === peg$FAILED) {\r\n                                                                    s1 = peg$parsec();\r\n                                                                    if (s1 === peg$FAILED) {\r\n                                                                      s1 = peg$parsev();\r\n                                                                      if (s1 === peg$FAILED) {\r\n                                                                        s1 = peg$parseword();\r\n                                                                        if (s1 === peg$FAILED) {\r\n                                                                          s1 = peg$parseword_parenthesis();\r\n                                                                          if (s1 === peg$FAILED) {\r\n                                                                            s1 = peg$parsecontext();\r\n                                                                          }\r\n                                                                        }\r\n                                                                      }\r\n                                                                    }\r\n                                                                  }\r\n                                                                }\r\n                                                              }\r\n                                                            }\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                    }\r\n                                                  }\r\n                                                }\r\n                                              }\r\n                                            }\r\n                                          }\r\n                                        }\r\n                                      }\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsesequence() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsecb_range();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parsebcv_hyphen_range();\r\n        if (s1 === peg$FAILED) {\r\n          s1 = peg$parserange();\r\n          if (s1 === peg$FAILED) {\r\n            s1 = peg$parseff();\r\n            if (s1 === peg$FAILED) {\r\n              s1 = peg$parsebcv_comma();\r\n              if (s1 === peg$FAILED) {\r\n                s1 = peg$parsebc_title();\r\n                if (s1 === peg$FAILED) {\r\n                  s1 = peg$parseps151_bcv();\r\n                  if (s1 === peg$FAILED) {\r\n                    s1 = peg$parsebcv();\r\n                    if (s1 === peg$FAILED) {\r\n                      s1 = peg$parsebcv_weak();\r\n                      if (s1 === peg$FAILED) {\r\n                        s1 = peg$parseps151_bc();\r\n                        if (s1 === peg$FAILED) {\r\n                          s1 = peg$parsebc();\r\n                          if (s1 === peg$FAILED) {\r\n                            s1 = peg$parsecv_psalm();\r\n                            if (s1 === peg$FAILED) {\r\n                              s1 = peg$parsebv();\r\n                              if (s1 === peg$FAILED) {\r\n                                s1 = peg$parsec_psalm();\r\n                                if (s1 === peg$FAILED) {\r\n                                  s1 = peg$parseb();\r\n                                  if (s1 === peg$FAILED) {\r\n                                    s1 = peg$parsecbv();\r\n                                    if (s1 === peg$FAILED) {\r\n                                      s1 = peg$parsecbv_ordinal();\r\n                                      if (s1 === peg$FAILED) {\r\n                                        s1 = peg$parsecb();\r\n                                        if (s1 === peg$FAILED) {\r\n                                          s1 = peg$parsecb_ordinal();\r\n                                          if (s1 === peg$FAILED) {\r\n                                            s1 = peg$parsecontext();\r\n                                          }\r\n                                        }\r\n                                      }\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        s3 = peg$currPos;\r\n        s4 = peg$parsesequence_sep();\r\n        if (s4 === peg$FAILED) {\r\n          s4 = null;\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parsesequence_post();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          while (s3 !== peg$FAILED) {\r\n            s2.push(s3);\r\n            s3 = peg$currPos;\r\n            s4 = peg$parsesequence_sep();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = null;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parsesequence_post();\r\n              if (s5 !== peg$FAILED) {\r\n                s4 = [s4, s5];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          }\r\n        } else {\r\n          s2 = peg$FAILED;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c0(s1, s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsesequence_post_enclosed() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 40) {\r\n        s1 = peg$c1;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c2); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsesp();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsesequence_sep();\r\n          if (s3 === peg$FAILED) {\r\n            s3 = null;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsesequence_post();\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = [];\r\n              s6 = peg$currPos;\r\n              s7 = peg$parsesequence_sep();\r\n              if (s7 === peg$FAILED) {\r\n                s7 = null;\r\n              }\r\n              if (s7 !== peg$FAILED) {\r\n                s8 = peg$parsesequence_post();\r\n                if (s8 !== peg$FAILED) {\r\n                  s7 = [s7, s8];\r\n                  s6 = s7;\r\n                } else {\r\n                  peg$currPos = s6;\r\n                  s6 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s6;\r\n                s6 = peg$FAILED;\r\n              }\r\n              while (s6 !== peg$FAILED) {\r\n                s5.push(s6);\r\n                s6 = peg$currPos;\r\n                s7 = peg$parsesequence_sep();\r\n                if (s7 === peg$FAILED) {\r\n                  s7 = null;\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parsesequence_post();\r\n                  if (s8 !== peg$FAILED) {\r\n                    s7 = [s7, s8];\r\n                    s6 = s7;\r\n                  } else {\r\n                    peg$currPos = s6;\r\n                    s6 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s6;\r\n                  s6 = peg$FAILED;\r\n                }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parsesp();\r\n                if (s6 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 41) {\r\n                    s7 = peg$c3;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s7 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c4); }\r\n                  }\r\n                  if (s7 !== peg$FAILED) {\r\n                    peg$savedPos = s0;\r\n                    s1 = peg$c5(s4, s5);\r\n                    s0 = s1;\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsesequence_post() {\r\n      var s0;\r\n\r\n      s0 = peg$parsesequence_post_enclosed();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parsecb_range();\r\n        if (s0 === peg$FAILED) {\r\n          s0 = peg$parsebcv_hyphen_range();\r\n          if (s0 === peg$FAILED) {\r\n            s0 = peg$parserange();\r\n            if (s0 === peg$FAILED) {\r\n              s0 = peg$parseff();\r\n              if (s0 === peg$FAILED) {\r\n                s0 = peg$parsebcv_comma();\r\n                if (s0 === peg$FAILED) {\r\n                  s0 = peg$parsebc_title();\r\n                  if (s0 === peg$FAILED) {\r\n                    s0 = peg$parseps151_bcv();\r\n                    if (s0 === peg$FAILED) {\r\n                      s0 = peg$parsebcv();\r\n                      if (s0 === peg$FAILED) {\r\n                        s0 = peg$parsebcv_weak();\r\n                        if (s0 === peg$FAILED) {\r\n                          s0 = peg$parseps151_bc();\r\n                          if (s0 === peg$FAILED) {\r\n                            s0 = peg$parsebc();\r\n                            if (s0 === peg$FAILED) {\r\n                              s0 = peg$parsecv_psalm();\r\n                              if (s0 === peg$FAILED) {\r\n                                s0 = peg$parsebv();\r\n                                if (s0 === peg$FAILED) {\r\n                                  s0 = peg$parsec_psalm();\r\n                                  if (s0 === peg$FAILED) {\r\n                                    s0 = peg$parseb();\r\n                                    if (s0 === peg$FAILED) {\r\n                                      s0 = peg$parsecbv();\r\n                                      if (s0 === peg$FAILED) {\r\n                                        s0 = peg$parsecbv_ordinal();\r\n                                        if (s0 === peg$FAILED) {\r\n                                          s0 = peg$parsecb();\r\n                                          if (s0 === peg$FAILED) {\r\n                                            s0 = peg$parsecb_ordinal();\r\n                                            if (s0 === peg$FAILED) {\r\n                                              s0 = peg$parsec_title();\r\n                                              if (s0 === peg$FAILED) {\r\n                                                s0 = peg$parseinteger_title();\r\n                                                if (s0 === peg$FAILED) {\r\n                                                  s0 = peg$parsecv();\r\n                                                  if (s0 === peg$FAILED) {\r\n                                                    s0 = peg$parsecv_weak();\r\n                                                    if (s0 === peg$FAILED) {\r\n                                                      s0 = peg$parsev_letter();\r\n                                                      if (s0 === peg$FAILED) {\r\n                                                        s0 = peg$parseinteger();\r\n                                                        if (s0 === peg$FAILED) {\r\n                                                          s0 = peg$parsec();\r\n                                                          if (s0 === peg$FAILED) {\r\n                                                            s0 = peg$parsev();\r\n                                                          }\r\n                                                        }\r\n                                                      }\r\n                                                    }\r\n                                                  }\r\n                                                }\r\n                                              }\r\n                                            }\r\n                                          }\r\n                                        }\r\n                                      }\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parserange() {\r\n      var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsebcv_comma();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parsebc_title();\r\n        if (s1 === peg$FAILED) {\r\n          s1 = peg$parseps151_bcv();\r\n          if (s1 === peg$FAILED) {\r\n            s1 = peg$parsebcv();\r\n            if (s1 === peg$FAILED) {\r\n              s1 = peg$parsebcv_weak();\r\n              if (s1 === peg$FAILED) {\r\n                s1 = peg$parseps151_bc();\r\n                if (s1 === peg$FAILED) {\r\n                  s1 = peg$parsebc();\r\n                  if (s1 === peg$FAILED) {\r\n                    s1 = peg$parsecv_psalm();\r\n                    if (s1 === peg$FAILED) {\r\n                      s1 = peg$parsebv();\r\n                      if (s1 === peg$FAILED) {\r\n                        s1 = peg$currPos;\r\n                        s2 = peg$parseb();\r\n                        if (s2 !== peg$FAILED) {\r\n                          s3 = peg$currPos;\r\n                          peg$silentFails++;\r\n                          s4 = peg$currPos;\r\n                          s5 = peg$parserange_sep();\r\n                          if (s5 !== peg$FAILED) {\r\n                            s6 = peg$parsebcv_comma();\r\n                            if (s6 === peg$FAILED) {\r\n                              s6 = peg$parsebc_title();\r\n                              if (s6 === peg$FAILED) {\r\n                                s6 = peg$parseps151_bcv();\r\n                                if (s6 === peg$FAILED) {\r\n                                  s6 = peg$parsebcv();\r\n                                  if (s6 === peg$FAILED) {\r\n                                    s6 = peg$parsebcv_weak();\r\n                                    if (s6 === peg$FAILED) {\r\n                                      s6 = peg$parseps151_bc();\r\n                                      if (s6 === peg$FAILED) {\r\n                                        s6 = peg$parsebc();\r\n                                        if (s6 === peg$FAILED) {\r\n                                          s6 = peg$parsebv();\r\n                                          if (s6 === peg$FAILED) {\r\n                                            s6 = peg$parseb();\r\n                                          }\r\n                                        }\r\n                                      }\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                            }\r\n                            if (s6 !== peg$FAILED) {\r\n                              s5 = [s5, s6];\r\n                              s4 = s5;\r\n                            } else {\r\n                              peg$currPos = s4;\r\n                              s4 = peg$FAILED;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s4;\r\n                            s4 = peg$FAILED;\r\n                          }\r\n                          peg$silentFails--;\r\n                          if (s4 !== peg$FAILED) {\r\n                            peg$currPos = s3;\r\n                            s3 = void 0;\r\n                          } else {\r\n                            s3 = peg$FAILED;\r\n                          }\r\n                          if (s3 !== peg$FAILED) {\r\n                            s2 = [s2, s3];\r\n                            s1 = s2;\r\n                          } else {\r\n                            peg$currPos = s1;\r\n                            s1 = peg$FAILED;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s1;\r\n                          s1 = peg$FAILED;\r\n                        }\r\n                        if (s1 === peg$FAILED) {\r\n                          s1 = peg$parsecbv();\r\n                          if (s1 === peg$FAILED) {\r\n                            s1 = peg$parsecbv_ordinal();\r\n                            if (s1 === peg$FAILED) {\r\n                              s1 = peg$parsec_psalm();\r\n                              if (s1 === peg$FAILED) {\r\n                                s1 = peg$parsecb();\r\n                                if (s1 === peg$FAILED) {\r\n                                  s1 = peg$parsecb_ordinal();\r\n                                  if (s1 === peg$FAILED) {\r\n                                    s1 = peg$parsec_title();\r\n                                    if (s1 === peg$FAILED) {\r\n                                      s1 = peg$parseinteger_title();\r\n                                      if (s1 === peg$FAILED) {\r\n                                        s1 = peg$parsecv();\r\n                                        if (s1 === peg$FAILED) {\r\n                                          s1 = peg$parsecv_weak();\r\n                                          if (s1 === peg$FAILED) {\r\n                                            s1 = peg$parsev_letter();\r\n                                            if (s1 === peg$FAILED) {\r\n                                              s1 = peg$parseinteger();\r\n                                              if (s1 === peg$FAILED) {\r\n                                                s1 = peg$parsec();\r\n                                                if (s1 === peg$FAILED) {\r\n                                                  s1 = peg$parsev();\r\n                                                }\r\n                                              }\r\n                                            }\r\n                                          }\r\n                                        }\r\n                                      }\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parserange_sep();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseff();\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$parsebcv_comma();\r\n            if (s3 === peg$FAILED) {\r\n              s3 = peg$parsebc_title();\r\n              if (s3 === peg$FAILED) {\r\n                s3 = peg$parseps151_bcv();\r\n                if (s3 === peg$FAILED) {\r\n                  s3 = peg$parsebcv();\r\n                  if (s3 === peg$FAILED) {\r\n                    s3 = peg$parsebcv_weak();\r\n                    if (s3 === peg$FAILED) {\r\n                      s3 = peg$parseps151_bc();\r\n                      if (s3 === peg$FAILED) {\r\n                        s3 = peg$parsebc();\r\n                        if (s3 === peg$FAILED) {\r\n                          s3 = peg$parsecv_psalm();\r\n                          if (s3 === peg$FAILED) {\r\n                            s3 = peg$parsebv();\r\n                            if (s3 === peg$FAILED) {\r\n                              s3 = peg$parseb();\r\n                              if (s3 === peg$FAILED) {\r\n                                s3 = peg$parsecbv();\r\n                                if (s3 === peg$FAILED) {\r\n                                  s3 = peg$parsecbv_ordinal();\r\n                                  if (s3 === peg$FAILED) {\r\n                                    s3 = peg$parsec_psalm();\r\n                                    if (s3 === peg$FAILED) {\r\n                                      s3 = peg$parsecb();\r\n                                      if (s3 === peg$FAILED) {\r\n                                        s3 = peg$parsecb_ordinal();\r\n                                        if (s3 === peg$FAILED) {\r\n                                          s3 = peg$parsec_title();\r\n                                          if (s3 === peg$FAILED) {\r\n                                            s3 = peg$parseinteger_title();\r\n                                            if (s3 === peg$FAILED) {\r\n                                              s3 = peg$parsecv();\r\n                                              if (s3 === peg$FAILED) {\r\n                                                s3 = peg$parsev_letter();\r\n                                                if (s3 === peg$FAILED) {\r\n                                                  s3 = peg$parseinteger();\r\n                                                  if (s3 === peg$FAILED) {\r\n                                                    s3 = peg$parsecv_weak();\r\n                                                    if (s3 === peg$FAILED) {\r\n                                                      s3 = peg$parsec();\r\n                                                      if (s3 === peg$FAILED) {\r\n                                                        s3 = peg$parsev();\r\n                                                      }\r\n                                                    }\r\n                                                  }\r\n                                                }\r\n                                              }\r\n                                            }\r\n                                          }\r\n                                        }\r\n                                      }\r\n                                    }\r\n                                  }\r\n                                }\r\n                              }\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c6(s1, s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseb() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 31) {\r\n        s1 = peg$c7;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parseany_integer();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          if (input.charCodeAt(peg$currPos) === 47) {\r\n            s4 = peg$c9;\r\n            peg$currPos++;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c10); }\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            if (peg$c11.test(input.charAt(peg$currPos))) {\r\n              s5 = input.charAt(peg$currPos);\r\n              peg$currPos++;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c12); }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s4 = [s4, s5];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 === peg$FAILED) {\r\n            s3 = null;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 31) {\r\n              s4 = peg$c7;\r\n              peg$currPos++;\r\n            } else {\r\n              s4 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c13(s2);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsebc() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseb();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$currPos;\r\n        s3 = peg$parsev_explicit();\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$currPos;\r\n          peg$silentFails++;\r\n          s5 = peg$currPos;\r\n          s6 = peg$parsec();\r\n          if (s6 !== peg$FAILED) {\r\n            s7 = peg$parsecv_sep();\r\n            if (s7 !== peg$FAILED) {\r\n              s8 = peg$parsev();\r\n              if (s8 !== peg$FAILED) {\r\n                s6 = [s6, s7, s8];\r\n                s5 = s6;\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s5;\r\n              s5 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s5;\r\n            s5 = peg$FAILED;\r\n          }\r\n          peg$silentFails--;\r\n          if (s5 !== peg$FAILED) {\r\n            peg$currPos = s4;\r\n            s4 = void 0;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s3 = [s3, s4];\r\n            s2 = s3;\r\n          } else {\r\n            peg$currPos = s2;\r\n            s2 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s2;\r\n          s2 = peg$FAILED;\r\n        }\r\n        if (s2 === peg$FAILED) {\r\n          s2 = [];\r\n          s3 = peg$parsecv_sep();\r\n          if (s3 !== peg$FAILED) {\r\n            while (s3 !== peg$FAILED) {\r\n              s2.push(s3);\r\n              s3 = peg$parsecv_sep();\r\n            }\r\n          } else {\r\n            s2 = peg$FAILED;\r\n          }\r\n          if (s2 === peg$FAILED) {\r\n            s2 = [];\r\n            s3 = peg$parsecv_sep_weak();\r\n            if (s3 !== peg$FAILED) {\r\n              while (s3 !== peg$FAILED) {\r\n                s2.push(s3);\r\n                s3 = peg$parsecv_sep_weak();\r\n              }\r\n            } else {\r\n              s2 = peg$FAILED;\r\n            }\r\n            if (s2 === peg$FAILED) {\r\n              s2 = [];\r\n              s3 = peg$parserange_sep();\r\n              if (s3 !== peg$FAILED) {\r\n                while (s3 !== peg$FAILED) {\r\n                  s2.push(s3);\r\n                  s3 = peg$parserange_sep();\r\n                }\r\n              } else {\r\n                s2 = peg$FAILED;\r\n              }\r\n              if (s2 === peg$FAILED) {\r\n                s2 = peg$parsesp();\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsec();\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c14(s1, s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsebc_comma() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseb();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsesp();\r\n        if (s2 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 44) {\r\n            s3 = peg$c15;\r\n            peg$currPos++;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c16); }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsesp();\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parsec();\r\n              if (s5 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c14(s1, s5);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsebc_title() {\r\n      var s0, s1, s2;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseps151_bc();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parsebc();\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsetitle();\r\n        if (s2 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c17(s1, s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsebcv() {\r\n      var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseps151_bc();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parsebc();\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$currPos;\r\n        peg$silentFails++;\r\n        s3 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 46) {\r\n          s4 = peg$c18;\r\n          peg$currPos++;\r\n        } else {\r\n          s4 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parsev_explicit();\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parsev();\r\n            if (s6 !== peg$FAILED) {\r\n              s4 = [s4, s5, s6];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 === peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          s4 = peg$parsesequence_sep();\r\n          if (s4 === peg$FAILED) {\r\n            s4 = null;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parsev_explicit();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parsecv();\r\n              if (s6 !== peg$FAILED) {\r\n                s4 = [s4, s5, s6];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        }\r\n        peg$silentFails--;\r\n        if (s3 === peg$FAILED) {\r\n          s2 = void 0;\r\n        } else {\r\n          peg$currPos = s2;\r\n          s2 = peg$FAILED;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          s4 = peg$parsecv_sep();\r\n          if (s4 === peg$FAILED) {\r\n            s4 = peg$parsesequence_sep();\r\n          }\r\n          if (s4 === peg$FAILED) {\r\n            s4 = null;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parsev_explicit();\r\n            if (s5 !== peg$FAILED) {\r\n              s4 = [s4, s5];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$parsecv_sep();\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsev_letter();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$parsev();\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c20(s1, s4);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsebcv_weak() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseps151_bc();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parsebc();\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsecv_sep_weak();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsev_letter();\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$parsev();\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$currPos;\r\n            peg$silentFails++;\r\n            s5 = peg$currPos;\r\n            s6 = peg$parsecv_sep();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parsev();\r\n              if (s7 !== peg$FAILED) {\r\n                s6 = [s6, s7];\r\n                s5 = s6;\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s5;\r\n              s5 = peg$FAILED;\r\n            }\r\n            peg$silentFails--;\r\n            if (s5 === peg$FAILED) {\r\n              s4 = void 0;\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$FAILED;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c20(s1, s3);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsebcv_comma() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsebc_comma();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsesp();\r\n        if (s2 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 44) {\r\n            s3 = peg$c15;\r\n            peg$currPos++;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c16); }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsesp();\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parsev_letter();\r\n              if (s5 === peg$FAILED) {\r\n                s5 = peg$parsev();\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$currPos;\r\n                peg$silentFails++;\r\n                s7 = peg$currPos;\r\n                s8 = peg$parsecv_sep();\r\n                if (s8 !== peg$FAILED) {\r\n                  s9 = peg$parsev();\r\n                  if (s9 !== peg$FAILED) {\r\n                    s8 = [s8, s9];\r\n                    s7 = s8;\r\n                  } else {\r\n                    peg$currPos = s7;\r\n                    s7 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s7;\r\n                  s7 = peg$FAILED;\r\n                }\r\n                peg$silentFails--;\r\n                if (s7 === peg$FAILED) {\r\n                  s6 = void 0;\r\n                } else {\r\n                  peg$currPos = s6;\r\n                  s6 = peg$FAILED;\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  peg$savedPos = s0;\r\n                  s1 = peg$c20(s1, s5);\r\n                  s0 = s1;\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsebcv_hyphen_range() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseb();\r\n      if (s1 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 45) {\r\n          s2 = peg$c21;\r\n          peg$currPos++;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c22); }\r\n        }\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$parsespace();\r\n        }\r\n        if (s2 === peg$FAILED) {\r\n          s2 = null;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsec();\r\n          if (s3 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 45) {\r\n              s4 = peg$c21;\r\n              peg$currPos++;\r\n            } else {\r\n              s4 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c22); }\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parsev();\r\n              if (s5 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 45) {\r\n                  s6 = peg$c21;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s6 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c22); }\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  s7 = peg$parsev();\r\n                  if (s7 !== peg$FAILED) {\r\n                    peg$savedPos = s0;\r\n                    s1 = peg$c23(s1, s3, s5, s7);\r\n                    s0 = s1;\r\n                  } else {\r\n                    peg$currPos = s0;\r\n                    s0 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsebv() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseb();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        s3 = peg$parsecv_sep();\r\n        if (s3 !== peg$FAILED) {\r\n          while (s3 !== peg$FAILED) {\r\n            s2.push(s3);\r\n            s3 = peg$parsecv_sep();\r\n          }\r\n        } else {\r\n          s2 = peg$FAILED;\r\n        }\r\n        if (s2 === peg$FAILED) {\r\n          s2 = [];\r\n          s3 = peg$parsecv_sep_weak();\r\n          if (s3 !== peg$FAILED) {\r\n            while (s3 !== peg$FAILED) {\r\n              s2.push(s3);\r\n              s3 = peg$parsecv_sep_weak();\r\n            }\r\n          } else {\r\n            s2 = peg$FAILED;\r\n          }\r\n          if (s2 === peg$FAILED) {\r\n            s2 = [];\r\n            s3 = peg$parserange_sep();\r\n            if (s3 !== peg$FAILED) {\r\n              while (s3 !== peg$FAILED) {\r\n                s2.push(s3);\r\n                s3 = peg$parserange_sep();\r\n              }\r\n            } else {\r\n              s2 = peg$FAILED;\r\n            }\r\n            if (s2 === peg$FAILED) {\r\n              s2 = peg$currPos;\r\n              s3 = [];\r\n              s4 = peg$parsesequence_sep();\r\n              if (s4 !== peg$FAILED) {\r\n                while (s4 !== peg$FAILED) {\r\n                  s3.push(s4);\r\n                  s4 = peg$parsesequence_sep();\r\n                }\r\n              } else {\r\n                s3 = peg$FAILED;\r\n              }\r\n              if (s3 !== peg$FAILED) {\r\n                s4 = peg$currPos;\r\n                peg$silentFails++;\r\n                s5 = peg$parsev_explicit();\r\n                peg$silentFails--;\r\n                if (s5 !== peg$FAILED) {\r\n                  peg$currPos = s4;\r\n                  s4 = void 0;\r\n                } else {\r\n                  s4 = peg$FAILED;\r\n                }\r\n                if (s4 !== peg$FAILED) {\r\n                  s3 = [s3, s4];\r\n                  s2 = s3;\r\n                } else {\r\n                  peg$currPos = s2;\r\n                  s2 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s2;\r\n                s2 = peg$FAILED;\r\n              }\r\n              if (s2 === peg$FAILED) {\r\n                s2 = peg$parsesp();\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsev_letter();\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$parsev();\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c24(s1, s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsecb() {\r\n      var s0, s1, s2, s3, s4;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsec_explicit();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsec();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsein_book_of();\r\n          if (s3 === peg$FAILED) {\r\n            s3 = null;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parseb();\r\n            if (s4 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c25(s2, s4);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsecb_range() {\r\n      var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsec_explicit();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsec();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parserange_sep();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsec();\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parsein_book_of();\r\n              if (s5 === peg$FAILED) {\r\n                s5 = null;\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parseb();\r\n                if (s6 !== peg$FAILED) {\r\n                  peg$savedPos = s0;\r\n                  s1 = peg$c26(s2, s4, s6);\r\n                  s0 = s1;\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsecbv() {\r\n      var s0, s1, s2, s3, s4;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsecb();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsesequence_sep();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = null;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsev_explicit();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsev();\r\n            if (s4 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c20(s1, s4);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsecb_ordinal() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsec();\r\n      if (s1 !== peg$FAILED) {\r\n        if (input.substr(peg$currPos, 2) === peg$c27) {\r\n          s2 = peg$c27;\r\n          peg$currPos += 2;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c28); }\r\n        }\r\n        if (s2 === peg$FAILED) {\r\n          if (input.substr(peg$currPos, 2) === peg$c29) {\r\n            s2 = peg$c29;\r\n            peg$currPos += 2;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c30); }\r\n          }\r\n          if (s2 === peg$FAILED) {\r\n            if (input.substr(peg$currPos, 2) === peg$c31) {\r\n              s2 = peg$c31;\r\n              peg$currPos += 2;\r\n            } else {\r\n              s2 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c32); }\r\n            }\r\n          }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsec_explicit();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsein_book_of();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = null;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parseb();\r\n              if (s5 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c25(s1, s5);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsecbv_ordinal() {\r\n      var s0, s1, s2, s3, s4;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsecb_ordinal();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsesequence_sep();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = null;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsev_explicit();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsev();\r\n            if (s4 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c20(s1, s4);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsec_psalm() {\r\n      var s0, s1, s2, s3;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 31) {\r\n        s1 = peg$c7;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parseany_integer();\r\n        if (s2 !== peg$FAILED) {\r\n          if (input.substr(peg$currPos, 3) === peg$c33) {\r\n            s3 = peg$c33;\r\n            peg$currPos += 3;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c35(s2);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsecv_psalm() {\r\n      var s0, s1, s2, s3, s4;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsec_psalm();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsesequence_sep();\r\n        if (s2 === peg$FAILED) {\r\n          s2 = null;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsev_explicit();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsev();\r\n            if (s4 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c36(s1, s4);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsec_title() {\r\n      var s0, s1, s2, s3;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsec_explicit();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsec();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsetitle();\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c37(s2, s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsecv() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsev_explicit();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = null;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsec();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          peg$silentFails++;\r\n          s4 = peg$currPos;\r\n          if (input.charCodeAt(peg$currPos) === 46) {\r\n            s5 = peg$c18;\r\n            peg$currPos++;\r\n          } else {\r\n            s5 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n          }\r\n          if (s5 !== peg$FAILED) {\r\n            s6 = peg$parsev_explicit();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parsev();\r\n              if (s7 !== peg$FAILED) {\r\n                s5 = [s5, s6, s7];\r\n                s4 = s5;\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s4;\r\n            s4 = peg$FAILED;\r\n          }\r\n          peg$silentFails--;\r\n          if (s4 === peg$FAILED) {\r\n            s3 = void 0;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$currPos;\r\n            s5 = peg$parsecv_sep();\r\n            if (s5 === peg$FAILED) {\r\n              s5 = null;\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parsev_explicit();\r\n              if (s6 !== peg$FAILED) {\r\n                s5 = [s5, s6];\r\n                s4 = s5;\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$FAILED;\r\n            }\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$parsecv_sep();\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parsev_letter();\r\n              if (s5 === peg$FAILED) {\r\n                s5 = peg$parsev();\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c38(s2, s5);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsecv_weak() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsec();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsecv_sep_weak();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsev_letter();\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$parsev();\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$currPos;\r\n            peg$silentFails++;\r\n            s5 = peg$currPos;\r\n            s6 = peg$parsecv_sep();\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parsev();\r\n              if (s7 !== peg$FAILED) {\r\n                s6 = [s6, s7];\r\n                s5 = s6;\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s5;\r\n              s5 = peg$FAILED;\r\n            }\r\n            peg$silentFails--;\r\n            if (s5 === peg$FAILED) {\r\n              s4 = void 0;\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$FAILED;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c38(s1, s3);\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsec() {\r\n      var s0, s1, s2;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsec_explicit();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = null;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parseinteger();\r\n        if (s2 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c39(s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseff() {\r\n      var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsebcv();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parsebcv_weak();\r\n        if (s1 === peg$FAILED) {\r\n          s1 = peg$parsebc();\r\n          if (s1 === peg$FAILED) {\r\n            s1 = peg$parsebv();\r\n            if (s1 === peg$FAILED) {\r\n              s1 = peg$parsecv();\r\n              if (s1 === peg$FAILED) {\r\n                s1 = peg$parsecv_weak();\r\n                if (s1 === peg$FAILED) {\r\n                  s1 = peg$parseinteger();\r\n                  if (s1 === peg$FAILED) {\r\n                    s1 = peg$parsec();\r\n                    if (s1 === peg$FAILED) {\r\n                      s1 = peg$parsev();\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsesp();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          if (input.substr(peg$currPos, 2) === peg$c40) {\r\n            s4 = peg$c40;\r\n            peg$currPos += 2;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c41); }\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$currPos;\r\n            peg$silentFails++;\r\n            if (peg$c42.test(input.charAt(peg$currPos))) {\r\n              s6 = input.charAt(peg$currPos);\r\n              peg$currPos++;\r\n            } else {\r\n              s6 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n            }\r\n            peg$silentFails--;\r\n            if (s6 === peg$FAILED) {\r\n              s5 = void 0;\r\n            } else {\r\n              peg$currPos = s5;\r\n              s5 = peg$FAILED;\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s4 = [s4, s5];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$currPos;\r\n            if (input.charCodeAt(peg$currPos) === 102) {\r\n              s4 = peg$c44;\r\n              peg$currPos++;\r\n            } else {\r\n              s4 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c45); }\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$currPos;\r\n              peg$silentFails++;\r\n              if (peg$c42.test(input.charAt(peg$currPos))) {\r\n                s6 = input.charAt(peg$currPos);\r\n                peg$currPos++;\r\n              } else {\r\n                s6 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n              }\r\n              peg$silentFails--;\r\n              if (s6 === peg$FAILED) {\r\n                s5 = void 0;\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$FAILED;\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s4 = [s4, s5];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parseabbrev();\r\n            if (s4 === peg$FAILED) {\r\n              s4 = null;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$currPos;\r\n              peg$silentFails++;\r\n              if (peg$c46.test(input.charAt(peg$currPos))) {\r\n                s6 = input.charAt(peg$currPos);\r\n                peg$currPos++;\r\n              } else {\r\n                s6 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c47); }\r\n              }\r\n              peg$silentFails--;\r\n              if (s6 === peg$FAILED) {\r\n                s5 = void 0;\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$FAILED;\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                peg$savedPos = s0;\r\n                s1 = peg$c48(s1);\r\n                s0 = s1;\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseinteger_title() {\r\n      var s0, s1, s2;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseinteger();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parsetitle();\r\n        if (s2 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c49(s1, s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsecontext() {\r\n      var s0, s1, s2, s3;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 31) {\r\n        s1 = peg$c7;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parseany_integer();\r\n        if (s2 !== peg$FAILED) {\r\n          if (input.substr(peg$currPos, 3) === peg$c50) {\r\n            s3 = peg$c50;\r\n            peg$currPos += 3;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c51); }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c52(s2);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseps151_b() {\r\n      var s0, s1, s2, s3;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 31) {\r\n        s1 = peg$c7;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parseany_integer();\r\n        if (s2 !== peg$FAILED) {\r\n          if (input.substr(peg$currPos, 3) === peg$c53) {\r\n            s3 = peg$c53;\r\n            peg$currPos += 3;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c54); }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c13(s2);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseps151_bc() {\r\n      var s0, s1, s2, s3, s4;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseps151_b();\r\n      if (s1 !== peg$FAILED) {\r\n        if (input.substr(peg$currPos, 2) === peg$c55) {\r\n          s2 = peg$c55;\r\n          peg$currPos += 2;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c56); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          peg$silentFails++;\r\n          if (peg$c57.test(input.charAt(peg$currPos))) {\r\n            s4 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c58); }\r\n          }\r\n          peg$silentFails--;\r\n          if (s4 === peg$FAILED) {\r\n            s3 = void 0;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c59(s1);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseps151_bcv() {\r\n      var s0, s1, s2, s3;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parseps151_bc();\r\n      if (s1 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 46) {\r\n          s2 = peg$c18;\r\n          peg$currPos++;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parseinteger();\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c60(s1, s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsev_letter() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsev_explicit();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = null;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parseinteger();\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsesp();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$currPos;\r\n            peg$silentFails++;\r\n            s5 = peg$currPos;\r\n            if (input.substr(peg$currPos, 2) === peg$c40) {\r\n              s6 = peg$c40;\r\n              peg$currPos += 2;\r\n            } else {\r\n              s6 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c41); }\r\n            }\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$currPos;\r\n              peg$silentFails++;\r\n              if (peg$c42.test(input.charAt(peg$currPos))) {\r\n                s8 = input.charAt(peg$currPos);\r\n                peg$currPos++;\r\n              } else {\r\n                s8 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n              }\r\n              peg$silentFails--;\r\n              if (s8 === peg$FAILED) {\r\n                s7 = void 0;\r\n              } else {\r\n                peg$currPos = s7;\r\n                s7 = peg$FAILED;\r\n              }\r\n              if (s7 !== peg$FAILED) {\r\n                s6 = [s6, s7];\r\n                s5 = s6;\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s5;\r\n              s5 = peg$FAILED;\r\n            }\r\n            if (s5 === peg$FAILED) {\r\n              s5 = peg$currPos;\r\n              if (input.charCodeAt(peg$currPos) === 102) {\r\n                s6 = peg$c44;\r\n                peg$currPos++;\r\n              } else {\r\n                s6 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c45); }\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                s7 = peg$currPos;\r\n                peg$silentFails++;\r\n                if (peg$c42.test(input.charAt(peg$currPos))) {\r\n                  s8 = input.charAt(peg$currPos);\r\n                  peg$currPos++;\r\n                } else {\r\n                  s8 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c43); }\r\n                }\r\n                peg$silentFails--;\r\n                if (s8 === peg$FAILED) {\r\n                  s7 = void 0;\r\n                } else {\r\n                  peg$currPos = s7;\r\n                  s7 = peg$FAILED;\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s6 = [s6, s7];\r\n                  s5 = s6;\r\n                } else {\r\n                  peg$currPos = s5;\r\n                  s5 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$FAILED;\r\n              }\r\n            }\r\n            peg$silentFails--;\r\n            if (s5 === peg$FAILED) {\r\n              s4 = void 0;\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$FAILED;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              if (peg$c61.test(input.charAt(peg$currPos))) {\r\n                s5 = input.charAt(peg$currPos);\r\n                peg$currPos++;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c62); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$currPos;\r\n                peg$silentFails++;\r\n                if (peg$c46.test(input.charAt(peg$currPos))) {\r\n                  s7 = input.charAt(peg$currPos);\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c47); }\r\n                }\r\n                peg$silentFails--;\r\n                if (s7 === peg$FAILED) {\r\n                  s6 = void 0;\r\n                } else {\r\n                  peg$currPos = s6;\r\n                  s6 = peg$FAILED;\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  peg$savedPos = s0;\r\n                  s1 = peg$c63(s2);\r\n                  s0 = s1;\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsev() {\r\n      var s0, s1, s2;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsev_explicit();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = null;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parseinteger();\r\n        if (s2 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c63(s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsec_explicit() {\r\n      var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsesp();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$currPos;\r\n        if (input.substr(peg$currPos, 2) === peg$c64) {\r\n          s3 = peg$c64;\r\n          peg$currPos += 2;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c65); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          if (input.substr(peg$currPos, 6) === peg$c66) {\r\n            s4 = peg$c66;\r\n            peg$currPos += 6;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c67); }\r\n          }\r\n          if (s4 === peg$FAILED) {\r\n            if (input.substr(peg$currPos, 5) === peg$c68) {\r\n              s4 = peg$c68;\r\n              peg$currPos += 5;\r\n            } else {\r\n              s4 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c69); }\r\n            }\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$currPos;\r\n              if (input.substr(peg$currPos, 4) === peg$c70) {\r\n                s5 = peg$c70;\r\n                peg$currPos += 4;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c71); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parseabbrev();\r\n                if (s6 === peg$FAILED) {\r\n                  s6 = null;\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  s5 = [s5, s6];\r\n                  s4 = s5;\r\n                } else {\r\n                  peg$currPos = s4;\r\n                  s4 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$FAILED;\r\n              }\r\n              if (s4 === peg$FAILED) {\r\n                s4 = peg$currPos;\r\n                if (input.substr(peg$currPos, 3) === peg$c72) {\r\n                  s5 = peg$c72;\r\n                  peg$currPos += 3;\r\n                } else {\r\n                  s5 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c73); }\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                  s6 = peg$parseabbrev();\r\n                  if (s6 === peg$FAILED) {\r\n                    s6 = null;\r\n                  }\r\n                  if (s6 !== peg$FAILED) {\r\n                    s5 = [s5, s6];\r\n                    s4 = s5;\r\n                  } else {\r\n                    peg$currPos = s4;\r\n                    s4 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s4;\r\n                  s4 = peg$FAILED;\r\n                }\r\n                if (s4 === peg$FAILED) {\r\n                  s4 = peg$currPos;\r\n                  if (input.substr(peg$currPos, 3) === peg$c74) {\r\n                    s5 = peg$c74;\r\n                    peg$currPos += 3;\r\n                  } else {\r\n                    s5 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c75); }\r\n                  }\r\n                  if (s5 !== peg$FAILED) {\r\n                    s6 = peg$parseabbrev();\r\n                    if (s6 === peg$FAILED) {\r\n                      s6 = null;\r\n                    }\r\n                    if (s6 !== peg$FAILED) {\r\n                      s5 = [s5, s6];\r\n                      s4 = s5;\r\n                    } else {\r\n                      peg$currPos = s4;\r\n                      s4 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s4;\r\n                    s4 = peg$FAILED;\r\n                  }\r\n                  if (s4 === peg$FAILED) {\r\n                    s4 = peg$currPos;\r\n                    if (input.substr(peg$currPos, 3) === peg$c76) {\r\n                      s5 = peg$c76;\r\n                      peg$currPos += 3;\r\n                    } else {\r\n                      s5 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c77); }\r\n                    }\r\n                    if (s5 !== peg$FAILED) {\r\n                      s6 = peg$parseabbrev();\r\n                      if (s6 === peg$FAILED) {\r\n                        s6 = null;\r\n                      }\r\n                      if (s6 !== peg$FAILED) {\r\n                        s5 = [s5, s6];\r\n                        s4 = s5;\r\n                      } else {\r\n                        peg$currPos = s4;\r\n                        s4 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s4;\r\n                      s4 = peg$FAILED;\r\n                    }\r\n                    if (s4 === peg$FAILED) {\r\n                      s4 = peg$currPos;\r\n                      if (input.substr(peg$currPos, 2) === peg$c78) {\r\n                        s5 = peg$c78;\r\n                        peg$currPos += 2;\r\n                      } else {\r\n                        s5 = peg$FAILED;\r\n                        if (peg$silentFails === 0) { peg$fail(peg$c79); }\r\n                      }\r\n                      if (s5 !== peg$FAILED) {\r\n                        s6 = peg$parseabbrev();\r\n                        if (s6 === peg$FAILED) {\r\n                          s6 = null;\r\n                        }\r\n                        if (s6 !== peg$FAILED) {\r\n                          s5 = [s5, s6];\r\n                          s4 = s5;\r\n                        } else {\r\n                          peg$currPos = s4;\r\n                          s4 = peg$FAILED;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s4;\r\n                        s4 = peg$FAILED;\r\n                      }\r\n                      if (s4 === peg$FAILED) {\r\n                        s4 = peg$currPos;\r\n                        if (input.charCodeAt(peg$currPos) === 112) {\r\n                          s5 = peg$c80;\r\n                          peg$currPos++;\r\n                        } else {\r\n                          s5 = peg$FAILED;\r\n                          if (peg$silentFails === 0) { peg$fail(peg$c81); }\r\n                        }\r\n                        if (s5 !== peg$FAILED) {\r\n                          s6 = peg$parseabbrev();\r\n                          if (s6 === peg$FAILED) {\r\n                            s6 = null;\r\n                          }\r\n                          if (s6 !== peg$FAILED) {\r\n                            s5 = [s5, s6];\r\n                            s4 = s5;\r\n                          } else {\r\n                            peg$currPos = s4;\r\n                            s4 = peg$FAILED;\r\n                          }\r\n                        } else {\r\n                          peg$currPos = s4;\r\n                          s4 = peg$FAILED;\r\n                        }\r\n                        if (s4 === peg$FAILED) {\r\n                          s4 = peg$currPos;\r\n                          if (input.charCodeAt(peg$currPos) === 115) {\r\n                            s5 = peg$c82;\r\n                            peg$currPos++;\r\n                          } else {\r\n                            s5 = peg$FAILED;\r\n                            if (peg$silentFails === 0) { peg$fail(peg$c83); }\r\n                          }\r\n                          if (s5 !== peg$FAILED) {\r\n                            s6 = peg$parseabbrev();\r\n                            if (s6 === peg$FAILED) {\r\n                              s6 = null;\r\n                            }\r\n                            if (s6 !== peg$FAILED) {\r\n                              s5 = [s5, s6];\r\n                              s4 = s5;\r\n                            } else {\r\n                              peg$currPos = s4;\r\n                              s4 = peg$FAILED;\r\n                            }\r\n                          } else {\r\n                            peg$currPos = s4;\r\n                            s4 = peg$FAILED;\r\n                          }\r\n                          if (s4 === peg$FAILED) {\r\n                            s4 = peg$currPos;\r\n                            if (input.charCodeAt(peg$currPos) === 97) {\r\n                              s5 = peg$c84;\r\n                              peg$currPos++;\r\n                            } else {\r\n                              s5 = peg$FAILED;\r\n                              if (peg$silentFails === 0) { peg$fail(peg$c85); }\r\n                            }\r\n                            if (s5 !== peg$FAILED) {\r\n                              s6 = peg$parseabbrev();\r\n                              if (s6 === peg$FAILED) {\r\n                                s6 = null;\r\n                              }\r\n                              if (s6 !== peg$FAILED) {\r\n                                s5 = [s5, s6];\r\n                                s4 = s5;\r\n                              } else {\r\n                                peg$currPos = s4;\r\n                                s4 = peg$FAILED;\r\n                              }\r\n                            } else {\r\n                              peg$currPos = s4;\r\n                              s4 = peg$FAILED;\r\n                            }\r\n                            if (s4 === peg$FAILED) {\r\n                              s4 = peg$parseabbrev();\r\n                              if (s4 === peg$FAILED) {\r\n                                s4 = null;\r\n                              }\r\n                            }\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s3 = [s3, s4];\r\n            s2 = s3;\r\n          } else {\r\n            peg$currPos = s2;\r\n            s2 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s2;\r\n          s2 = peg$FAILED;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsesp();\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c86();\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsev_explicit() {\r\n      var s0, s1, s2, s3, s4, s5, s6;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsesp();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 118) {\r\n          s3 = peg$c87;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c88); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          if (input.substr(peg$currPos, 5) === peg$c89) {\r\n            s4 = peg$c89;\r\n            peg$currPos += 5;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c90); }\r\n          }\r\n          if (s4 === peg$FAILED) {\r\n            if (input.substr(peg$currPos, 4) === peg$c91) {\r\n              s4 = peg$c91;\r\n              peg$currPos += 4;\r\n            } else {\r\n              s4 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c92); }\r\n            }\r\n            if (s4 === peg$FAILED) {\r\n              s4 = peg$currPos;\r\n              if (input.substr(peg$currPos, 2) === peg$c93) {\r\n                s5 = peg$c93;\r\n                peg$currPos += 2;\r\n              } else {\r\n                s5 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c94); }\r\n              }\r\n              if (s5 !== peg$FAILED) {\r\n                s6 = peg$parseabbrev();\r\n                if (s6 === peg$FAILED) {\r\n                  s6 = null;\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  s5 = [s5, s6];\r\n                  s4 = s5;\r\n                } else {\r\n                  peg$currPos = s4;\r\n                  s4 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$FAILED;\r\n              }\r\n              if (s4 === peg$FAILED) {\r\n                s4 = peg$currPos;\r\n                if (input.substr(peg$currPos, 2) === peg$c95) {\r\n                  s5 = peg$c95;\r\n                  peg$currPos += 2;\r\n                } else {\r\n                  s5 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c96); }\r\n                }\r\n                if (s5 !== peg$FAILED) {\r\n                  s6 = peg$parseabbrev();\r\n                  if (s6 === peg$FAILED) {\r\n                    s6 = null;\r\n                  }\r\n                  if (s6 !== peg$FAILED) {\r\n                    s5 = [s5, s6];\r\n                    s4 = s5;\r\n                  } else {\r\n                    peg$currPos = s4;\r\n                    s4 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s4;\r\n                  s4 = peg$FAILED;\r\n                }\r\n                if (s4 === peg$FAILED) {\r\n                  s4 = peg$currPos;\r\n                  if (input.charCodeAt(peg$currPos) === 115) {\r\n                    s5 = peg$c82;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s5 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c83); }\r\n                  }\r\n                  if (s5 !== peg$FAILED) {\r\n                    s6 = peg$parseabbrev();\r\n                    if (s6 === peg$FAILED) {\r\n                      s6 = null;\r\n                    }\r\n                    if (s6 !== peg$FAILED) {\r\n                      s5 = [s5, s6];\r\n                      s4 = s5;\r\n                    } else {\r\n                      peg$currPos = s4;\r\n                      s4 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s4;\r\n                    s4 = peg$FAILED;\r\n                  }\r\n                  if (s4 === peg$FAILED) {\r\n                    s4 = peg$currPos;\r\n                    if (input.charCodeAt(peg$currPos) === 118) {\r\n                      s5 = peg$c87;\r\n                      peg$currPos++;\r\n                    } else {\r\n                      s5 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c88); }\r\n                    }\r\n                    if (s5 !== peg$FAILED) {\r\n                      s6 = peg$parseabbrev();\r\n                      if (s6 === peg$FAILED) {\r\n                        s6 = null;\r\n                      }\r\n                      if (s6 !== peg$FAILED) {\r\n                        s5 = [s5, s6];\r\n                        s4 = s5;\r\n                      } else {\r\n                        peg$currPos = s4;\r\n                        s4 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s4;\r\n                      s4 = peg$FAILED;\r\n                    }\r\n                    if (s4 === peg$FAILED) {\r\n                      s4 = peg$parseabbrev();\r\n                      if (s4 === peg$FAILED) {\r\n                        s4 = null;\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s3 = [s3, s4];\r\n            s2 = s3;\r\n          } else {\r\n            peg$currPos = s2;\r\n            s2 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s2;\r\n          s2 = peg$FAILED;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          peg$silentFails++;\r\n          if (peg$c46.test(input.charAt(peg$currPos))) {\r\n            s4 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c47); }\r\n          }\r\n          peg$silentFails--;\r\n          if (s4 === peg$FAILED) {\r\n            s3 = void 0;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$parsesp();\r\n            if (s4 !== peg$FAILED) {\r\n              peg$savedPos = s0;\r\n              s1 = peg$c97();\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsecv_sep() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsesp();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        if (input.charCodeAt(peg$currPos) === 58) {\r\n          s3 = peg$c98;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c99); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          while (s3 !== peg$FAILED) {\r\n            s2.push(s3);\r\n            if (input.charCodeAt(peg$currPos) === 58) {\r\n              s3 = peg$c98;\r\n              peg$currPos++;\r\n            } else {\r\n              s3 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c99); }\r\n            }\r\n          }\r\n        } else {\r\n          s2 = peg$FAILED;\r\n        }\r\n        if (s2 === peg$FAILED) {\r\n          s2 = peg$currPos;\r\n          if (input.charCodeAt(peg$currPos) === 46) {\r\n            s3 = peg$c18;\r\n            peg$currPos++;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$currPos;\r\n            peg$silentFails++;\r\n            s5 = peg$currPos;\r\n            s6 = peg$parsesp();\r\n            if (s6 !== peg$FAILED) {\r\n              if (input.charCodeAt(peg$currPos) === 46) {\r\n                s7 = peg$c18;\r\n                peg$currPos++;\r\n              } else {\r\n                s7 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n              }\r\n              if (s7 !== peg$FAILED) {\r\n                s8 = peg$parsesp();\r\n                if (s8 !== peg$FAILED) {\r\n                  if (input.charCodeAt(peg$currPos) === 46) {\r\n                    s9 = peg$c18;\r\n                    peg$currPos++;\r\n                  } else {\r\n                    s9 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n                  }\r\n                  if (s9 !== peg$FAILED) {\r\n                    s6 = [s6, s7, s8, s9];\r\n                    s5 = s6;\r\n                  } else {\r\n                    peg$currPos = s5;\r\n                    s5 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s5;\r\n                  s5 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s5;\r\n              s5 = peg$FAILED;\r\n            }\r\n            peg$silentFails--;\r\n            if (s5 === peg$FAILED) {\r\n              s4 = void 0;\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$FAILED;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s3 = [s3, s4];\r\n              s2 = s3;\r\n            } else {\r\n              peg$currPos = s2;\r\n              s2 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s2;\r\n            s2 = peg$FAILED;\r\n          }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsesp();\r\n          if (s3 !== peg$FAILED) {\r\n            s1 = [s1, s2, s3];\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsecv_sep_weak() {\r\n      var s0, s1, s2, s3;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsesp();\r\n      if (s1 !== peg$FAILED) {\r\n        if (peg$c100.test(input.charAt(peg$currPos))) {\r\n          s2 = input.charAt(peg$currPos);\r\n          peg$currPos++;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c101); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsesp();\r\n          if (s3 !== peg$FAILED) {\r\n            s1 = [s1, s2, s3];\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n      if (s0 === peg$FAILED) {\r\n        s0 = peg$parsespace();\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsesequence_sep() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = [];\r\n      if (peg$c102.test(input.charAt(peg$currPos))) {\r\n        s2 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c103); }\r\n      }\r\n      if (s2 === peg$FAILED) {\r\n        s2 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 46) {\r\n          s3 = peg$c18;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$currPos;\r\n          peg$silentFails++;\r\n          s5 = peg$currPos;\r\n          s6 = peg$parsesp();\r\n          if (s6 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 46) {\r\n              s7 = peg$c18;\r\n              peg$currPos++;\r\n            } else {\r\n              s7 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n            }\r\n            if (s7 !== peg$FAILED) {\r\n              s8 = peg$parsesp();\r\n              if (s8 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 46) {\r\n                  s9 = peg$c18;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s9 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n                }\r\n                if (s9 !== peg$FAILED) {\r\n                  s6 = [s6, s7, s8, s9];\r\n                  s5 = s6;\r\n                } else {\r\n                  peg$currPos = s5;\r\n                  s5 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s5;\r\n              s5 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s5;\r\n            s5 = peg$FAILED;\r\n          }\r\n          peg$silentFails--;\r\n          if (s5 === peg$FAILED) {\r\n            s4 = void 0;\r\n          } else {\r\n            peg$currPos = s4;\r\n            s4 = peg$FAILED;\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s3 = [s3, s4];\r\n            s2 = s3;\r\n          } else {\r\n            peg$currPos = s2;\r\n            s2 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s2;\r\n          s2 = peg$FAILED;\r\n        }\r\n        if (s2 === peg$FAILED) {\r\n          if (input.substr(peg$currPos, 3) === peg$c104) {\r\n            s2 = peg$c104;\r\n            peg$currPos += 3;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c105); }\r\n          }\r\n          if (s2 === peg$FAILED) {\r\n            if (input.substr(peg$currPos, 7) === peg$c106) {\r\n              s2 = peg$c106;\r\n              peg$currPos += 7;\r\n            } else {\r\n              s2 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c107); }\r\n            }\r\n            if (s2 === peg$FAILED) {\r\n              s2 = peg$currPos;\r\n              if (input.substr(peg$currPos, 2) === peg$c108) {\r\n                s3 = peg$c108;\r\n                peg$currPos += 2;\r\n              } else {\r\n                s3 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c109); }\r\n              }\r\n              if (s3 !== peg$FAILED) {\r\n                s4 = peg$parseabbrev();\r\n                if (s4 === peg$FAILED) {\r\n                  s4 = null;\r\n                }\r\n                if (s4 !== peg$FAILED) {\r\n                  s3 = [s3, s4];\r\n                  s2 = s3;\r\n                } else {\r\n                  peg$currPos = s2;\r\n                  s2 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s2;\r\n                s2 = peg$FAILED;\r\n              }\r\n              if (s2 === peg$FAILED) {\r\n                s2 = peg$currPos;\r\n                if (input.substr(peg$currPos, 3) === peg$c110) {\r\n                  s3 = peg$c110;\r\n                  peg$currPos += 3;\r\n                } else {\r\n                  s3 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c111); }\r\n                }\r\n                if (s3 !== peg$FAILED) {\r\n                  s4 = peg$parsespace();\r\n                  if (s4 !== peg$FAILED) {\r\n                    if (input.substr(peg$currPos, 4) === peg$c112) {\r\n                      s5 = peg$c112;\r\n                      peg$currPos += 4;\r\n                    } else {\r\n                      s5 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n                    }\r\n                    if (s5 !== peg$FAILED) {\r\n                      s3 = [s3, s4, s5];\r\n                      s2 = s3;\r\n                    } else {\r\n                      peg$currPos = s2;\r\n                      s2 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s2;\r\n                    s2 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s2;\r\n                  s2 = peg$FAILED;\r\n                }\r\n                if (s2 === peg$FAILED) {\r\n                  if (input.substr(peg$currPos, 4) === peg$c112) {\r\n                    s2 = peg$c112;\r\n                    peg$currPos += 4;\r\n                  } else {\r\n                    s2 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n                  }\r\n                  if (s2 === peg$FAILED) {\r\n                    if (input.substr(peg$currPos, 3) === peg$c110) {\r\n                      s2 = peg$c110;\r\n                      peg$currPos += 3;\r\n                    } else {\r\n                      s2 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c111); }\r\n                    }\r\n                    if (s2 === peg$FAILED) {\r\n                      s2 = peg$parsespace();\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        while (s2 !== peg$FAILED) {\r\n          s1.push(s2);\r\n          if (peg$c102.test(input.charAt(peg$currPos))) {\r\n            s2 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c103); }\r\n          }\r\n          if (s2 === peg$FAILED) {\r\n            s2 = peg$currPos;\r\n            if (input.charCodeAt(peg$currPos) === 46) {\r\n              s3 = peg$c18;\r\n              peg$currPos++;\r\n            } else {\r\n              s3 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n            }\r\n            if (s3 !== peg$FAILED) {\r\n              s4 = peg$currPos;\r\n              peg$silentFails++;\r\n              s5 = peg$currPos;\r\n              s6 = peg$parsesp();\r\n              if (s6 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 46) {\r\n                  s7 = peg$c18;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parsesp();\r\n                  if (s8 !== peg$FAILED) {\r\n                    if (input.charCodeAt(peg$currPos) === 46) {\r\n                      s9 = peg$c18;\r\n                      peg$currPos++;\r\n                    } else {\r\n                      s9 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n                    }\r\n                    if (s9 !== peg$FAILED) {\r\n                      s6 = [s6, s7, s8, s9];\r\n                      s5 = s6;\r\n                    } else {\r\n                      peg$currPos = s5;\r\n                      s5 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s5;\r\n                    s5 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s5;\r\n                  s5 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s5;\r\n                s5 = peg$FAILED;\r\n              }\r\n              peg$silentFails--;\r\n              if (s5 === peg$FAILED) {\r\n                s4 = void 0;\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$FAILED;\r\n              }\r\n              if (s4 !== peg$FAILED) {\r\n                s3 = [s3, s4];\r\n                s2 = s3;\r\n              } else {\r\n                peg$currPos = s2;\r\n                s2 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s2;\r\n              s2 = peg$FAILED;\r\n            }\r\n            if (s2 === peg$FAILED) {\r\n              if (input.substr(peg$currPos, 3) === peg$c104) {\r\n                s2 = peg$c104;\r\n                peg$currPos += 3;\r\n              } else {\r\n                s2 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c105); }\r\n              }\r\n              if (s2 === peg$FAILED) {\r\n                if (input.substr(peg$currPos, 7) === peg$c106) {\r\n                  s2 = peg$c106;\r\n                  peg$currPos += 7;\r\n                } else {\r\n                  s2 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c107); }\r\n                }\r\n                if (s2 === peg$FAILED) {\r\n                  s2 = peg$currPos;\r\n                  if (input.substr(peg$currPos, 2) === peg$c108) {\r\n                    s3 = peg$c108;\r\n                    peg$currPos += 2;\r\n                  } else {\r\n                    s3 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c109); }\r\n                  }\r\n                  if (s3 !== peg$FAILED) {\r\n                    s4 = peg$parseabbrev();\r\n                    if (s4 === peg$FAILED) {\r\n                      s4 = null;\r\n                    }\r\n                    if (s4 !== peg$FAILED) {\r\n                      s3 = [s3, s4];\r\n                      s2 = s3;\r\n                    } else {\r\n                      peg$currPos = s2;\r\n                      s2 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s2;\r\n                    s2 = peg$FAILED;\r\n                  }\r\n                  if (s2 === peg$FAILED) {\r\n                    s2 = peg$currPos;\r\n                    if (input.substr(peg$currPos, 3) === peg$c110) {\r\n                      s3 = peg$c110;\r\n                      peg$currPos += 3;\r\n                    } else {\r\n                      s3 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c111); }\r\n                    }\r\n                    if (s3 !== peg$FAILED) {\r\n                      s4 = peg$parsespace();\r\n                      if (s4 !== peg$FAILED) {\r\n                        if (input.substr(peg$currPos, 4) === peg$c112) {\r\n                          s5 = peg$c112;\r\n                          peg$currPos += 4;\r\n                        } else {\r\n                          s5 = peg$FAILED;\r\n                          if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n                        }\r\n                        if (s5 !== peg$FAILED) {\r\n                          s3 = [s3, s4, s5];\r\n                          s2 = s3;\r\n                        } else {\r\n                          peg$currPos = s2;\r\n                          s2 = peg$FAILED;\r\n                        }\r\n                      } else {\r\n                        peg$currPos = s2;\r\n                        s2 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s2;\r\n                      s2 = peg$FAILED;\r\n                    }\r\n                    if (s2 === peg$FAILED) {\r\n                      if (input.substr(peg$currPos, 4) === peg$c112) {\r\n                        s2 = peg$c112;\r\n                        peg$currPos += 4;\r\n                      } else {\r\n                        s2 = peg$FAILED;\r\n                        if (peg$silentFails === 0) { peg$fail(peg$c113); }\r\n                      }\r\n                      if (s2 === peg$FAILED) {\r\n                        if (input.substr(peg$currPos, 3) === peg$c110) {\r\n                          s2 = peg$c110;\r\n                          peg$currPos += 3;\r\n                        } else {\r\n                          s2 = peg$FAILED;\r\n                          if (peg$silentFails === 0) { peg$fail(peg$c111); }\r\n                        }\r\n                        if (s2 === peg$FAILED) {\r\n                          s2 = peg$parsespace();\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        s1 = peg$FAILED;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c114();\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parserange_sep() {\r\n      var s0, s1, s2, s3, s4, s5;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsesp();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = [];\r\n        s3 = peg$currPos;\r\n        if (peg$c115.test(input.charAt(peg$currPos))) {\r\n          s4 = input.charAt(peg$currPos);\r\n          peg$currPos++;\r\n        } else {\r\n          s4 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c116); }\r\n        }\r\n        if (s4 !== peg$FAILED) {\r\n          s5 = peg$parsesp();\r\n          if (s5 !== peg$FAILED) {\r\n            s4 = [s4, s5];\r\n            s3 = s4;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s3;\r\n          s3 = peg$FAILED;\r\n        }\r\n        if (s3 === peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          if (input.substr(peg$currPos, 7) === peg$c117) {\r\n            s4 = peg$c117;\r\n            peg$currPos += 7;\r\n          } else {\r\n            s4 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c118); }\r\n          }\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = peg$parsesp();\r\n            if (s5 !== peg$FAILED) {\r\n              s4 = [s4, s5];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 === peg$FAILED) {\r\n            s3 = peg$currPos;\r\n            if (input.substr(peg$currPos, 4) === peg$c119) {\r\n              s4 = peg$c119;\r\n              peg$currPos += 4;\r\n            } else {\r\n              s4 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c120); }\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parsesp();\r\n              if (s5 !== peg$FAILED) {\r\n                s4 = [s4, s5];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n            if (s3 === peg$FAILED) {\r\n              s3 = peg$currPos;\r\n              if (input.substr(peg$currPos, 2) === peg$c121) {\r\n                s4 = peg$c121;\r\n                peg$currPos += 2;\r\n              } else {\r\n                s4 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c122); }\r\n              }\r\n              if (s4 !== peg$FAILED) {\r\n                s5 = peg$parsesp();\r\n                if (s5 !== peg$FAILED) {\r\n                  s4 = [s4, s5];\r\n                  s3 = s4;\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          while (s3 !== peg$FAILED) {\r\n            s2.push(s3);\r\n            s3 = peg$currPos;\r\n            if (peg$c115.test(input.charAt(peg$currPos))) {\r\n              s4 = input.charAt(peg$currPos);\r\n              peg$currPos++;\r\n            } else {\r\n              s4 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c116); }\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parsesp();\r\n              if (s5 !== peg$FAILED) {\r\n                s4 = [s4, s5];\r\n                s3 = s4;\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n            if (s3 === peg$FAILED) {\r\n              s3 = peg$currPos;\r\n              if (input.substr(peg$currPos, 7) === peg$c117) {\r\n                s4 = peg$c117;\r\n                peg$currPos += 7;\r\n              } else {\r\n                s4 = peg$FAILED;\r\n                if (peg$silentFails === 0) { peg$fail(peg$c118); }\r\n              }\r\n              if (s4 !== peg$FAILED) {\r\n                s5 = peg$parsesp();\r\n                if (s5 !== peg$FAILED) {\r\n                  s4 = [s4, s5];\r\n                  s3 = s4;\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s3;\r\n                s3 = peg$FAILED;\r\n              }\r\n              if (s3 === peg$FAILED) {\r\n                s3 = peg$currPos;\r\n                if (input.substr(peg$currPos, 4) === peg$c119) {\r\n                  s4 = peg$c119;\r\n                  peg$currPos += 4;\r\n                } else {\r\n                  s4 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c120); }\r\n                }\r\n                if (s4 !== peg$FAILED) {\r\n                  s5 = peg$parsesp();\r\n                  if (s5 !== peg$FAILED) {\r\n                    s4 = [s4, s5];\r\n                    s3 = s4;\r\n                  } else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s3;\r\n                  s3 = peg$FAILED;\r\n                }\r\n                if (s3 === peg$FAILED) {\r\n                  s3 = peg$currPos;\r\n                  if (input.substr(peg$currPos, 2) === peg$c121) {\r\n                    s4 = peg$c121;\r\n                    peg$currPos += 2;\r\n                  } else {\r\n                    s4 = peg$FAILED;\r\n                    if (peg$silentFails === 0) { peg$fail(peg$c122); }\r\n                  }\r\n                  if (s4 !== peg$FAILED) {\r\n                    s5 = peg$parsesp();\r\n                    if (s5 !== peg$FAILED) {\r\n                      s4 = [s4, s5];\r\n                      s3 = s4;\r\n                    } else {\r\n                      peg$currPos = s3;\r\n                      s3 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s3;\r\n                    s3 = peg$FAILED;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          s2 = peg$FAILED;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s1 = [s1, s2];\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsetitle() {\r\n      var s0, s1, s2;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsecv_sep();\r\n      if (s1 === peg$FAILED) {\r\n        s1 = peg$parsesequence_sep();\r\n      }\r\n      if (s1 === peg$FAILED) {\r\n        s1 = null;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        if (input.substr(peg$currPos, 5) === peg$c123) {\r\n          s2 = peg$c123;\r\n          peg$currPos += 5;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c124); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          peg$savedPos = s0;\r\n          s1 = peg$c125(s2);\r\n          s0 = s1;\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsein_book_of() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsesp();\r\n      if (s1 !== peg$FAILED) {\r\n        if (input.substr(peg$currPos, 4) === peg$c126) {\r\n          s2 = peg$c126;\r\n          peg$currPos += 4;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c127); }\r\n        }\r\n        if (s2 === peg$FAILED) {\r\n          if (input.substr(peg$currPos, 2) === peg$c128) {\r\n            s2 = peg$c128;\r\n            peg$currPos += 2;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c129); }\r\n          }\r\n          if (s2 === peg$FAILED) {\r\n            if (input.substr(peg$currPos, 2) === peg$c130) {\r\n              s2 = peg$c130;\r\n              peg$currPos += 2;\r\n            } else {\r\n              s2 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c131); }\r\n            }\r\n          }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsesp();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$currPos;\r\n            if (input.substr(peg$currPos, 3) === peg$c132) {\r\n              s5 = peg$c132;\r\n              peg$currPos += 3;\r\n            } else {\r\n              s5 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c133); }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = peg$parsesp();\r\n              if (s6 !== peg$FAILED) {\r\n                if (input.substr(peg$currPos, 4) === peg$c134) {\r\n                  s7 = peg$c134;\r\n                  peg$currPos += 4;\r\n                } else {\r\n                  s7 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c135); }\r\n                }\r\n                if (s7 !== peg$FAILED) {\r\n                  s8 = peg$parsesp();\r\n                  if (s8 !== peg$FAILED) {\r\n                    if (input.substr(peg$currPos, 2) === peg$c128) {\r\n                      s9 = peg$c128;\r\n                      peg$currPos += 2;\r\n                    } else {\r\n                      s9 = peg$FAILED;\r\n                      if (peg$silentFails === 0) { peg$fail(peg$c129); }\r\n                    }\r\n                    if (s9 !== peg$FAILED) {\r\n                      s10 = peg$parsesp();\r\n                      if (s10 !== peg$FAILED) {\r\n                        s5 = [s5, s6, s7, s8, s9, s10];\r\n                        s4 = s5;\r\n                      } else {\r\n                        peg$currPos = s4;\r\n                        s4 = peg$FAILED;\r\n                      }\r\n                    } else {\r\n                      peg$currPos = s4;\r\n                      s4 = peg$FAILED;\r\n                    }\r\n                  } else {\r\n                    peg$currPos = s4;\r\n                    s4 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s4;\r\n                  s4 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$FAILED;\r\n            }\r\n            if (s4 === peg$FAILED) {\r\n              s4 = null;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s1 = [s1, s2, s3, s4];\r\n              s0 = s1;\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseabbrev() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsesp();\r\n      if (s1 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 46) {\r\n          s2 = peg$c18;\r\n          peg$currPos++;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          peg$silentFails++;\r\n          s4 = peg$currPos;\r\n          s5 = peg$parsesp();\r\n          if (s5 !== peg$FAILED) {\r\n            if (input.charCodeAt(peg$currPos) === 46) {\r\n              s6 = peg$c18;\r\n              peg$currPos++;\r\n            } else {\r\n              s6 = peg$FAILED;\r\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n            }\r\n            if (s6 !== peg$FAILED) {\r\n              s7 = peg$parsesp();\r\n              if (s7 !== peg$FAILED) {\r\n                if (input.charCodeAt(peg$currPos) === 46) {\r\n                  s8 = peg$c18;\r\n                  peg$currPos++;\r\n                } else {\r\n                  s8 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c19); }\r\n                }\r\n                if (s8 !== peg$FAILED) {\r\n                  s5 = [s5, s6, s7, s8];\r\n                  s4 = s5;\r\n                } else {\r\n                  peg$currPos = s4;\r\n                  s4 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s4;\r\n            s4 = peg$FAILED;\r\n          }\r\n          peg$silentFails--;\r\n          if (s4 === peg$FAILED) {\r\n            s3 = void 0;\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            s1 = [s1, s2, s3];\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseeu_cv_sep() {\r\n      var s0, s1, s2, s3;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsesp();\r\n      if (s1 !== peg$FAILED) {\r\n        if (input.charCodeAt(peg$currPos) === 44) {\r\n          s2 = peg$c15;\r\n          peg$currPos++;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c16); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsesp();\r\n          if (s3 !== peg$FAILED) {\r\n            s1 = [s1, s2, s3];\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsetranslation_sequence_enclosed() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsesp();\r\n      if (s1 !== peg$FAILED) {\r\n        if (peg$c136.test(input.charAt(peg$currPos))) {\r\n          s2 = input.charAt(peg$currPos);\r\n          peg$currPos++;\r\n        } else {\r\n          s2 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c137); }\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$parsesp();\r\n          if (s3 !== peg$FAILED) {\r\n            s4 = peg$currPos;\r\n            s5 = peg$parsetranslation();\r\n            if (s5 !== peg$FAILED) {\r\n              s6 = [];\r\n              s7 = peg$currPos;\r\n              s8 = peg$parsesequence_sep();\r\n              if (s8 !== peg$FAILED) {\r\n                s9 = peg$parsetranslation();\r\n                if (s9 !== peg$FAILED) {\r\n                  s8 = [s8, s9];\r\n                  s7 = s8;\r\n                } else {\r\n                  peg$currPos = s7;\r\n                  s7 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s7;\r\n                s7 = peg$FAILED;\r\n              }\r\n              while (s7 !== peg$FAILED) {\r\n                s6.push(s7);\r\n                s7 = peg$currPos;\r\n                s8 = peg$parsesequence_sep();\r\n                if (s8 !== peg$FAILED) {\r\n                  s9 = peg$parsetranslation();\r\n                  if (s9 !== peg$FAILED) {\r\n                    s8 = [s8, s9];\r\n                    s7 = s8;\r\n                  } else {\r\n                    peg$currPos = s7;\r\n                    s7 = peg$FAILED;\r\n                  }\r\n                } else {\r\n                  peg$currPos = s7;\r\n                  s7 = peg$FAILED;\r\n                }\r\n              }\r\n              if (s6 !== peg$FAILED) {\r\n                s5 = [s5, s6];\r\n                s4 = s5;\r\n              } else {\r\n                peg$currPos = s4;\r\n                s4 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s4;\r\n              s4 = peg$FAILED;\r\n            }\r\n            if (s4 !== peg$FAILED) {\r\n              s5 = peg$parsesp();\r\n              if (s5 !== peg$FAILED) {\r\n                if (peg$c138.test(input.charAt(peg$currPos))) {\r\n                  s6 = input.charAt(peg$currPos);\r\n                  peg$currPos++;\r\n                } else {\r\n                  s6 = peg$FAILED;\r\n                  if (peg$silentFails === 0) { peg$fail(peg$c139); }\r\n                }\r\n                if (s6 !== peg$FAILED) {\r\n                  peg$savedPos = s0;\r\n                  s1 = peg$c140(s4);\r\n                  s0 = s1;\r\n                } else {\r\n                  peg$currPos = s0;\r\n                  s0 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s0;\r\n                s0 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s0;\r\n              s0 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsetranslation_sequence() {\r\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = peg$parsesp();\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$currPos;\r\n        if (input.charCodeAt(peg$currPos) === 44) {\r\n          s3 = peg$c15;\r\n          peg$currPos++;\r\n        } else {\r\n          s3 = peg$FAILED;\r\n          if (peg$silentFails === 0) { peg$fail(peg$c16); }\r\n        }\r\n        if (s3 !== peg$FAILED) {\r\n          s4 = peg$parsesp();\r\n          if (s4 !== peg$FAILED) {\r\n            s3 = [s3, s4];\r\n            s2 = s3;\r\n          } else {\r\n            peg$currPos = s2;\r\n            s2 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s2;\r\n          s2 = peg$FAILED;\r\n        }\r\n        if (s2 === peg$FAILED) {\r\n          s2 = null;\r\n        }\r\n        if (s2 !== peg$FAILED) {\r\n          s3 = peg$currPos;\r\n          s4 = peg$parsetranslation();\r\n          if (s4 !== peg$FAILED) {\r\n            s5 = [];\r\n            s6 = peg$currPos;\r\n            s7 = peg$parsesequence_sep();\r\n            if (s7 !== peg$FAILED) {\r\n              s8 = peg$parsetranslation();\r\n              if (s8 !== peg$FAILED) {\r\n                s7 = [s7, s8];\r\n                s6 = s7;\r\n              } else {\r\n                peg$currPos = s6;\r\n                s6 = peg$FAILED;\r\n              }\r\n            } else {\r\n              peg$currPos = s6;\r\n              s6 = peg$FAILED;\r\n            }\r\n            while (s6 !== peg$FAILED) {\r\n              s5.push(s6);\r\n              s6 = peg$currPos;\r\n              s7 = peg$parsesequence_sep();\r\n              if (s7 !== peg$FAILED) {\r\n                s8 = peg$parsetranslation();\r\n                if (s8 !== peg$FAILED) {\r\n                  s7 = [s7, s8];\r\n                  s6 = s7;\r\n                } else {\r\n                  peg$currPos = s6;\r\n                  s6 = peg$FAILED;\r\n                }\r\n              } else {\r\n                peg$currPos = s6;\r\n                s6 = peg$FAILED;\r\n              }\r\n            }\r\n            if (s5 !== peg$FAILED) {\r\n              s4 = [s4, s5];\r\n              s3 = s4;\r\n            } else {\r\n              peg$currPos = s3;\r\n              s3 = peg$FAILED;\r\n            }\r\n          } else {\r\n            peg$currPos = s3;\r\n            s3 = peg$FAILED;\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c140(s3);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsetranslation() {\r\n      var s0, s1, s2, s3;\r\n\r\n      s0 = peg$currPos;\r\n      if (input.charCodeAt(peg$currPos) === 30) {\r\n        s1 = peg$c141;\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c142); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        s2 = peg$parseany_integer();\r\n        if (s2 !== peg$FAILED) {\r\n          if (input.charCodeAt(peg$currPos) === 30) {\r\n            s3 = peg$c141;\r\n            peg$currPos++;\r\n          } else {\r\n            s3 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c142); }\r\n          }\r\n          if (s3 !== peg$FAILED) {\r\n            peg$savedPos = s0;\r\n            s1 = peg$c143(s2);\r\n            s0 = s1;\r\n          } else {\r\n            peg$currPos = s0;\r\n            s0 = peg$FAILED;\r\n          }\r\n        } else {\r\n          peg$currPos = s0;\r\n          s0 = peg$FAILED;\r\n        }\r\n      } else {\r\n        peg$currPos = s0;\r\n        s0 = peg$FAILED;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseinteger() {\r\n      var res;\r\n      if (res = /^[0-9]{1,3}(?!\\d|,000)/.exec(input.substr(peg$currPos))) {\r\n      \tpeg$savedPos = peg$currPos;\r\n        peg$currPos += res[0].length;\r\n        return {\"type\": \"integer\", \"value\": parseInt(res[0], 10), \"indices\": [peg$savedPos, peg$currPos - 1]}\r\n      } else {\r\n        return peg$FAILED;\r\n      }\r\n    }\r\n\r\n    function peg$parseany_integer() {\r\n      var s0, s1, s2;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = [];\r\n      if (peg$c57.test(input.charAt(peg$currPos))) {\r\n        s2 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c58); }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        while (s2 !== peg$FAILED) {\r\n          s1.push(s2);\r\n          if (peg$c57.test(input.charAt(peg$currPos))) {\r\n            s2 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c58); }\r\n          }\r\n        }\r\n      } else {\r\n        s1 = peg$FAILED;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c146(s1);\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseword() {\r\n      var s0, s1, s2;\r\n\r\n      s0 = peg$currPos;\r\n      s1 = [];\r\n      if (peg$c147.test(input.charAt(peg$currPos))) {\r\n        s2 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s2 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c148); }\r\n      }\r\n      if (s2 !== peg$FAILED) {\r\n        while (s2 !== peg$FAILED) {\r\n          s1.push(s2);\r\n          if (peg$c147.test(input.charAt(peg$currPos))) {\r\n            s2 = input.charAt(peg$currPos);\r\n            peg$currPos++;\r\n          } else {\r\n            s2 = peg$FAILED;\r\n            if (peg$silentFails === 0) { peg$fail(peg$c148); }\r\n          }\r\n        }\r\n      } else {\r\n        s1 = peg$FAILED;\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c149(s1);\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parseword_parenthesis() {\r\n      var s0, s1;\r\n\r\n      s0 = peg$currPos;\r\n      if (peg$c136.test(input.charAt(peg$currPos))) {\r\n        s1 = input.charAt(peg$currPos);\r\n        peg$currPos++;\r\n      } else {\r\n        s1 = peg$FAILED;\r\n        if (peg$silentFails === 0) { peg$fail(peg$c137); }\r\n      }\r\n      if (s1 !== peg$FAILED) {\r\n        peg$savedPos = s0;\r\n        s1 = peg$c150(s1);\r\n      }\r\n      s0 = s1;\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsesp() {\r\n      var s0;\r\n\r\n      s0 = peg$parsespace();\r\n      if (s0 === peg$FAILED) {\r\n        s0 = null;\r\n      }\r\n\r\n      return s0;\r\n    }\r\n\r\n    function peg$parsespace() {\r\n      var res;\r\n      if (res = /^[\\s\\xa0*]+/.exec(input.substr(peg$currPos))) {\r\n        peg$currPos += res[0].length;\r\n        return [];\r\n      }\r\n      return peg$FAILED;\r\n    }\r\n\r\n    peg$result = peg$startRuleFunction();\r\n\r\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\r\n      return peg$result;\r\n    } else {\r\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\r\n        peg$fail(peg$endExpectation());\r\n      }\r\n\r\n      throw peg$buildStructuredError(\r\n        peg$maxFailExpected,\r\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\r\n        peg$maxFailPos < input.length\r\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\r\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\r\n      );\r\n    }\r\n  }\r\n\r\n  grammar = {\r\n    SyntaxError: peg$SyntaxError,\r\n    parse:       peg$parse\r\n  };\r\n})(this);\r\n\r\n\r\n}).call(this);\r\n",null]}