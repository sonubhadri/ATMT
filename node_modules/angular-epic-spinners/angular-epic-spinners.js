import { Component, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

class AtomSpinnerComponent {
    constructor() {
        this.size = 60;
        this.animationDuration = 1000;
        this.color = 'red';
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`
        };
    }
    /**
     * @return {?}
     */
    get circleStyle() {
        return {
            color: this.color,
            fontSize: `${this.size * 0.24}px`
        };
    }
    /**
     * @return {?}
     */
    get lineStyle() {
        return {
            animationDuration: `${this.animationDuration}ms`,
            borderLeftWidth: `${this.size / 25}px`,
            borderRightWidth: `${this.size / 25}px`,
            borderLeftColor: this.color
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
AtomSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-atom-spinner',
                template: `
      <div class="atom-spinner" [ngStyle]="spinnerStyle">
        <div class="spinner-inner">
          <div class="spinner-line" [ngStyle]="lineStyle"></div>
          <div class="spinner-line" [ngStyle]="lineStyle"></div>
          <div class="spinner-line" [ngStyle]="lineStyle"></div>
          <div class="spinner-circle" [ngStyle]="circleStyle">
            &#9679;
          </div>
        </div>
      </div>
  `,
                styles: [`
    .atom-spinner,
    .atom-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }

    .atom-spinner {
      height: 60px;
      width: 60px;
      overflow: hidden;
    }

    .atom-spinner .spinner-inner {
      position: relative;
      display: block;
      height: 100%;
      width: 100%;
    }

    .atom-spinner .spinner-circle {
      display: block;
      position: absolute;
      color: #ff1d5e;
      font-size: calc(60px * 0.24);
      top: 50%;
      left: 50%;
      -webkit-transform: translate(-50%, -50%);
              transform: translate(-50%, -50%);
    }

    .atom-spinner .spinner-line {
      position: absolute;
      width: 100%;
      height: 100%;
      border-radius: 50%;
      -webkit-animation-duration: 1s;
              animation-duration: 1s;
      border-left-width: calc(60px / 25);
      border-top-width: calc(60px / 25);
      border-left-color: #ff1d5e;
      border-left-style: solid;
      border-top-style: solid;
      border-top-color: transparent;
    }

    .atom-spinner .spinner-line:nth-child(1) {
      -webkit-animation: atom-spinner-animation-1 1s linear infinite;
              animation: atom-spinner-animation-1 1s linear infinite;
      -webkit-transform: rotateZ(120deg) rotateX(66deg) rotateZ(0deg);
              transform: rotateZ(120deg) rotateX(66deg) rotateZ(0deg);
    }

    .atom-spinner .spinner-line:nth-child(2) {
      -webkit-animation: atom-spinner-animation-2 1s linear infinite;
              animation: atom-spinner-animation-2 1s linear infinite;
      -webkit-transform: rotateZ(240deg) rotateX(66deg) rotateZ(0deg);
              transform: rotateZ(240deg) rotateX(66deg) rotateZ(0deg);
    }

    .atom-spinner .spinner-line:nth-child(3) {
      -webkit-animation: atom-spinner-animation-3 1s linear infinite;
              animation: atom-spinner-animation-3 1s linear infinite;
      -webkit-transform: rotateZ(360deg) rotateX(66deg) rotateZ(0deg);
              transform: rotateZ(360deg) rotateX(66deg) rotateZ(0deg);
    }

    @-webkit-keyframes atom-spinner-animation-1 {
      100% {
        -webkit-transform: rotateZ(120deg) rotateX(66deg) rotateZ(360deg);
                transform: rotateZ(120deg) rotateX(66deg) rotateZ(360deg);
      }
    }

    @keyframes atom-spinner-animation-1 {
      100% {
        -webkit-transform: rotateZ(120deg) rotateX(66deg) rotateZ(360deg);
                transform: rotateZ(120deg) rotateX(66deg) rotateZ(360deg);
      }
    }

    @-webkit-keyframes atom-spinner-animation-2 {
      100% {
        -webkit-transform: rotateZ(240deg) rotateX(66deg) rotateZ(360deg);
                transform: rotateZ(240deg) rotateX(66deg) rotateZ(360deg);
      }
    }

    @keyframes atom-spinner-animation-2 {
      100% {
        -webkit-transform: rotateZ(240deg) rotateX(66deg) rotateZ(360deg);
                transform: rotateZ(240deg) rotateX(66deg) rotateZ(360deg);
      }
    }

    @-webkit-keyframes atom-spinner-animation-3 {
      100% {
        -webkit-transform: rotateZ(360deg) rotateX(66deg) rotateZ(360deg);
                transform: rotateZ(360deg) rotateX(66deg) rotateZ(360deg);
      }
    }

    @keyframes atom-spinner-animation-3 {
      100% {
        -webkit-transform: rotateZ(360deg) rotateX(66deg) rotateZ(360deg);
                transform: rotateZ(360deg) rotateX(66deg) rotateZ(360deg);
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
AtomSpinnerComponent.ctorParameters = () => [];
AtomSpinnerComponent.propDecorators = {
    'size': [{ type: Input },],
    'animationDuration': [{ type: Input },],
    'color': [{ type: Input },],
};

class AtomSpinnerModule {
}
AtomSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [AtomSpinnerComponent],
                declarations: [AtomSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
AtomSpinnerModule.ctorParameters = () => [];

class BreedingRhombusSpinnerComponent {
    constructor() {
        this.size = 150;
        this.animationDuration = 2000;
        this.color = '#fff';
        this.animationBaseName = 'breeding-rhombus-spinner-animation-child';
        this.rhombusesNum = 8;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`
        };
    }
    /**
     * @return {?}
     */
    get rhombusStyle() {
        return {
            height: `${this.size / 7.5}px`,
            width: `${this.size / 7.5}px`,
            animationDuration: `${this.animationDuration}`,
            top: `${this.size / 2.3077}px`,
            left: `${this.size / 23077}px`,
            backgroundColor: this.color
        };
    }
    /**
     * @return {?}
     */
    get rhombusesStyles() {
        const /** @type {?} */ rhombusesStyles = [];
        const /** @type {?} */ delayModifier = this.animationDuration * 0.05;
        for (let /** @type {?} */ i = 1; i <= this.rhombusesNum; i++) {
            rhombusesStyles.push(Object.assign({}, this.rhombusStyle, { animationDelay: `${delayModifier * (i + 1)}ms` }));
        }
        return rhombusesStyles;
    }
    /**
     * @return {?}
     */
    get bigRhombusStyle() {
        return {
            height: `${this.size / 3}px`,
            width: `${this.size / 3}px`,
            animationDuration: `${this.animationDuration}`,
            top: `${this.size / 3}px`,
            left: `${this.size / 3}px`,
            backgroundColor: this.color
        };
    }
    /**
     * @param {?} index
     * @return {?}
     */
    childClassString(index) {
        return `child-${index + 1}`;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
BreedingRhombusSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-breeding-rhombus-spinner',
                template: `
      <div class="breeding-rhombus-spinner" [ngStyle]="spinnerStyle">
        <div class="rhombus" *ngFor="let rs of rhombusesStyles; let i = index;" [ngStyle]="rs" [ngClass]="childClassString(i)"></div>
        <div class="rhombus big" [ngStyle]="bigRhombusStyle"></div>
      </div>
    `,
                styles: [`
     .breeding-rhombus-spinner {
       height: 65px;
       width: 65px;
       position: relative;
       -webkit-transform: rotate(45deg);
               transform: rotate(45deg);
     }

     .breeding-rhombus-spinner,
     .breeding-rhombus-spinner * {
       -webkit-box-sizing: border-box;
               box-sizing: border-box;
     }

     .breeding-rhombus-spinner .rhombus {
       height: calc(65px / 7.5);
       width: calc(65px / 7.5);
       -webkit-animation-duration: 2000ms;
               animation-duration: 2000ms;
       top: calc(65px / 2.3077);
       left: calc(65px / 2.3077);
       background-color: #ff1d5e;
       position: absolute;
       -webkit-animation-iteration-count: infinite;
               animation-iteration-count: infinite;
     }

     .breeding-rhombus-spinner .rhombus:nth-child(2n+0) {
       margin-right: 0;
     }

     .breeding-rhombus-spinner .rhombus.child-1 {
       -webkit-animation-name: breeding-rhombus-spinner-animation-child-1;
               animation-name: breeding-rhombus-spinner-animation-child-1;
       -webkit-animation-delay: calc(100ms * 1);
               animation-delay: calc(100ms * 1);
     }

     .breeding-rhombus-spinner .rhombus.child-2 {
       -webkit-animation-name: breeding-rhombus-spinner-animation-child-2;
               animation-name: breeding-rhombus-spinner-animation-child-2;
       -webkit-animation-delay: calc(100ms * 2);
               animation-delay: calc(100ms * 2);
     }

     .breeding-rhombus-spinner .rhombus.child-3 {
       -webkit-animation-name: breeding-rhombus-spinner-animation-child-3;
               animation-name: breeding-rhombus-spinner-animation-child-3;
       -webkit-animation-delay: calc(100ms * 3);
               animation-delay: calc(100ms * 3);
     }

     .breeding-rhombus-spinner .rhombus.child-4 {
       -webkit-animation-name: breeding-rhombus-spinner-animation-child-4;
               animation-name: breeding-rhombus-spinner-animation-child-4;
       -webkit-animation-delay: calc(100ms * 4);
               animation-delay: calc(100ms * 4);
     }

     .breeding-rhombus-spinner .rhombus.child-5 {
       -webkit-animation-name: breeding-rhombus-spinner-animation-child-5;
               animation-name: breeding-rhombus-spinner-animation-child-5;
       -webkit-animation-delay: calc(100ms * 5);
               animation-delay: calc(100ms * 5);
     }

     .breeding-rhombus-spinner .rhombus.child-6 {
       -webkit-animation-name: breeding-rhombus-spinner-animation-child-6;
               animation-name: breeding-rhombus-spinner-animation-child-6;
       -webkit-animation-delay: calc(100ms * 6);
               animation-delay: calc(100ms * 6);
     }

     .breeding-rhombus-spinner .rhombus.child-7 {
       -webkit-animation-name: breeding-rhombus-spinner-animation-child-7;
               animation-name: breeding-rhombus-spinner-animation-child-7;
       -webkit-animation-delay: calc(100ms * 7);
               animation-delay: calc(100ms * 7);
     }

     .breeding-rhombus-spinner .rhombus.child-8 {
       -webkit-animation-name: breeding-rhombus-spinner-animation-child-8;
               animation-name: breeding-rhombus-spinner-animation-child-8;
       -webkit-animation-delay: calc(100ms * 8);
               animation-delay: calc(100ms * 8);
     }

     .breeding-rhombus-spinner .rhombus.big {
       height: calc(65px / 3);
       width: calc(65px / 3);
       -webkit-animation-duration: 2000ms;
               animation-duration: 2000ms;
       top: calc(65px / 3);
       left: calc(65px / 3);
       background-color: #ff1d5e;
       -webkit-animation: breeding-rhombus-spinner-animation-child-big 2s infinite;
               animation: breeding-rhombus-spinner-animation-child-big 2s infinite;
       -webkit-animation-delay: 0.5s;
               animation-delay: 0.5s;
     }

     @-webkit-keyframes breeding-rhombus-spinner-animation-child-1 {
       50% {
         -webkit-transform: translate(-325%, -325%);
                 transform: translate(-325%, -325%);
       }
     }

     @keyframes breeding-rhombus-spinner-animation-child-1 {
       50% {
         -webkit-transform: translate(-325%, -325%);
                 transform: translate(-325%, -325%);
       }
     }

     @-webkit-keyframes breeding-rhombus-spinner-animation-child-2 {
       50% {
         -webkit-transform: translate(0, -325%);
                 transform: translate(0, -325%);
       }
     }

     @keyframes breeding-rhombus-spinner-animation-child-2 {
       50% {
         -webkit-transform: translate(0, -325%);
                 transform: translate(0, -325%);
       }
     }

     @-webkit-keyframes breeding-rhombus-spinner-animation-child-3 {
       50% {
         -webkit-transform: translate(325%, -325%);
                 transform: translate(325%, -325%);
       }
     }

     @keyframes breeding-rhombus-spinner-animation-child-3 {
       50% {
         -webkit-transform: translate(325%, -325%);
                 transform: translate(325%, -325%);
       }
     }

     @-webkit-keyframes breeding-rhombus-spinner-animation-child-4 {
       50% {
         -webkit-transform: translate(325%, 0);
                 transform: translate(325%, 0);
       }
     }

     @keyframes breeding-rhombus-spinner-animation-child-4 {
       50% {
         -webkit-transform: translate(325%, 0);
                 transform: translate(325%, 0);
       }
     }

     @-webkit-keyframes breeding-rhombus-spinner-animation-child-5 {
       50% {
         -webkit-transform: translate(325%, 325%);
                 transform: translate(325%, 325%);
       }
     }

     @keyframes breeding-rhombus-spinner-animation-child-5 {
       50% {
         -webkit-transform: translate(325%, 325%);
                 transform: translate(325%, 325%);
       }
     }

     @-webkit-keyframes breeding-rhombus-spinner-animation-child-6 {
       50% {
         -webkit-transform: translate(0, 325%);
                 transform: translate(0, 325%);
       }
     }

     @keyframes breeding-rhombus-spinner-animation-child-6 {
       50% {
         -webkit-transform: translate(0, 325%);
                 transform: translate(0, 325%);
       }
     }

     @-webkit-keyframes breeding-rhombus-spinner-animation-child-7 {
       50% {
         -webkit-transform: translate(-325%, 325%);
                 transform: translate(-325%, 325%);
       }
     }

     @keyframes breeding-rhombus-spinner-animation-child-7 {
       50% {
         -webkit-transform: translate(-325%, 325%);
                 transform: translate(-325%, 325%);
       }
     }

     @-webkit-keyframes breeding-rhombus-spinner-animation-child-8 {
       50% {
         -webkit-transform: translate(-325%, 0);
                 transform: translate(-325%, 0);
       }
     }

     @keyframes breeding-rhombus-spinner-animation-child-8 {
       50% {
         -webkit-transform: translate(-325%, 0);
                 transform: translate(-325%, 0);
       }
     }

     @-webkit-keyframes breeding-rhombus-spinner-animation-child-big {
       50% {
         -webkit-transform: scale(0.5);
                 transform: scale(0.5);
       }
     }

     @keyframes breeding-rhombus-spinner-animation-child-big {
       50% {
         -webkit-transform: scale(0.5);
                 transform: scale(0.5);
       }
     }
  `]
            },] },
];
/**
 * @nocollapse
 */
BreedingRhombusSpinnerComponent.ctorParameters = () => [];
BreedingRhombusSpinnerComponent.propDecorators = {
    'size': [{ type: Input },],
    'animationDuration': [{ type: Input },],
    'color': [{ type: Input },],
};

class BreedingRhombusSpinnerModule {
}
BreedingRhombusSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [BreedingRhombusSpinnerComponent],
                declarations: [BreedingRhombusSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
BreedingRhombusSpinnerModule.ctorParameters = () => [];

class CirclesToRhumbusesSpinnerComponent {
    constructor() {
        this.circleSize = 15;
        this.circlesNum = 3;
        this.animationDuration = 1200;
        this.color = '#fff';
    }
    /**
     * @return {?}
     */
    get circleMarginLeft() {
        return this.circleSize * 1.125;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.circleSize}px`,
            width: `${(this.circleSize + this.circleMarginLeft) * this.circlesNum}px`
        };
    }
    /**
     * @return {?}
     */
    get circleStyle() {
        return {
            borderColor: this.color,
            animationDuration: `${this.animationDuration}ms`,
            height: `${this.circleSize}px`,
            width: `${this.circleSize}px`,
            marginLeft: `${this.circleMarginLeft}px`
        };
    }
    /**
     * @return {?}
     */
    get circlesStyles() {
        const /** @type {?} */ circlesStyles = [];
        const /** @type {?} */ delay = 150;
        for (let /** @type {?} */ i = 1; i <= this.circlesNum; i++) {
            const /** @type {?} */ style = Object.assign({}, this.circleStyle, { animationDelay: `${i * delay}ms` });
            circlesStyles.push(style);
        }
        return circlesStyles;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
CirclesToRhumbusesSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-circles-to-rhumbuses-spinner',
                template: `
    <div class="circles-to-rhombuses-spinner" [ngStyle]="spinnerStyle">
      <div class="circle" *ngFor="let cs of circlesStyles; let i = index;" [ngStyle]="cs"></div>
    </div>
  `,
                styles: [`
    .circles-to-rhombuses-spinner, .circles-to-rhombuses-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }

    .circles-to-rhombuses-spinner {
      height: 15px;
      width: calc( (15px + 15px * 1.125) * 3);
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center
    }

    .circles-to-rhombuses-spinner .circle {
      height: 15px;
      width: 15px;
      margin-left: calc(15px * 1.125);
      -webkit-transform: rotate(45deg);
              transform: rotate(45deg);
      border-radius: 10%;
      border: 3px solid #ff1d5e;
      overflow: hidden;
      background: transparent;

      -webkit-animation: circles-to-rhombuses-animation 1200ms linear infinite;

              animation: circles-to-rhombuses-animation 1200ms linear infinite;
    }

    .circles-to-rhombuses-spinner .circle:nth-child(1) {
      -webkit-animation-delay: calc(150ms * 1);
              animation-delay: calc(150ms * 1);
      margin-left: 0
    }

    .circles-to-rhombuses-spinner .circle:nth-child(2) {
      -webkit-animation-delay: calc(150ms * 2);
              animation-delay: calc(150ms * 2);
    }

    .circles-to-rhombuses-spinner .circle:nth-child(3) {
      -webkit-animation-delay: calc(150ms * 3);
              animation-delay: calc(150ms * 3);
    }

    @-webkit-keyframes circles-to-rhombuses-animation {
      0% {
        border-radius: 10%;
      }

      17.5% {
        border-radius: 10%;
      }

      50% {
        border-radius: 100%;
      }


      93.5% {
        border-radius: 10%;
      }

      100% {
        border-radius: 10%;
      }
    }

    @keyframes circles-to-rhombuses-animation {
      0% {
        border-radius: 10%;
      }

      17.5% {
        border-radius: 10%;
      }

      50% {
        border-radius: 100%;
      }


      93.5% {
        border-radius: 10%;
      }

      100% {
        border-radius: 10%;
      }
    }

    @-webkit-keyframes circles-to-rhombuses-background-animation {
      50% {
        opacity: 0.4;
      }
    }

    @keyframes circles-to-rhombuses-background-animation {
      50% {
        opacity: 0.4;
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
CirclesToRhumbusesSpinnerComponent.ctorParameters = () => [];
CirclesToRhumbusesSpinnerComponent.propDecorators = {
    'circleSize': [{ type: Input },],
    'circlesNum': [{ type: Input },],
    'animationDuration': [{ type: Input },],
    'color': [{ type: Input },],
};

class CirclesToRhumbusesSpinnerModule {
}
CirclesToRhumbusesSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [CirclesToRhumbusesSpinnerComponent],
                declarations: [CirclesToRhumbusesSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
CirclesToRhumbusesSpinnerModule.ctorParameters = () => [];

class FingerprintSpinnerComponent {
    constructor() {
        this.size = 60;
        this.animationDuration = 1500;
        this.color = '#fff';
        this.ringsNum = 9;
        this.containerPadding = 2;
    }
    /**
     * @return {?}
     */
    get outerRingSize() {
        return this.size - this.containerPadding * 2;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`,
            padding: `${this.containerPadding}px`
        };
    }
    /**
     * @return {?}
     */
    get ringStyle() {
        return {
            borderTopColor: this.color,
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    get ringsStyles() {
        const /** @type {?} */ ringsStyles = [];
        const /** @type {?} */ ringBase = this.outerRingSize / (this.ringsNum);
        const /** @type {?} */ ringInc = ringBase;
        for (let /** @type {?} */ i = 1; i <= this.ringsNum; i++) {
            ringsStyles.push(Object.assign({}, this.ringStyle, { animationDelay: `${i * 50}ms`, height: `${ringBase + (i + 1) * ringInc}px`, width: `${ringBase + (i + 1) * ringInc}px` }));
        }
        return ringsStyles;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
FingerprintSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-fingerprint-spinner',
                template: `
    <div class="fingerprint-spinner" [ngStyle]="spinnerStyle">
      <div class="spinner-ring" *ngFor="let rs of ringsStyles" [ngStyle]="rs"></div>
    </div>

  `,
                styles: [`
    .fingerprint-spinner, .fingerprint-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }

    .fingerprint-spinner {
      height: 64px;
      width: 64px;
      padding: 2px;
      overflow: hidden;
      position: relative;
    }

    .fingerprint-spinner .spinner-ring {
      position: absolute;
      border-radius: 50%;
      border: 2px solid transparent;
      border-top-color: #ff1d5e;
      -webkit-animation: fingerprint-spinner-animation 1500ms cubic-bezier(0.680, -0.750, 0.265, 1.750) infinite forwards;
              animation: fingerprint-spinner-animation 1500ms cubic-bezier(0.680, -0.750, 0.265, 1.750) infinite forwards;
      margin: auto;
      bottom: 0;
      left: 0;
      right: 0;
      top: 0;
    }

    .fingerprint-spinner .spinner-ring:nth-child(1) {
      height: calc(60px / 9 + 0 * 60px / 9);
      width: calc(60px / 9 + 0 * 60px / 9);
      -webkit-animation-delay: calc(50ms * 1);
              animation-delay: calc(50ms * 1);
    }

    .fingerprint-spinner .spinner-ring:nth-child(2) {
      height: calc(60px / 9 + 1 * 60px / 9);
      width: calc(60px / 9 + 1 * 60px / 9);
      -webkit-animation-delay: calc(50ms * 2);
              animation-delay: calc(50ms * 2);
    }

    .fingerprint-spinner .spinner-ring:nth-child(3) {
      height: calc(60px / 9 + 2 * 60px / 9);
      width: calc(60px / 9 + 2 * 60px / 9);
      -webkit-animation-delay: calc(50ms * 3);
              animation-delay: calc(50ms * 3);
    }

    .fingerprint-spinner .spinner-ring:nth-child(4) {
      height: calc(60px / 9 + 3 * 60px / 9);
      width: calc(60px / 9 + 3 * 60px / 9);
      -webkit-animation-delay: calc(50ms * 4);
              animation-delay: calc(50ms * 4);
    }

    .fingerprint-spinner .spinner-ring:nth-child(5) {
      height: calc(60px / 9 + 4 * 60px / 9);
      width: calc(60px / 9 + 4 * 60px / 9);
      -webkit-animation-delay: calc(50ms * 5);
              animation-delay: calc(50ms * 5);
    }

    .fingerprint-spinner .spinner-ring:nth-child(6) {
      height: calc(60px / 9 + 5 * 60px / 9);
      width: calc(60px / 9 + 5 * 60px / 9);
      -webkit-animation-delay: calc(50ms * 6);
              animation-delay: calc(50ms * 6);
    }

    .fingerprint-spinner .spinner-ring:nth-child(7) {
      height: calc(60px / 9 + 6 * 60px / 9);
      width: calc(60px / 9 + 6 * 60px / 9);
      -webkit-animation-delay: calc(50ms * 7);
              animation-delay: calc(50ms * 7);
    }

    .fingerprint-spinner .spinner-ring:nth-child(8) {
      height: calc(60px / 9 + 7 * 60px / 9);
      width: calc(60px / 9 + 7 * 60px / 9);
      -webkit-animation-delay: calc(50ms * 8);
              animation-delay: calc(50ms * 8);
    }

    .fingerprint-spinner .spinner-ring:nth-child(9) {
      height: calc(60px / 9 + 8 * 60px / 9);
      width: calc(60px / 9 + 8 * 60px / 9);
      -webkit-animation-delay: calc(50ms * 9);
              animation-delay: calc(50ms * 9);
    }

    @-webkit-keyframes fingerprint-spinner-animation {
      100% {
        -webkit-transform: rotate( 360deg );
                transform: rotate( 360deg );
      }
    }

    @keyframes fingerprint-spinner-animation {
      100% {
        -webkit-transform: rotate( 360deg );
                transform: rotate( 360deg );
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
FingerprintSpinnerComponent.ctorParameters = () => [];
FingerprintSpinnerComponent.propDecorators = {
    'size': [{ type: Input },],
    'animationDuration': [{ type: Input },],
    'color': [{ type: Input },],
};

class FingerprintSpinnerModule {
}
FingerprintSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [FingerprintSpinnerComponent],
                declarations: [FingerprintSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
FingerprintSpinnerModule.ctorParameters = () => [];

class FulfillingBouncingCircleSpinnerComponent {
    constructor() {
        this.size = 60;
        this.animationDuration = 4000;
        this.color = '#fff';
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`,
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    get orbitStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`,
            borderColor: this.color,
            borderWidth: `${this.size * 0.03}px`,
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    get circleStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`,
            borderColor: this.color,
            color: this.color,
            borderWidth: `${this.size * 0.1}px`,
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
FulfillingBouncingCircleSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-fulfilling-bouncing-circle-spinner',
                template: `
    <div class="fulfilling-bouncing-circle-spinner" [ngStyle]="spinnerStyle">
      <div class="circle" [ngStyle]="circleStyle"></div>
      <div class="orbit" [ngStyle]="orbitStyle"></div>
    </div>
  `,
                styles: [`

    .fulfilling-bouncing-circle-spinner, .fulfilling-bouncing-circle-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .fulfilling-bouncing-circle-spinner {
      height: 60px;
      width: 60px;
      position: relative;
      -webkit-animation: fulfilling-bouncing-circle-spinner-animation infinite 4000ms ease;
              animation: fulfilling-bouncing-circle-spinner-animation infinite 4000ms ease;
    }
    .fulfilling-bouncing-circle-spinner .orbit {
      height: 60px;
      width: 60px;
      position: absolute;
      top: 0;
      left: 0;
      border-radius: 50%;
      border: calc(60px * 0.03) solid #ff1d5e;
      -webkit-animation: fulfilling-bouncing-circle-spinner-orbit-animation infinite 4000ms ease;
              animation: fulfilling-bouncing-circle-spinner-orbit-animation infinite 4000ms ease;
    }
    .fulfilling-bouncing-circle-spinner .circle {
      height: 60px;
      width: 60px;
      color: #ff1d5e;
      display: block;
      border-radius: 50%;
      position: relative;
      border: calc(60px * 0.1) solid #ff1d5e;
      -webkit-animation: fulfilling-bouncing-circle-spinner-circle-animation infinite 4000ms ease;
              animation: fulfilling-bouncing-circle-spinner-circle-animation infinite 4000ms ease;
      -webkit-transform: rotate(0deg) scale(1);
              transform: rotate(0deg) scale(1);
    }
    @-webkit-keyframes fulfilling-bouncing-circle-spinner-animation {
      0% {
        -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
      }
      100% {
        -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
      }
    }
    @keyframes fulfilling-bouncing-circle-spinner-animation {
      0% {
        -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
      }
      100% {
        -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
      }
    }
    @-webkit-keyframes fulfilling-bouncing-circle-spinner-orbit-animation {
      0% {
        -webkit-transform: scale(1);
                transform: scale(1);
      }
      50% {
        -webkit-transform: scale(1);
                transform: scale(1);
      }
      62.5% {
        -webkit-transform: scale(0.8);
                transform: scale(0.8);
      }
      75% {
        -webkit-transform: scale(1);
                transform: scale(1);
      }
      87.5% {
        -webkit-transform: scale(0.8);
                transform: scale(0.8);
      }
      100% {
        -webkit-transform: scale(1);
                transform: scale(1);
      }
    }
    @keyframes fulfilling-bouncing-circle-spinner-orbit-animation {
      0% {
        -webkit-transform: scale(1);
                transform: scale(1);
      }
      50% {
        -webkit-transform: scale(1);
                transform: scale(1);
      }
      62.5% {
        -webkit-transform: scale(0.8);
                transform: scale(0.8);
      }
      75% {
        -webkit-transform: scale(1);
                transform: scale(1);
      }
      87.5% {
        -webkit-transform: scale(0.8);
                transform: scale(0.8);
      }
      100% {
        -webkit-transform: scale(1);
                transform: scale(1);
      }
    }
    @-webkit-keyframes fulfilling-bouncing-circle-spinner-circle-animation {
      0% {
        -webkit-transform: scale(1);
                transform: scale(1);
        border-color: transparent;
        border-top-color: inherit;
      }
      16.7% {
        border-color: transparent;
        border-top-color: initial;
        border-right-color: initial;
      }
      33.4% {
        border-color: transparent;
        border-top-color: inherit;
        border-right-color: inherit;
        border-bottom-color: inherit;
      }
      50% {
        border-color: inherit;
        -webkit-transform: scale(1);
                transform: scale(1);
      }
      62.5% {
        border-color: inherit;
        -webkit-transform: scale(1.4);
                transform: scale(1.4);
      }
      75% {
        border-color: inherit;
        -webkit-transform: scale(1);
                transform: scale(1);
        opacity: 1;
      }
      87.5% {
        border-color: inherit;
        -webkit-transform: scale(1.4);
                transform: scale(1.4);
      }
      100% {
        border-color: transparent;
        border-top-color: inherit;
        -webkit-transform: scale(1);
                transform: scale(1);
      }
    }
    @keyframes fulfilling-bouncing-circle-spinner-circle-animation {
      0% {
        -webkit-transform: scale(1);
                transform: scale(1);
        border-color: transparent;
        border-top-color: inherit;
      }
      16.7% {
        border-color: transparent;
        border-top-color: initial;
        border-right-color: initial;
      }
      33.4% {
        border-color: transparent;
        border-top-color: inherit;
        border-right-color: inherit;
        border-bottom-color: inherit;
      }
      50% {
        border-color: inherit;
        -webkit-transform: scale(1);
                transform: scale(1);
      }
      62.5% {
        border-color: inherit;
        -webkit-transform: scale(1.4);
                transform: scale(1.4);
      }
      75% {
        border-color: inherit;
        -webkit-transform: scale(1);
                transform: scale(1);
        opacity: 1;
      }
      87.5% {
        border-color: inherit;
        -webkit-transform: scale(1.4);
                transform: scale(1.4);
      }
      100% {
        border-color: transparent;
        border-top-color: inherit;
        -webkit-transform: scale(1);
                transform: scale(1);
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
FulfillingBouncingCircleSpinnerComponent.ctorParameters = () => [];
FulfillingBouncingCircleSpinnerComponent.propDecorators = {
    'size': [{ type: Input },],
    'animationDuration': [{ type: Input },],
    'color': [{ type: Input },],
};

class FulfillingBouncingCircleSpinnerModule {
}
FulfillingBouncingCircleSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [FulfillingBouncingCircleSpinnerComponent],
                declarations: [FulfillingBouncingCircleSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
FulfillingBouncingCircleSpinnerModule.ctorParameters = () => [];

class FlowerSpinnerComponent {
    constructor() {
        this.size = 70;
        this.animationDuration = 2500;
        this.color = '#fff';
        this.smallerDotAnimationBaseName = 'flower-spinner-smaller-dot-animation';
        this.biggerDotAnimationBaseName = 'flower-spinner-bigger-dot-animation';
        this.currentSmallerDotAnimationBaseName = '';
        this.currentBiggerDotAnimationBaseName = '';
    }
    /**
     * @return {?}
     */
    get dotSize() {
        return this.size / 7;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`,
        };
    }
    /**
     * @return {?}
     */
    get dotsContainerStyle() {
        return {
            width: `${this.color}px`,
            height: `${this.color}px`,
        };
    }
    /**
     * @return {?}
     */
    get smallerDotStyle() {
        return {
            background: this.color,
            animationDuration: `${this.animationDuration}ms`,
            animationName: this.currentSmallerDotAnimationBaseName
        };
    }
    /**
     * @return {?}
     */
    get biggerDotStyle() {
        return {
            background: this.color,
            animationDuration: `${this.animationDuration}ms`,
            animationName: this.currentBiggerDotAnimationBaseName
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
    }
}
FlowerSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-flower-spinner',
                template: `
    <div class="flower-spinner" [ngStyle]="spinnerStyle">
      <div class="dots-container" [ngStyle]="dotsContainerStyle">
        <div class="bigger-dot" [ngStyle]="biggerDotStyle">
          <div class="smaller-dot" [ngStyle]="smallerDotStyle"></div>
        </div>
      </div>
    </div>
  `,
                styles: [`
    .flower-spinner, .flower-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }

    .flower-spinner {
      height: 70px;
      width: 70px;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
          -ms-flex-direction: row;
              flex-direction: row;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center;
    }

    .flower-spinner .dots-container {
      height: calc(70px / 7);
      width: calc(70px / 7);
    }

    .flower-spinner .smaller-dot {
      background: #ff1d5e;
      height: 100%;
      width: 100%;
      border-radius: 50%;
      -webkit-animation: flower-spinner-smaller-dot-animation 2.5s 0s infinite both;
              animation: flower-spinner-smaller-dot-animation 2.5s 0s infinite both;
    }

    .flower-spinner .bigger-dot {
      background: #ff1d5e;
      height: 100%;
      width: 100%;
      padding: 10%;
      border-radius: 50%;
      -webkit-animation: flower-spinner-bigger-dot-animation 2.5s 0s infinite both;
              animation: flower-spinner-bigger-dot-animation 2.5s 0s infinite both;
    }

    @-webkit-keyframes flower-spinner-bigger-dot-animation {
      0%, 100% {
        -webkit-box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
                box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
      }
      50% {
        -webkit-transform: rotate(180deg);
                transform: rotate(180deg);
      }
      25%, 75% {
        -webkit-box-shadow: rgb(255, 29, 94) 26px 0 0,
        rgb(255, 29, 94) -26px 0 0,
        rgb(255, 29, 94) 0 26px 0,
        rgb(255, 29, 94) 0 -26px 0,
        rgb(255, 29, 94) 19px -19px 0,
        rgb(255, 29, 94) 19px 19px 0,
        rgb(255, 29, 94) -19px -19px 0,
        rgb(255, 29, 94) -19px 19px 0;
                box-shadow: rgb(255, 29, 94) 26px 0 0,
        rgb(255, 29, 94) -26px 0 0,
        rgb(255, 29, 94) 0 26px 0,
        rgb(255, 29, 94) 0 -26px 0,
        rgb(255, 29, 94) 19px -19px 0,
        rgb(255, 29, 94) 19px 19px 0,
        rgb(255, 29, 94) -19px -19px 0,
        rgb(255, 29, 94) -19px 19px 0;
      }
      100% {
        -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
        -webkit-box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
                box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
      }
    }

    @keyframes flower-spinner-bigger-dot-animation {
      0%, 100% {
        -webkit-box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
                box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
      }
      50% {
        -webkit-transform: rotate(180deg);
                transform: rotate(180deg);
      }
      25%, 75% {
        -webkit-box-shadow: rgb(255, 29, 94) 26px 0 0,
        rgb(255, 29, 94) -26px 0 0,
        rgb(255, 29, 94) 0 26px 0,
        rgb(255, 29, 94) 0 -26px 0,
        rgb(255, 29, 94) 19px -19px 0,
        rgb(255, 29, 94) 19px 19px 0,
        rgb(255, 29, 94) -19px -19px 0,
        rgb(255, 29, 94) -19px 19px 0;
                box-shadow: rgb(255, 29, 94) 26px 0 0,
        rgb(255, 29, 94) -26px 0 0,
        rgb(255, 29, 94) 0 26px 0,
        rgb(255, 29, 94) 0 -26px 0,
        rgb(255, 29, 94) 19px -19px 0,
        rgb(255, 29, 94) 19px 19px 0,
        rgb(255, 29, 94) -19px -19px 0,
        rgb(255, 29, 94) -19px 19px 0;
      }
      100% {
        -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
        -webkit-box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
                box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
      }
    }

    @-webkit-keyframes flower-spinner-smaller-dot-animation {
      0%, 100% {
        -webkit-box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
                box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
      }
      25%, 75% {
        -webkit-box-shadow: rgb(255, 29, 94) 14px 0 0,
        rgb(255, 29, 94) -14px 0 0,
        rgb(255, 29, 94) 0 14px 0,
        rgb(255, 29, 94) 0 -14px 0,
        rgb(255, 29, 94) 10px -10px 0,
        rgb(255, 29, 94) 10px 10px 0,
        rgb(255, 29, 94) -10px -10px 0,
        rgb(255, 29, 94) -10px 10px 0;
                box-shadow: rgb(255, 29, 94) 14px 0 0,
        rgb(255, 29, 94) -14px 0 0,
        rgb(255, 29, 94) 0 14px 0,
        rgb(255, 29, 94) 0 -14px 0,
        rgb(255, 29, 94) 10px -10px 0,
        rgb(255, 29, 94) 10px 10px 0,
        rgb(255, 29, 94) -10px -10px 0,
        rgb(255, 29, 94) -10px 10px 0;
      }
      100% {
        -webkit-box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
                box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
      }
    }

    @keyframes flower-spinner-smaller-dot-animation {
      0%, 100% {
        -webkit-box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
                box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
      }
      25%, 75% {
        -webkit-box-shadow: rgb(255, 29, 94) 14px 0 0,
        rgb(255, 29, 94) -14px 0 0,
        rgb(255, 29, 94) 0 14px 0,
        rgb(255, 29, 94) 0 -14px 0,
        rgb(255, 29, 94) 10px -10px 0,
        rgb(255, 29, 94) 10px 10px 0,
        rgb(255, 29, 94) -10px -10px 0,
        rgb(255, 29, 94) -10px 10px 0;
                box-shadow: rgb(255, 29, 94) 14px 0 0,
        rgb(255, 29, 94) -14px 0 0,
        rgb(255, 29, 94) 0 14px 0,
        rgb(255, 29, 94) 0 -14px 0,
        rgb(255, 29, 94) 10px -10px 0,
        rgb(255, 29, 94) 10px 10px 0,
        rgb(255, 29, 94) -10px -10px 0,
        rgb(255, 29, 94) -10px 10px 0;
      }
      100% {
        -webkit-box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
                box-shadow: rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0,
        rgb(255, 29, 94) 0 0 0;
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
FlowerSpinnerComponent.ctorParameters = () => [];
FlowerSpinnerComponent.propDecorators = {
    'size': [{ type: Input },],
    'animationDuration': [{ type: Input },],
    'color': [{ type: Input },],
};

class FlowerSpinnerModule {
}
FlowerSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [FlowerSpinnerComponent],
                declarations: [FlowerSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
FlowerSpinnerModule.ctorParameters = () => [];

class FulfillingSquareSpinnerComponent {
    constructor() {
        this.animationDuration = 4000;
        this.size = 50;
        this.color = '#fff';
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`,
            borderColor: this.color,
        };
    }
    /**
     * @return {?}
     */
    get spinnerInnerStyle() {
        return {
            backgroundColor: this.color
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
FulfillingSquareSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-fulfilling-square-spinner',
                template: `
    <div class="fulfilling-square-spinner" [ngStyle]="spinnerStyle">
      <div class="spinner-inner" [ngStyle]="spinnerInnerStyle"></div>
    </div>
  `,
                styles: [`
    .fulfilling-square-spinner, .fulfilling-square-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .fulfilling-square-spinner {
      height: 50px;
      width: 50px;
      position: relative;
      border: 4px solid #ff1d5e;
      -webkit-animation: fulfilling-square-spinner-animation 4s infinite ease;
              animation: fulfilling-square-spinner-animation 4s infinite ease;
    }
    .fulfilling-square-spinner .spinner-inner {
      vertical-align: top;
      display: inline-block;
      background-color: #ff1d5e;
      width: 100%;
      opacity: 1;
      -webkit-animation: fulfilling-square-spinner-inner-animation 4s infinite ease-in;
              animation: fulfilling-square-spinner-inner-animation 4s infinite ease-in;
    }
    @-webkit-keyframes fulfilling-square-spinner-animation {
      0% {
        -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
      }
      25% {
        -webkit-transform: rotate(180deg);
                transform: rotate(180deg);
      }
      50% {
        -webkit-transform: rotate(180deg);
                transform: rotate(180deg);
      }
      75% {
        -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
      }
      100% {
        -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
      }
    }
    @keyframes fulfilling-square-spinner-animation {
      0% {
        -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
      }
      25% {
        -webkit-transform: rotate(180deg);
                transform: rotate(180deg);
      }
      50% {
        -webkit-transform: rotate(180deg);
                transform: rotate(180deg);
      }
      75% {
        -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
      }
      100% {
        -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
      }
    }
    @-webkit-keyframes fulfilling-square-spinner-inner-animation {
      0% {
        height: 0;
      }
      25% {
        height: 0;
      }
      50% {
        height: 100%;
      }
      75% {
        height: 100%;
      }
      100% {
        height: 0;
      }
    }
    @keyframes fulfilling-square-spinner-inner-animation {
      0% {
        height: 0;
      }
      25% {
        height: 0;
      }
      50% {
        height: 100%;
      }
      75% {
        height: 100%;
      }
      100% {
        height: 0;
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
FulfillingSquareSpinnerComponent.ctorParameters = () => [];
FulfillingSquareSpinnerComponent.propDecorators = {
    'animationDuration': [{ type: Input },],
    'size': [{ type: Input },],
    'color': [{ type: Input },],
};

class FulfillingSquareSpinnerModule {
}
FulfillingSquareSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [FulfillingSquareSpinnerComponent],
                declarations: [FulfillingSquareSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
FulfillingSquareSpinnerModule.ctorParameters = () => [];

class HalfCircleSpinnerComponent {
    constructor() {
        this.animationDuration = 1000;
        this.size = 60;
        this.color = '#fff';
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`,
        };
    }
    /**
     * @return {?}
     */
    get circleStyle() {
        return {
            borderWidth: `${this.size / 10}px`,
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    get circle1Style() {
        return Object.assign({}, this.circleStyle, { borderTopColor: this.color });
    }
    /**
     * @return {?}
     */
    get circle2Style() {
        return Object.assign({}, this.circleStyle, { borderBottomColor: this.color });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
HalfCircleSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-half-circle-spinner',
                template: `
    <div class="half-circle-spinner" [ngStyle]="spinnerStyle">
      <div class="circle circle-1" [ngStyle]="circle1Style"></div>
      <div class="circle circle-2" [ngStyle]="circle2Style"></div>
    </div>
  `,
                styles: [`
    .half-circle-spinner, .half-circle-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .half-circle-spinner {
      width: 60px;
      height: 60px;
      border-radius: 100%;
      position: relative;
    }
    .half-circle-spinner .circle {
      content: "";
      position: absolute;
      width: 100%;
      height: 100%;
      border-radius: 100%;
      border: calc(60px / 10) solid transparent;
    }
    .half-circle-spinner .circle.circle-1 {
      border-top-color: #ff1d5e;
      -webkit-animation: half-circle-spinner-animation 1s infinite;
              animation: half-circle-spinner-animation 1s infinite;
    }
    .half-circle-spinner .circle.circle-2 {
      border-bottom-color: #ff1d5e;
      -webkit-animation: half-circle-spinner-animation 1s infinite alternate;
              animation: half-circle-spinner-animation 1s infinite alternate;
    }
    @-webkit-keyframes half-circle-spinner-animation {
      0% {
        -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
      }
      100%{
        -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
      }
    }
    @keyframes half-circle-spinner-animation {
      0% {
        -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
      }
      100%{
        -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
HalfCircleSpinnerComponent.ctorParameters = () => [];
HalfCircleSpinnerComponent.propDecorators = {
    'animationDuration': [{ type: Input },],
    'size': [{ type: Input },],
    'color': [{ type: Input },],
};

class HalfCircleSpinnerModule {
}
HalfCircleSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [HalfCircleSpinnerComponent],
                declarations: [HalfCircleSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
HalfCircleSpinnerModule.ctorParameters = () => [];

class HollowDotsSpinnerComponent {
    constructor() {
        this.animationDuration = 1000;
        this.dotSize = 15;
        this.dotsNum = 3;
        this.color = '#fff';
    }
    /**
     * @return {?}
     */
    get horizontalMargin() {
        return this.dotSize / 2;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.dotSize}px`,
            width: `${this.dotSize}px`,
        };
    }
    /**
     * @return {?}
     */
    get dotStyle() {
        return {
            width: `${this.dotSize}px`,
            height: `${this.dotSize}px`,
            margin: `0 ${this.horizontalMargin}px`,
            borderWidth: `${this.dotSize / 5}px`,
            borderColor: this.color,
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    get dotsStyles() {
        const /** @type {?} */ dotsStyles = [];
        const /** @type {?} */ delayModifier = 0.3;
        const /** @type {?} */ basicDelay = 1000;
        for (let /** @type {?} */ i = 1; i <= this.dotsNum; i++) {
            const /** @type {?} */ style = Object.assign({}, this.dotStyle, { animationDelay: `${basicDelay * i * delayModifier}ms` });
            dotsStyles.push(style);
        }
        return dotsStyles;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
HollowDotsSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-hollow-dots-spinner',
                template: `
    <div class="hollow-dots-spinner" [ngStyle]="spinnerStyle">
      <div class="dot" *ngFor="let ds of dotsStyles" [ngStyle]="ds"></div>
    </div>
  `,
                styles: [`

    .hollow-dots-spinner, .hollow-dots-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .hollow-dots-spinner {
      height: 15px;
      width: calc(30px * 3);
    }
    .hollow-dots-spinner .dot {
      width: 15px;
      height: 15px;
      margin: 0 calc(15px / 2);
      border: calc(15px / 5) solid #ff1d5e;
      border-radius: 50%;
      float: left;
      -webkit-transform: scale(0);
              transform: scale(0);
      -webkit-animation: hollow-dots-spinner-animation 1000ms ease infinite 0ms;
              animation: hollow-dots-spinner-animation 1000ms ease infinite 0ms;
    }
    .hollow-dots-spinner .dot:nth-child(1) {
      -webkit-animation-delay: calc(300ms * 1);
              animation-delay: calc(300ms * 1);
    }
    .hollow-dots-spinner .dot:nth-child(2) {
      -webkit-animation-delay: calc(300ms * 2);
              animation-delay: calc(300ms * 2);
    }
    .hollow-dots-spinner .dot:nth-child(3) {
      -webkit-animation-delay: calc(300ms * 3);
              animation-delay: calc(300ms * 3);
    }
    @-webkit-keyframes hollow-dots-spinner-animation {
      50% {
        -webkit-transform: scale(1);
                transform: scale(1);
        opacity: 1;
      }
      100% {
        opacity: 0;
      }
    }
    @keyframes hollow-dots-spinner-animation {
      50% {
        -webkit-transform: scale(1);
                transform: scale(1);
        opacity: 1;
      }
      100% {
        opacity: 0;
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
HollowDotsSpinnerComponent.ctorParameters = () => [];
HollowDotsSpinnerComponent.propDecorators = {
    'animationDuration': [{ type: Input },],
    'dotSize': [{ type: Input },],
    'dotsNum': [{ type: Input },],
    'color': [{ type: Input },],
};

class HollowDotsSpinnerModule {
}
HollowDotsSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [HollowDotsSpinnerComponent],
                declarations: [HollowDotsSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
HollowDotsSpinnerModule.ctorParameters = () => [];

class IntersectingCirclesSpinnerComponent {
    constructor() {
        this.animationDuration = 1200;
        this.size = 70;
        this.color = '#fff';
    }
    /**
     * @return {?}
     */
    get circleSize() {
        return this.size / 2;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            width: `${this.size}px`,
            height: `${this.size}px`
        };
    }
    /**
     * @return {?}
     */
    get spinnerBlockStyle() {
        return {
            animationDuration: `${this.animationDuration}ms`,
            width: `${this.circleSize}px`,
            height: `${this.circleSize}px`
        };
    }
    /**
     * @return {?}
     */
    get circleStyle() {
        return {
            borderColor: this.color
        };
    }
    /**
     * @return {?}
     */
    get circleStyles() {
        const /** @type {?} */ circlesPositions = [
            { top: 0, left: 0 },
            { left: `${this.circleSize * -0.36}px`, top: `${this.circleSize * 0.2}px` },
            { left: `${this.circleSize * -0.36}px`, top: `${this.circleSize * -0.2}px` },
            { left: 0, top: `${this.circleSize * -0.36}px` },
            { left: `${this.circleSize * 0.36}px`, top: `${this.circleSize * -0.2}px` },
            { left: `${this.circleSize * 0.36}px`, top: `${this.circleSize * 0.2}px` },
            { left: 0, top: `${this.circleSize * 0.36}px` }
        ];
        return circlesPositions.map((cp) => {
            return Object.assign({ cp }, this.circleStyle);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
IntersectingCirclesSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-intersecting-circles-spinner',
                template: `
    <div class="intersecting-circles-spinner" [ngStyle]="spinnerStyle">
      <div class="spinnerBlock" [ngStyle]="spinnerBlockStyle">
        <span class="circle" *ngFor="let cs of circleStyles" [ngStyle]="cs"></span>
      </div>
    </div>
  `,
                styles: [`
    .intersecting-circles-spinner, .intersecting-circles-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .intersecting-circles-spinner {
      height: 70px;
      width: 70px;
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
          -ms-flex-direction: row;
              flex-direction: row;
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
    }
    .intersecting-circles-spinner .spinnerBlock {
      -webkit-animation: intersecting-circles-spinners-animation 1200ms linear infinite;
              animation: intersecting-circles-spinners-animation 1200ms linear infinite;
      -webkit-transform-origin: center;
              transform-origin: center;
      display: block;
      height: 35px;
      width: 35px;
    }
    .intersecting-circles-spinner .circle {
      display: block;
      border: 2px solid #ff1d5e;
      border-radius: 50%;
      height: 100%;
      width: 100%;
      position: absolute;
      left: 0;
      top: 0;
    }
    .intersecting-circles-spinner .circle:nth-child(1) {
      left: 0;
      top: 0;
    }
    .intersecting-circles-spinner .circle:nth-child(2) {
      left: calc(35px * -0.36);
      top: calc(35px * 0.2);
    }
    .intersecting-circles-spinner .circle:nth-child(3) {
      left: calc(35px * -0.36);
      top: calc(35px * -0.2);
    }
    .intersecting-circles-spinner .circle:nth-child(4) {
      left: 0;
      top: calc(35px * -0.36);
    }
    .intersecting-circles-spinner .circle:nth-child(5) {
      left: calc(35px * 0.36);
      top: calc(35px * -0.2);
    }
    .intersecting-circles-spinner .circle:nth-child(6) {
      left: calc(35px * 0.36);
      top: calc(35px * 0.2);
    }
    .intersecting-circles-spinner .circle:nth-child(7) {
      left: 0;
      top: calc(35px * 0.36);
    }
    @-webkit-keyframes intersecting-circles-spinners-animation {
      from { -webkit-transform: rotate(0deg); transform: rotate(0deg); }
      to { -webkit-transform: rotate(360deg); transform: rotate(360deg); }
    }
    @keyframes intersecting-circles-spinners-animation {
      from { -webkit-transform: rotate(0deg); transform: rotate(0deg); }
      to { -webkit-transform: rotate(360deg); transform: rotate(360deg); }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
IntersectingCirclesSpinnerComponent.ctorParameters = () => [];
IntersectingCirclesSpinnerComponent.propDecorators = {
    'animationDuration': [{ type: Input },],
    'size': [{ type: Input },],
    'color': [{ type: Input },],
};

class IntersectingCirclesSpinnerModule {
}
IntersectingCirclesSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [IntersectingCirclesSpinnerComponent],
                declarations: [IntersectingCirclesSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
IntersectingCirclesSpinnerModule.ctorParameters = () => [];

class LoopingRhumbusesSpinnerComponent {
    constructor() {
        this.animationDuration = 2500;
        this.rhombusSize = 15;
        this.color = '#fff';
        this.rhombusesNum = 3;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.rhombusSize}px`,
            width: `${this.rhombusSize * 4}px`
        };
    }
    /**
     * @return {?}
     */
    get rhombusStyle() {
        return {
            height: `${this.rhombusSize}px`,
            width: `${this.rhombusSize}px`,
            background: this.color,
            animationDuration: `${this.animationDuration}ms`,
            left: `${this.rhombusSize * 4}px`
        };
    }
    /**
     * @return {?}
     */
    get rhombusesStyles() {
        const /** @type {?} */ rhombusesStyles = [];
        const /** @type {?} */ delay = -this.animationDuration / 1.5;
        for (let /** @type {?} */ i = 1; i <= this.rhombusesNum; i++) {
            const /** @type {?} */ style = Object.assign({
                animationDelay: `${i * delay}ms`
            }, this.rhombusStyle);
            rhombusesStyles.push(style);
        }
        return rhombusesStyles;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
LoopingRhumbusesSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-looping-rhombuses-spinner',
                template: `
    <div class="looping-rhombuses-spinner" [ngStyle]="spinnerStyle">
      <div class="rhombus"
           *ngFor="let rs of rhombusesStyles"
           [ngStyle]="rs">
      </div>
    </div>
  `,
                styles: [`
    .looping-rhombuses-spinner, .looping-rhombuses-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .looping-rhombuses-spinner {
      width: calc(15px * 4);
      height: 15px;
      position: relative;
    }
    .looping-rhombuses-spinner .rhombus {
      height: 15px;
      width: 15px;
      background: #ff1d5e;
      left: calc(15px * 4);
      position: absolute;
      margin: 0 auto;
      border-radius: 2px;
      -webkit-transform: translateY(0) rotate(45deg) scale(0);
              transform: translateY(0) rotate(45deg) scale(0);
      -webkit-animation: looping-rhombuses-spinner-animation 2500ms linear infinite;
              animation: looping-rhombuses-spinner-animation 2500ms linear infinite;
    }
    .looping-rhombuses-spinner .rhombus:nth-child(1) {
      -webkit-animation-delay: calc(2500ms * 1 / -1.5);
              animation-delay: calc(2500ms * 1 / -1.5);
    }
    .looping-rhombuses-spinner .rhombus:nth-child(2) {
      -webkit-animation-delay: calc(2500ms * 2 / -1.5);
              animation-delay: calc(2500ms * 2 / -1.5);
    }
    .looping-rhombuses-spinner .rhombus:nth-child(3) {
      -webkit-animation-delay: calc(2500ms * 3 / -1.5);
              animation-delay: calc(2500ms * 3 / -1.5);
    }
    @-webkit-keyframes looping-rhombuses-spinner-animation {
      0% {
        -webkit-transform: translateX(0) rotate(45deg) scale(0);
                transform: translateX(0) rotate(45deg) scale(0);
      }
      50% {
        -webkit-transform: translateX(-233%) rotate(45deg) scale(1);
                transform: translateX(-233%) rotate(45deg) scale(1);
      }
      100% {
        -webkit-transform: translateX(-466%) rotate(45deg) scale(0);
                transform: translateX(-466%) rotate(45deg) scale(0);
      }
    }
    @keyframes looping-rhombuses-spinner-animation {
      0% {
        -webkit-transform: translateX(0) rotate(45deg) scale(0);
                transform: translateX(0) rotate(45deg) scale(0);
      }
      50% {
        -webkit-transform: translateX(-233%) rotate(45deg) scale(1);
                transform: translateX(-233%) rotate(45deg) scale(1);
      }
      100% {
        -webkit-transform: translateX(-466%) rotate(45deg) scale(0);
                transform: translateX(-466%) rotate(45deg) scale(0);
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
LoopingRhumbusesSpinnerComponent.ctorParameters = () => [];
LoopingRhumbusesSpinnerComponent.propDecorators = {
    'animationDuration': [{ type: Input },],
    'rhombusSize': [{ type: Input },],
    'color': [{ type: Input },],
};

class LoopingRhumbusesSpinnerModule {
}
LoopingRhumbusesSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [LoopingRhumbusesSpinnerComponent],
                declarations: [LoopingRhumbusesSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
LoopingRhumbusesSpinnerModule.ctorParameters = () => [];

class OrbitSpinnerComponent {
    constructor() {
        this.animationDuration = 1000;
        this.size = 50;
        this.color = '#fff';
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`
        };
    }
    /**
     * @return {?}
     */
    get orbitStyle() {
        return {
            borderColor: this.color,
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
OrbitSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-orbit-spinner',
                template: `
    <div class="orbit-spinner" [ngStyle]="spinnerStyle">
      <div class="orbit one" [ngStyle]="orbitStyle"></div>
      <div class="orbit two" [ngStyle]="orbitStyle"></div>
      <div class="orbit three" [ngStyle]="orbitStyle"></div>
    </div>
  `,
                styles: [`
    .orbit-spinner, .orbit-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .orbit-spinner {
      height: 55px;
      width: 55px;
      border-radius: 50%;
      -webkit-perspective: 800px;
              perspective: 800px;
    }
    .orbit-spinner .orbit {
      position: absolute;
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
      width: 100%;
      height: 100%;
      border-radius: 50%;
    }
    .orbit-spinner .orbit:nth-child(1) {
      left: 0;
      top: 0;
      -webkit-animation: orbit-spinner-orbit-one-animation 1200ms linear infinite;
              animation: orbit-spinner-orbit-one-animation 1200ms linear infinite;
      border-bottom: 3px solid #ff1d5e;
    }
    .orbit-spinner .orbit:nth-child(2) {
      right: 0;
      top: 0;
      -webkit-animation: orbit-spinner-orbit-two-animation 1200ms linear infinite;
              animation: orbit-spinner-orbit-two-animation 1200ms linear infinite;
      border-right: 3px solid #ff1d5e;
    }
    .orbit-spinner .orbit:nth-child(3) {
      right: 0;
      bottom: 0;
      -webkit-animation: orbit-spinner-orbit-three-animation 1200ms linear infinite;
              animation: orbit-spinner-orbit-three-animation 1200ms linear infinite;
      border-top: 3px solid #ff1d5e;
    }
    @-webkit-keyframes orbit-spinner-orbit-one-animation {
      0%{
        -webkit-transform: rotateX(35deg) rotateY(-45deg) rotateZ(0deg);
                transform: rotateX(35deg) rotateY(-45deg) rotateZ(0deg);
      }
      100% {
        -webkit-transform: rotateX(35deg) rotateY(-45deg) rotateZ(360deg);
                transform: rotateX(35deg) rotateY(-45deg) rotateZ(360deg);
      }
    }
    @keyframes orbit-spinner-orbit-one-animation {
      0%{
        -webkit-transform: rotateX(35deg) rotateY(-45deg) rotateZ(0deg);
                transform: rotateX(35deg) rotateY(-45deg) rotateZ(0deg);
      }
      100% {
        -webkit-transform: rotateX(35deg) rotateY(-45deg) rotateZ(360deg);
                transform: rotateX(35deg) rotateY(-45deg) rotateZ(360deg);
      }
    }
    @-webkit-keyframes orbit-spinner-orbit-two-animation {
      0% {
        -webkit-transform: rotateX(50deg) rotateY(10deg) rotateZ(0deg);
                transform: rotateX(50deg) rotateY(10deg) rotateZ(0deg);
      }
      100% {
        -webkit-transform: rotateX(50deg) rotateY(10deg) rotateZ(360deg);
                transform: rotateX(50deg) rotateY(10deg) rotateZ(360deg);
      }
    }
    @keyframes orbit-spinner-orbit-two-animation {
      0% {
        -webkit-transform: rotateX(50deg) rotateY(10deg) rotateZ(0deg);
                transform: rotateX(50deg) rotateY(10deg) rotateZ(0deg);
      }
      100% {
        -webkit-transform: rotateX(50deg) rotateY(10deg) rotateZ(360deg);
                transform: rotateX(50deg) rotateY(10deg) rotateZ(360deg);
      }
    }
    @-webkit-keyframes orbit-spinner-orbit-three-animation {
      0% {
        -webkit-transform: rotateX(35deg) rotateY(55deg) rotateZ(0deg);
                transform: rotateX(35deg) rotateY(55deg) rotateZ(0deg);
      }
      100% {
        -webkit-transform: rotateX(35deg) rotateY(55deg) rotateZ(360deg);
                transform: rotateX(35deg) rotateY(55deg) rotateZ(360deg);
      }
    }
    @keyframes orbit-spinner-orbit-three-animation {
      0% {
        -webkit-transform: rotateX(35deg) rotateY(55deg) rotateZ(0deg);
                transform: rotateX(35deg) rotateY(55deg) rotateZ(0deg);
      }
      100% {
        -webkit-transform: rotateX(35deg) rotateY(55deg) rotateZ(360deg);
                transform: rotateX(35deg) rotateY(55deg) rotateZ(360deg);
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
OrbitSpinnerComponent.ctorParameters = () => [];
OrbitSpinnerComponent.propDecorators = {
    'animationDuration': [{ type: Input },],
    'size': [{ type: Input },],
    'color': [{ type: Input },],
};

class OrbitSpinnerModule {
}
OrbitSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [OrbitSpinnerComponent],
                declarations: [OrbitSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
OrbitSpinnerModule.ctorParameters = () => [];

class PixelSpinnerComponent {
    constructor() {
        this.animationDuration = 1000;
        this.size = 50;
        this.color = '#fff';
        this.animationBaseName = 'pixel-spinner-animation';
        this.currentAnimationName = '';
    }
    /**
     * @return {?}
     */
    get pixelSize() {
        return this.size / 7;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            width: `${this.size}px`,
            height: `${this.size}px`
        };
    }
    /**
     * @return {?}
     */
    get spinnerInnerStyle() {
        return {
            animationDuration: `${this.animationDuration}ms`,
            animationName: this.currentAnimationName,
            width: `${this.pixelSize}px`,
            height: `${this.pixelSize}px`,
            backgroundColor: this.color,
            color: this.color,
            boxShadow: `
                        ${this.pixelSize * 1.5}px ${this.pixelSize * 1.5}px 0 0,
                        ${this.pixelSize * -1.5}px ${this.pixelSize * -1.5}px 0 0,
                        ${this.pixelSize * 1.5}px ${this.pixelSize * -1.5}px 0 0,
                        ${this.pixelSize * -1.5}px ${this.pixelSize * 1.5}px 0 0,
                        0 ${this.pixelSize * 1.5}px 0 0,
                        ${this.pixelSize * 1.5}px 0 0 0,
                        ${this.pixelSize * -1.5}px 0 0 0,
                        0 ${this.pixelSize * -1.5}px 0 0
                      `
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
PixelSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-pixel-spinner',
                template: `
    <div class="pixel-spinner" [ngStyle]="spinnerStyle">
      <div class="pixel-spinner-inner" [ngStyle]="spinnerInnerStyle"></div>
    </div>
  `,
                styles: [`
    .pixel-spinner, .pixel-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }

    .pixel-spinner {
      height: 70px;
      width: 70px;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
          -ms-flex-direction: row;
              flex-direction: row;
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
    }

    .pixel-spinner .pixel-spinner-inner {
      width: calc(70px / 7);
      height: calc(70px / 7);
      background-color: #ff1d5e;
      color: #ff1d5e;
      -webkit-box-shadow: 15px 15px 0 0,
      -15px -15px 0 0,
      15px -15px 0 0,
      -15px 15px 0 0,
      0 15px 0 0,
      15px 0 0 0,
      -15px 0 0 0,
      0 -15px 0 0;
              box-shadow: 15px 15px 0 0,
      -15px -15px 0 0,
      15px -15px 0 0,
      -15px 15px 0 0,
      0 15px 0 0,
      15px 0 0 0,
      -15px 0 0 0,
      0 -15px 0 0;
      -webkit-animation: pixel-spinner-animation 2000ms linear infinite;
              animation: pixel-spinner-animation 2000ms linear infinite;
    }

    @-webkit-keyframes pixel-spinner-animation {
      50% {
        -webkit-box-shadow: 20px 20px 0 0,
        -20px -20px 0 0,
        20px -20px 0 0,
        -20px 20px 0 0,
        0 10px 0 0,
        10px 0 0 0,
        -10px 0 0 0,
        0 -10px 0 0;
                box-shadow: 20px 20px 0 0,
        -20px -20px 0 0,
        20px -20px 0 0,
        -20px 20px 0 0,
        0 10px 0 0,
        10px 0 0 0,
        -10px 0 0 0,
        0 -10px 0 0;
      }
      75% {
        -webkit-box-shadow: 20px 20px 0 0,
        -20px -20px 0 0,
        20px -20px 0 0,
        -20px 20px 0 0,
        0 10px 0 0,
        10px 0 0 0,
        -10px 0 0 0,
        0 -10px 0 0;
                box-shadow: 20px 20px 0 0,
        -20px -20px 0 0,
        20px -20px 0 0,
        -20px 20px 0 0,
        0 10px 0 0,
        10px 0 0 0,
        -10px 0 0 0,
        0 -10px 0 0;
      }
      100% {
        -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
      }
    }

    @keyframes pixel-spinner-animation {
      50% {
        -webkit-box-shadow: 20px 20px 0 0,
        -20px -20px 0 0,
        20px -20px 0 0,
        -20px 20px 0 0,
        0 10px 0 0,
        10px 0 0 0,
        -10px 0 0 0,
        0 -10px 0 0;
                box-shadow: 20px 20px 0 0,
        -20px -20px 0 0,
        20px -20px 0 0,
        -20px 20px 0 0,
        0 10px 0 0,
        10px 0 0 0,
        -10px 0 0 0,
        0 -10px 0 0;
      }
      75% {
        -webkit-box-shadow: 20px 20px 0 0,
        -20px -20px 0 0,
        20px -20px 0 0,
        -20px 20px 0 0,
        0 10px 0 0,
        10px 0 0 0,
        -10px 0 0 0,
        0 -10px 0 0;
                box-shadow: 20px 20px 0 0,
        -20px -20px 0 0,
        20px -20px 0 0,
        -20px 20px 0 0,
        0 10px 0 0,
        10px 0 0 0,
        -10px 0 0 0,
        0 -10px 0 0;
      }
      100% {
        -webkit-transform: rotate(360deg);
                transform: rotate(360deg);
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
PixelSpinnerComponent.ctorParameters = () => [];
PixelSpinnerComponent.propDecorators = {
    'animationDuration': [{ type: Input },],
    'size': [{ type: Input },],
    'color': [{ type: Input },],
};

class PixelSpinnerModule {
}
PixelSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [PixelSpinnerComponent],
                declarations: [PixelSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
PixelSpinnerModule.ctorParameters = () => [];

class RadarSpinnerComponent {
    constructor() {
        this.size = 110;
        this.animationDuration = 2000;
        this.color = '#fff';
        this.circlesNum = 4;
    }
    /**
     * @return {?}
     */
    get borderWidth() {
        return this.size * 5 / 110;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`
        };
    }
    /**
     * @return {?}
     */
    get circleStyle() {
        return {
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    get circleInnerContainerStyle() {
        return {
            borderWidth: `${this.borderWidth}px`
        };
    }
    /**
     * @return {?}
     */
    get circleInnerStyle() {
        return {
            borderLeftColor: this.color,
            borderRightColor: this.color,
            borderWidth: `${this.borderWidth}px`
        };
    }
    /**
     * @return {?}
     */
    get circlesStyles() {
        const /** @type {?} */ circlesStyles = [];
        const /** @type {?} */ delay = this.animationDuration * 0.15;
        for (let /** @type {?} */ i = 0; i < this.circlesNum; i++) {
            circlesStyles.push(Object.assign({
                padding: `${this.borderWidth * 2 * i}px`,
                animationDelay: `${i === this.circlesNum - 1 ? 0 : delay}ms`
            }, this.circleStyle));
        }
        return circlesStyles;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
RadarSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-radar-spinner',
                template: `
    <div class="radar-spinner" [ngStyle]="spinnerStyle">
      <div class="circle" *ngFor="let cs of circlesStyles" [ngStyle]="cs">
        <div class="circle-inner-container" [ngStyle]="circleInnerContainerStyle">
          <div class="circle-inner" [ngStyle]="circleInnerStyle"></div>
        </div>
      </div>
    </div>
  `,
                styles: [`
    .radar-spinner, .radar-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .radar-spinner {
      height: 60px;
      width: 60px;
      position: relative;
    }
    .radar-spinner .circle {
      position: absolute;
      height: 100%;
      width: 100%;
      top: 0;
      left: 0;
      -webkit-animation: radar-spinner-animation 2s infinite;
              animation: radar-spinner-animation 2s infinite;
    }
    .radar-spinner .circle:nth-child(1) {
      padding: calc(60px * 5 * 2 * 0 / 110);
      -webkit-animation-delay: 300ms;
              animation-delay: 300ms;
    }
    .radar-spinner .circle:nth-child(2) {
      padding: calc(60px * 5 * 2 * 1 / 110);
      -webkit-animation-delay: 300ms;
              animation-delay: 300ms;
    }
    .radar-spinner .circle:nth-child(3) {
      padding: calc(60px * 5 * 2 * 2 / 110);
      -webkit-animation-delay: 300ms;
              animation-delay: 300ms;
    }
    .radar-spinner .circle:nth-child(4) {
      padding: calc(60px * 5 * 2 * 3 / 110);
      -webkit-animation-delay: 0ms;
              animation-delay: 0ms;
    }
    .radar-spinner .circle-inner, .radar-spinner .circle-inner-container {
      height: 100%;
      width: 100%;
      border-radius: 50%;
      border: calc(60px * 5 / 110) solid transparent;
    }
    .radar-spinner .circle-inner {
      border-left-color: #ff1d5e;
      border-right-color: #ff1d5e;
    }
    @-webkit-keyframes radar-spinner-animation {
      50% {
        -webkit-transform: rotate(180deg);
                transform: rotate(180deg);
      }
      100% {
        -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
      }
    }
    @keyframes radar-spinner-animation {
      50% {
        -webkit-transform: rotate(180deg);
                transform: rotate(180deg);
      }
      100% {
        -webkit-transform: rotate(0deg);
                transform: rotate(0deg);
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
RadarSpinnerComponent.ctorParameters = () => [];
RadarSpinnerComponent.propDecorators = {
    'size': [{ type: Input },],
    'animationDuration': [{ type: Input },],
    'color': [{ type: Input },],
};

class RadarSpinnerModule {
}
RadarSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [RadarSpinnerComponent],
                declarations: [RadarSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
RadarSpinnerModule.ctorParameters = () => [];

class ScalingSquaresSpinnerComponent {
    constructor() {
        this.size = 65;
        this.color = '#fff';
        this.animationDuration = 1250;
        this.squaresNum = 4;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`,
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    get squareStyle() {
        return {
            height: `${this.size * 0.25 / 1.3}px`,
            width: `${this.size * 0.25 / 1.3}px`,
            animationDuration: `${this.animationDuration}ms`,
            borderWidth: `${this.size * 0.04 / 1.3}px`,
            borderColor: this.color
        };
    }
    /**
     * @return {?}
     */
    get squaresStyles() {
        const /** @type {?} */ squaresStyles = [];
        for (let /** @type {?} */ i = 1; i <= this.squaresNum; i++) {
            squaresStyles.push(Object.assign({}, this.squareStyle));
        }
        return squaresStyles;
    }
    /**
     * @param {?} i
     * @return {?}
     */
    childClass(i) {
        return `square-${i + 1}`;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ScalingSquaresSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-scaling-squares-spinner',
                template: `
    <div class="scaling-squares-spinner" [ngStyle]="spinnerStyle">
      <div class="square"
           *ngFor="let ss of squaresStyles; let i = index;"
           [ngClass]="childClass(i)"
           [ngStyle]="ss">
      </div>
    </div>
  `,
                styles: [`
    .scaling-squares-spinner, .scaling-squares-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .scaling-squares-spinner {
      height: 65px;
      width: 65px;
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
          -ms-flex-direction: row;
              flex-direction: row;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center;
      -webkit-animation: scaling-squares-animation 1250ms;
              animation: scaling-squares-animation 1250ms;
      -webkit-animation-iteration-count: infinite;
              animation-iteration-count: infinite;
      -webkit-transform: rotate(0deg);
              transform: rotate(0deg);
    }
    .scaling-squares-spinner .square {
      height: calc(65px * 0.25 / 1.3);
      width: calc(65px * 0.25 / 1.3);
      margin-right: auto;
      margin-left: auto;
      border: calc(65px * 0.04 / 1.3) solid #ff1d5e;
      position: absolute;
      -webkit-animation-duration: 1250ms;
              animation-duration: 1250ms;
      -webkit-animation-iteration-count: infinite;
              animation-iteration-count: infinite;
    }
    .scaling-squares-spinner .square:nth-child(1) {
      -webkit-animation-name: scaling-squares-spinner-animation-child-1;
              animation-name: scaling-squares-spinner-animation-child-1;
    }
    .scaling-squares-spinner .square:nth-child(2) {
      -webkit-animation-name: scaling-squares-spinner-animation-child-2;
              animation-name: scaling-squares-spinner-animation-child-2;
    }
    .scaling-squares-spinner .square:nth-child(3) {
      -webkit-animation-name: scaling-squares-spinner-animation-child-3;
              animation-name: scaling-squares-spinner-animation-child-3;
    }
    .scaling-squares-spinner .square:nth-child(4) {
      -webkit-animation-name: scaling-squares-spinner-animation-child-4;
              animation-name: scaling-squares-spinner-animation-child-4;
    }
    @-webkit-keyframes scaling-squares-animation {
      50% {
        -webkit-transform: rotate(90deg);
                transform: rotate(90deg);
      }
      100% {
        -webkit-transform: rotate(180deg);
                transform: rotate(180deg);
      }
    }
    @keyframes scaling-squares-animation {
      50% {
        -webkit-transform: rotate(90deg);
                transform: rotate(90deg);
      }
      100% {
        -webkit-transform: rotate(180deg);
                transform: rotate(180deg);
      }
    }
    @-webkit-keyframes scaling-squares-spinner-animation-child-1 {
      50% {
        -webkit-transform: translate(150%,150%) scale(2,2);
                transform: translate(150%,150%) scale(2,2);
      }
    }
    @keyframes scaling-squares-spinner-animation-child-1 {
      50% {
        -webkit-transform: translate(150%,150%) scale(2,2);
                transform: translate(150%,150%) scale(2,2);
      }
    }
    @-webkit-keyframes scaling-squares-spinner-animation-child-2 {
      50% {
        -webkit-transform: translate(-150%,150%) scale(2,2);
                transform: translate(-150%,150%) scale(2,2);
      }
    }
    @keyframes scaling-squares-spinner-animation-child-2 {
      50% {
        -webkit-transform: translate(-150%,150%) scale(2,2);
                transform: translate(-150%,150%) scale(2,2);
      }
    }
    @-webkit-keyframes scaling-squares-spinner-animation-child-3 {
      50% {
        -webkit-transform: translate(-150%,-150%) scale(2,2);
                transform: translate(-150%,-150%) scale(2,2);
      }
    }
    @keyframes scaling-squares-spinner-animation-child-3 {
      50% {
        -webkit-transform: translate(-150%,-150%) scale(2,2);
                transform: translate(-150%,-150%) scale(2,2);
      }
    }
    @-webkit-keyframes scaling-squares-spinner-animation-child-4 {
      50% {
        -webkit-transform: translate(150%,-150%) scale(2,2);
                transform: translate(150%,-150%) scale(2,2);
      }
    }
    @keyframes scaling-squares-spinner-animation-child-4 {
      50% {
        -webkit-transform: translate(150%,-150%) scale(2,2);
                transform: translate(150%,-150%) scale(2,2);
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
ScalingSquaresSpinnerComponent.ctorParameters = () => [];
ScalingSquaresSpinnerComponent.propDecorators = {
    'size': [{ type: Input },],
    'color': [{ type: Input },],
    'animationDuration': [{ type: Input },],
};

class ScalingSquaresSpinnerModule {
}
ScalingSquaresSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [ScalingSquaresSpinnerComponent],
                declarations: [ScalingSquaresSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
ScalingSquaresSpinnerModule.ctorParameters = () => [];

class SelfBuildingSquareSpinnerComponent {
    constructor() {
        this.animationDuration = 6000;
        this.size = 40;
        this.color = '#fff';
        this.squaresNum = 9;
    }
    /**
     * @return {?}
     */
    get squareSize() {
        return this.size / 4;
    }
    /**
     * @return {?}
     */
    get initialTopPosition() {
        return -this.squareSize * 2 / 3;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            top: `${-this.initialTopPosition}px`,
            height: `${this.size}px`,
            width: `${this.size}px`
        };
    }
    /**
     * @return {?}
     */
    get squareStyle() {
        return {
            height: `${this.squareSize}px`,
            width: `${this.squareSize}px`,
            top: `${this.initialTopPosition}px`,
            marginRight: `${this.squareSize / 3}px`,
            marginTop: `${this.squareSize / 3}px`,
            animationDuration: `${this.animationDuration}ms`,
            background: this.color
        };
    }
    /**
     * @return {?}
     */
    get squaresStyles() {
        const /** @type {?} */ squaresStyles = [];
        const /** @type {?} */ delaysMultipliers = [6, 7, 8, 3, 4, 5, 0, 1, 2];
        const /** @type {?} */ delayModifier = this.animationDuration * 0.05;
        for (let /** @type {?} */ i = 0; i < this.squaresNum; i++) {
            squaresStyles.push(Object.assign({ animationDelay: `${delayModifier * delaysMultipliers[i]}ms` }, this.squareStyle));
        }
        return squaresStyles;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
SelfBuildingSquareSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-self-building-square-spinner',
                template: `
    <div class="self-building-square-spinner" [ngStyle]="spinnerStyle">
      <div class="square"
           *ngFor="let ss of squaresStyles; let i = index;"
           [ngStyle]="ss"
           [ngClass]="{'clear': i && i % 3 === 0}"
      >
      </div>
    </div>
  `,
                styles: [`
    .self-building-square-spinner, .self-building-square-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .self-building-square-spinner {
      height: 40px;
      width: 40px;
      top: calc( -10px * 2 / 3);
    }
    .self-building-square-spinner .square {
      height: 10px;
      width: 10px;
      top: calc( -10px * 2 / 3);
      margin-right: calc(10px / 3);
      margin-top: calc(10px / 3);
      background: #ff1d5e;
      float: left;
      position:relative;
      opacity: 0;
      -webkit-animation: self-building-square-spinner 6s infinite;
              animation: self-building-square-spinner 6s infinite;
    }
    .self-building-square-spinner .square:nth-child(1) {
      -webkit-animation-delay: calc(300ms * 6);
              animation-delay: calc(300ms * 6);
    }
    .self-building-square-spinner .square:nth-child(2) {
      -webkit-animation-delay: calc(300ms * 7);
              animation-delay: calc(300ms * 7);
    }
    .self-building-square-spinner .square:nth-child(3) {
      -webkit-animation-delay: calc(300ms * 8);
              animation-delay: calc(300ms * 8);
    }
    .self-building-square-spinner .square:nth-child(4) {
      -webkit-animation-delay: calc(300ms * 3);
              animation-delay: calc(300ms * 3);
    }
    .self-building-square-spinner .square:nth-child(5) {
      -webkit-animation-delay: calc(300ms * 4);
              animation-delay: calc(300ms * 4);
    }
    .self-building-square-spinner .square:nth-child(6) {
      -webkit-animation-delay: calc(300ms * 5);
              animation-delay: calc(300ms * 5);
    }
    .self-building-square-spinner .square:nth-child(7) {
      -webkit-animation-delay: calc(300ms * 0);
              animation-delay: calc(300ms * 0);
    }
    .self-building-square-spinner .square:nth-child(8) {
      -webkit-animation-delay: calc(300ms * 1);
              animation-delay: calc(300ms * 1);
    }
    .self-building-square-spinner .square:nth-child(9) {
      -webkit-animation-delay: calc(300ms * 2);
              animation-delay: calc(300ms * 2);
    }
    .self-building-square-spinner .clear{
      clear: both;
    }
    @-webkit-keyframes self-building-square-spinner {
      0% {
        opacity: 0;
      }
      5% {
        opacity: 1;
        top: 0;
      }
      50.9% {
        opacity: 1;
        top: 0;
      }
      55.9% {
        opacity: 0;
        top: inherit;
      }
    }
    @keyframes self-building-square-spinner {
      0% {
        opacity: 0;
      }
      5% {
        opacity: 1;
        top: 0;
      }
      50.9% {
        opacity: 1;
        top: 0;
      }
      55.9% {
        opacity: 0;
        top: inherit;
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
SelfBuildingSquareSpinnerComponent.ctorParameters = () => [];
SelfBuildingSquareSpinnerComponent.propDecorators = {
    'animationDuration': [{ type: Input },],
    'size': [{ type: Input },],
    'color': [{ type: Input },],
};

class SelfBuildingSquareSpinnerModule {
}
SelfBuildingSquareSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [SelfBuildingSquareSpinnerComponent],
                declarations: [SelfBuildingSquareSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
SelfBuildingSquareSpinnerModule.ctorParameters = () => [];

class SemipolarSpinnerComponent {
    constructor() {
        this.animationDuration = 2000;
        this.size = 65;
        this.color = '#fff';
        this.ringsNum = 5;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`
        };
    }
    /**
     * @return {?}
     */
    get ringStyle() {
        return {
            animationDuration: `${this.animationDuration}ms`,
            borderTopColor: this.color,
            borderLeftColor: this.color
        };
    }
    /**
     * @return {?}
     */
    get ringsStyles() {
        const /** @type {?} */ ringsStyles = [];
        const /** @type {?} */ delayModifier = 0.1;
        const /** @type {?} */ ringWidth = this.size * 0.05;
        const /** @type {?} */ positionIncrement = ringWidth * 2;
        const /** @type {?} */ sizeDecrement = this.size * 0.2;
        for (let /** @type {?} */ i = 0; i < this.ringsNum; i++) {
            const /** @type {?} */ computedSize = `${this.size - sizeDecrement * i}px`;
            const /** @type {?} */ computedPosition = `${positionIncrement * i}px`;
            const /** @type {?} */ style = Object.assign({ animationDelay: `${this.animationDuration * delayModifier * (this.ringsNum - i - 1)}ms`, height: computedSize, width: computedSize, left: computedPosition, top: computedPosition, borderWidth: `${ringWidth}px` }, this.ringStyle);
            ringsStyles.push(style);
        }
        return ringsStyles;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
SemipolarSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-semipolar-spinner',
                template: `
    <div class="semipolar-spinner" [ngStyle]="spinnerStyle">
      <div class="ring" *ngFor="let rs of ringsStyles" [ngStyle]="rs"></div>
    </div>
  `,
                styles: [`
    .semipolar-spinner, .semipolar-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .semipolar-spinner {
      height: 65px;
      width: 65px;
      position: relative;
    }
    .semipolar-spinner .ring {
      border-radius: 50%;
      position: absolute;
      border: calc(65px * 0.05) solid transparent;
      border-top-color: #ff1d5e;
      border-left-color: #ff1d5e;
      -webkit-animation: semipolar-spinner-animation 2s infinite;
              animation: semipolar-spinner-animation 2s infinite;
    }
    .semipolar-spinner .ring:nth-child(1) {
      height: calc(65px - 65px * 0.2 * 0);
      width: calc(65px - 65px * 0.2 * 0);
      top: calc(65px * 0.1 * 0);
      left: calc(65px * 0.1 * 0);
      -webkit-animation-delay: calc(2000ms * 0.1 * 4);
              animation-delay: calc(2000ms * 0.1 * 4);
      z-index: 5;
    }
    .semipolar-spinner .ring:nth-child(2) {
      height: calc(65px - 65px * 0.2 * 1);
      width: calc(65px - 65px * 0.2 * 1);
      top: calc(65px * 0.1 * 1);
      left: calc(65px * 0.1 * 1);
      -webkit-animation-delay: calc(2000ms * 0.1 * 3);
              animation-delay: calc(2000ms * 0.1 * 3);
      z-index: 4;
    }
    .semipolar-spinner .ring:nth-child(3) {
      height: calc(65px - 65px * 0.2 * 2);
      width: calc(65px - 65px * 0.2 * 2);
      top: calc(65px * 0.1 * 2);
      left: calc(65px * 0.1 * 2);
      -webkit-animation-delay: calc(2000ms * 0.1 * 2);
              animation-delay: calc(2000ms * 0.1 * 2);
      z-index: 3;
    }
    .semipolar-spinner .ring:nth-child(4) {
      height: calc(65px - 65px * 0.2 * 3);
      width: calc(65px - 65px * 0.2 * 3);
      top: calc(65px * 0.1 * 3);
      left: calc(65px * 0.1 * 3);
      -webkit-animation-delay: calc(2000ms * 0.1 * 1);
              animation-delay: calc(2000ms * 0.1 * 1);
      z-index: 2;
    }
    .semipolar-spinner .ring:nth-child(5) {
      height: calc(65px - 65px * 0.2 * 4);
      width: calc(65px - 65px * 0.2 * 4);
      top: calc(65px * 0.1 * 4);
      left: calc(65px * 0.1 * 4);
      -webkit-animation-delay: calc(2000ms * 0.1 * 0);
              animation-delay: calc(2000ms * 0.1 * 0);
      z-index: 1;
    }
    @-webkit-keyframes semipolar-spinner-animation {
      50% {
        -webkit-transform: rotate(360deg) scale(0.7);
                transform: rotate(360deg) scale(0.7);
      }
    }
    @keyframes semipolar-spinner-animation {
      50% {
        -webkit-transform: rotate(360deg) scale(0.7);
                transform: rotate(360deg) scale(0.7);
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
SemipolarSpinnerComponent.ctorParameters = () => [];
SemipolarSpinnerComponent.propDecorators = {
    'animationDuration': [{ type: Input },],
    'size': [{ type: Input },],
    'color': [{ type: Input },],
};

class SemipolarSpinnerModule {
}
SemipolarSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [SemipolarSpinnerComponent],
                declarations: [SemipolarSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
SemipolarSpinnerModule.ctorParameters = () => [];

class SpringSpinnerComponent {
    constructor() {
        this.size = 60;
        this.color = '#fff';
        this.animationDuration = 2000;
        this.animationBaseName = 'spring-spinner-animation';
        this.currentAnimationName = '';
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`
        };
    }
    /**
     * @return {?}
     */
    get spinnerPartStyle() {
        return {
            height: `${this.size / 2}px`,
            width: `${this.size}px`
        };
    }
    /**
     * @return {?}
     */
    get rotatorStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`,
            borderRightColor: this.color,
            borderTopColor: this.color,
            borderWidth: `${this.size / 7}px`,
            animationDuration: `${this.animationDuration}ms`,
            animationName: this.currentAnimationName
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
SpringSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-spring-spinner',
                template: `
    <div class="spring-spinner" [ngStyle]="spinnerStyle">
      <div class="spring-spinner-part top" [ngStyle]="spinnerPartStyle">
        <div class="spring-spinner-rotator" [ngStyle]="rotatorStyle"></div>
      </div>
      <div class="spring-spinner-part bottom" [ngStyle]="spinnerPartStyle">
        <div class="spring-spinner-rotator" [ngStyle]="rotatorStyle"></div>
      </div>
    </div>
  `,
                styles: [`
    .spring-spinner, .spring-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .spring-spinner {
      height: 60px;
      width: 60px;
    }
    .spring-spinner .spring-spinner-part {
      overflow: hidden;
      height: calc(60px / 2);
      width: 60px;
    }
    .spring-spinner  .spring-spinner-part.bottom {
      -webkit-transform: rotate(180deg) scale(-1, 1);
              transform: rotate(180deg) scale(-1, 1);
    }
    .spring-spinner .spring-spinner-rotator {
      width: 60px;
      height: 60px;
      border: calc(60px / 7) solid transparent;
      border-right-color: #ff1d5e;
      border-top-color: #ff1d5e;
      border-radius: 50%;
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
      -webkit-animation: spring-spinner-animation 3s ease-in-out infinite;
              animation: spring-spinner-animation 3s ease-in-out infinite;
      -webkit-transform: rotate(-200deg);
              transform: rotate(-200deg);
    }
    @-webkit-keyframes spring-spinner-animation {
      0% {
        border-width: calc(60px / 7);
      }
      25% {
        border-width: calc(60px / 23.33);
      }
      50% {
        -webkit-transform: rotate(115deg);
                transform: rotate(115deg);
        border-width: calc(60px / 7);
      }
      75% {
        border-width: calc(60px / 23.33);
      }
      100% {
        border-width: calc(60px / 7);
      }
    }
    @keyframes spring-spinner-animation {
      0% {
        border-width: calc(60px / 7);
      }
      25% {
        border-width: calc(60px / 23.33);
      }
      50% {
        -webkit-transform: rotate(115deg);
                transform: rotate(115deg);
        border-width: calc(60px / 7);
      }
      75% {
        border-width: calc(60px / 23.33);
      }
      100% {
        border-width: calc(60px / 7);
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
SpringSpinnerComponent.ctorParameters = () => [];
SpringSpinnerComponent.propDecorators = {
    'size': [{ type: Input },],
    'color': [{ type: Input },],
    'animationDuration': [{ type: Input },],
};

class SpringSpinnerModule {
}
SpringSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [SpringSpinnerComponent],
                declarations: [SpringSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
SpringSpinnerModule.ctorParameters = () => [];

class SwappingSquaresSpinnerComponent {
    constructor() {
        this.animationDuration = 1000;
        this.size = 65;
        this.color = '#fff';
        this.animationBaseName = 'swapping-square-animation-child';
        this.squaresNum = 4;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`
        };
    }
    /**
     * @return {?}
     */
    get squareStyle() {
        return {
            height: `${this.size * 0.25 / 1.3}px`,
            width: `${this.size * 0.25 / 1.3}px`,
            animationDuration: `${this.animationDuration}ms`,
            borderWidth: `${this.size * 0.04 / 1.3}px`,
            borderColor: this.color
        };
    }
    /**
     * @return {?}
     */
    get squaresStyles() {
        const /** @type {?} */ squaresStyles = [];
        const /** @type {?} */ delay = this.animationDuration * 0.5;
        for (let /** @type {?} */ i = 1; i <= this.squaresNum; i++) {
            squaresStyles.push(Object.assign({ animationDelay: `${i % 2 === 0 ? delay : 0}ms` }, this.squareStyle));
        }
        return squaresStyles;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
SwappingSquaresSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-swapping-squares-spinner',
                template: `
    <div class="swapping-squares-spinner" [ngStyle]="spinnerStyle">
      <div class="square"
           *ngFor="let ss of squaresStyles; let i = index;"
           [ngClass]="'square-' + (i + 1)"
           [ngStyle]="ss">
      </div>
    </div>
  `,
                styles: [`
    .swapping-squares-spinner, .swapping-squares-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .swapping-squares-spinner {
      height: 65px;
      width: 65px;
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
          -ms-flex-direction: row;
              flex-direction: row;
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
    }
    .swapping-squares-spinner .square {
      height: calc(65px * 0.25 / 1.3);
      width:  calc(65px * 0.25 / 1.3);
      -webkit-animation-duration: 1000ms;
              animation-duration: 1000ms;
      border: calc(65px * 0.04 / 1.3) solid #ff1d5e;
      margin-right: auto;
      margin-left: auto;
      position: absolute;
      -webkit-animation-iteration-count: infinite;
              animation-iteration-count: infinite;
    }
    .swapping-squares-spinner .square:nth-child(1) {
      -webkit-animation-name: swapping-squares-animation-child-1;
              animation-name: swapping-squares-animation-child-1;
      -webkit-animation-delay: 500ms;
              animation-delay: 500ms;
    }
    .swapping-squares-spinner .square:nth-child(2) {
      -webkit-animation-name: swapping-squares-animation-child-2;
              animation-name: swapping-squares-animation-child-2;
      -webkit-animation-delay: 0ms;
              animation-delay: 0ms;
    }
    .swapping-squares-spinner .square:nth-child(3) {
      -webkit-animation-name: swapping-squares-animation-child-3;
              animation-name: swapping-squares-animation-child-3;
      -webkit-animation-delay: 500ms;
              animation-delay: 500ms;
    }
    .swapping-squares-spinner .square:nth-child(4) {
      -webkit-animation-name: swapping-squares-animation-child-4;
              animation-name: swapping-squares-animation-child-4;
      -webkit-animation-delay: 0ms;
              animation-delay: 0ms;
    }
    @-webkit-keyframes swapping-squares-animation-child-1 {
      50% {
        -webkit-transform: translate(150%,150%) scale(2,2);
                transform: translate(150%,150%) scale(2,2);
      }
    }
    @keyframes swapping-squares-animation-child-1 {
      50% {
        -webkit-transform: translate(150%,150%) scale(2,2);
                transform: translate(150%,150%) scale(2,2);
      }
    }
    @-webkit-keyframes swapping-squares-animation-child-2 {
      50% {
        -webkit-transform: translate(-150%,150%) scale(2,2);
                transform: translate(-150%,150%) scale(2,2);
      }
    }
    @keyframes swapping-squares-animation-child-2 {
      50% {
        -webkit-transform: translate(-150%,150%) scale(2,2);
                transform: translate(-150%,150%) scale(2,2);
      }
    }
    @-webkit-keyframes swapping-squares-animation-child-3 {
      50% {
        -webkit-transform: translate(-150%,-150%) scale(2,2);
                transform: translate(-150%,-150%) scale(2,2);
      }
    }
    @keyframes swapping-squares-animation-child-3 {
      50% {
        -webkit-transform: translate(-150%,-150%) scale(2,2);
                transform: translate(-150%,-150%) scale(2,2);
      }
    }
    @-webkit-keyframes swapping-squares-animation-child-4 {
      50% {
        -webkit-transform: translate(150%,-150%) scale(2,2);
                transform: translate(150%,-150%) scale(2,2);
      }
    }
    @keyframes swapping-squares-animation-child-4 {
      50% {
        -webkit-transform: translate(150%,-150%) scale(2,2);
                transform: translate(150%,-150%) scale(2,2);
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
SwappingSquaresSpinnerComponent.ctorParameters = () => [];
SwappingSquaresSpinnerComponent.propDecorators = {
    'animationDuration': [{ type: Input },],
    'size': [{ type: Input },],
    'color': [{ type: Input },],
};

class SwappingSquaresSpinnerModule {
}
SwappingSquaresSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [SwappingSquaresSpinnerComponent],
                declarations: [SwappingSquaresSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
SwappingSquaresSpinnerModule.ctorParameters = () => [];

class TrinityRingsSpinnerComponent {
    constructor() {
        this.containerPadding = 3;
        this.animationDuration = 1500;
        this.size = 60;
        this.color = '#fff';
    }
    /**
     * @return {?}
     */
    get outerRingSize() {
        return this.size - this.containerPadding * 2;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`,
            padding: `${this.containerPadding}px`
        };
    }
    /**
     * @return {?}
     */
    get ring1Style() {
        return {
            height: `${this.outerRingSize}px`,
            width: `${this.outerRingSize}px`,
            borderColor: this.color,
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    get ring2Style() {
        return {
            height: `${this.outerRingSize * 0.65}px`,
            width: `${this.outerRingSize * 0.65}px`,
            borderColor: this.color,
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    get ring3Style() {
        return {
            height: `${this.outerRingSize * 0.1}px`,
            width: `${this.outerRingSize * 0.1}px`,
            borderColor: this.color,
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
TrinityRingsSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-trinity-rings-spinner',
                template: `
    <div class="trinity-rings-spinner" [ngStyle]="spinnerStyle">
      <div class="circle circle1" [ngStyle]="ring1Style"></div>
      <div class="circle circle3" [ngStyle]="ring3Style"></div>
      <div class="circle circle2" [ngStyle]="ring2Style"></div>
    </div>
  `,
                styles: [`
    .trinity-rings-spinner, .trinity-rings-spinner * {
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .trinity-rings-spinner {
      height: 66px;
      width: 66px;
      padding: 3px;
      position: relative;
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -webkit-box-pack: center;
          -ms-flex-pack: center;
              justify-content: center;
      -webkit-box-align: center;
          -ms-flex-align: center;
              align-items: center;
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
          -ms-flex-direction: row;
              flex-direction: row;
      overflow: hidden;
      -webkit-box-sizing: border-box;
              box-sizing: border-box;
    }
    .trinity-rings-spinner .circle {
      position:absolute;
      display:block;
      border-radius:50%;
      border: 3px solid #ff1d5e;
      opacity: 1;
    }
    .trinity-rings-spinner .circle:nth-child(1) {
      height: 60px;
      width: 60px;
      -webkit-animation : trinity-rings-spinner-circle1-animation 1.5s infinite linear;
              animation : trinity-rings-spinner-circle1-animation 1.5s infinite linear;
      border-width: 3px;
    }
    .trinity-rings-spinner .circle:nth-child(2) {
      height: calc(60px * 0.65);
      width: calc(60px * 0.65);
      -webkit-animation : trinity-rings-spinner-circle2-animation 1.5s infinite linear;
              animation : trinity-rings-spinner-circle2-animation 1.5s infinite linear;
      border-width: 2px;
    }
    .trinity-rings-spinner .circle:nth-child(3) {
      height: calc(60px * 0.1);
      width: calc(60px * 0.1);
      -webkit-animation:trinity-rings-spinner-circle3-animation 1.5s infinite linear;
              animation:trinity-rings-spinner-circle3-animation 1.5s infinite linear;
      border-width: 1px;
    }
    @-webkit-keyframes trinity-rings-spinner-circle1-animation{
      0% {
        -webkit-transform: rotateZ(20deg) rotateY(0deg);
                transform: rotateZ(20deg) rotateY(0deg);
      }
      100% {
        -webkit-transform: rotateZ(100deg) rotateY(360deg);
                transform: rotateZ(100deg) rotateY(360deg);
      }
    }
    @keyframes trinity-rings-spinner-circle1-animation{
      0% {
        -webkit-transform: rotateZ(20deg) rotateY(0deg);
                transform: rotateZ(20deg) rotateY(0deg);
      }
      100% {
        -webkit-transform: rotateZ(100deg) rotateY(360deg);
                transform: rotateZ(100deg) rotateY(360deg);
      }
    }
    @-webkit-keyframes trinity-rings-spinner-circle2-animation{
      0% {
        -webkit-transform: rotateZ(100deg) rotateX(0deg);
                transform: rotateZ(100deg) rotateX(0deg);
      }
      100% {
        -webkit-transform: rotateZ(0deg) rotateX(360deg);
                transform: rotateZ(0deg) rotateX(360deg);
      }
    }
    @keyframes trinity-rings-spinner-circle2-animation{
      0% {
        -webkit-transform: rotateZ(100deg) rotateX(0deg);
                transform: rotateZ(100deg) rotateX(0deg);
      }
      100% {
        -webkit-transform: rotateZ(0deg) rotateX(360deg);
                transform: rotateZ(0deg) rotateX(360deg);
      }
    }
    @-webkit-keyframes trinity-rings-spinner-circle3-animation{
      0% {
        -webkit-transform: rotateZ(100deg) rotateX(-360deg);
                transform: rotateZ(100deg) rotateX(-360deg);
      }
      100% {
        -webkit-transform: rotateZ(-360deg) rotateX(360deg);
                transform: rotateZ(-360deg) rotateX(360deg);
      }
    }
    @keyframes trinity-rings-spinner-circle3-animation{
      0% {
        -webkit-transform: rotateZ(100deg) rotateX(-360deg);
                transform: rotateZ(100deg) rotateX(-360deg);
      }
      100% {
        -webkit-transform: rotateZ(-360deg) rotateX(360deg);
                transform: rotateZ(-360deg) rotateX(360deg);
      }
    }
  `]
            },] },
];
/**
 * @nocollapse
 */
TrinityRingsSpinnerComponent.ctorParameters = () => [];
TrinityRingsSpinnerComponent.propDecorators = {
    'animationDuration': [{ type: Input },],
    'size': [{ type: Input },],
    'color': [{ type: Input },],
};

class TrinityRingsSpinnerModule {
}
TrinityRingsSpinnerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [TrinityRingsSpinnerComponent],
                declarations: [TrinityRingsSpinnerComponent],
                providers: [],
            },] },
];
/**
 * @nocollapse
 */
TrinityRingsSpinnerModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { AtomSpinnerModule, BreedingRhombusSpinnerModule, CirclesToRhumbusesSpinnerModule, FingerprintSpinnerModule, FulfillingBouncingCircleSpinnerModule, FlowerSpinnerModule, FulfillingSquareSpinnerModule, HalfCircleSpinnerModule, HollowDotsSpinnerModule, IntersectingCirclesSpinnerModule, LoopingRhumbusesSpinnerModule, OrbitSpinnerModule, PixelSpinnerModule, RadarSpinnerModule, ScalingSquaresSpinnerModule, SelfBuildingSquareSpinnerModule, SemipolarSpinnerModule, SpringSpinnerModule, SwappingSquaresSpinnerModule, TrinityRingsSpinnerModule, AtomSpinnerComponent as ɵa, BreedingRhombusSpinnerComponent as ɵb, CirclesToRhumbusesSpinnerComponent as ɵc, FingerprintSpinnerComponent as ɵd, FlowerSpinnerComponent as ɵf, FulfillingBouncingCircleSpinnerComponent as ɵe, FulfillingSquareSpinnerComponent as ɵg, HalfCircleSpinnerComponent as ɵh, HollowDotsSpinnerComponent as ɵi, IntersectingCirclesSpinnerComponent as ɵj, LoopingRhumbusesSpinnerComponent as ɵk, OrbitSpinnerComponent as ɵl, PixelSpinnerComponent as ɵm, RadarSpinnerComponent as ɵn, ScalingSquaresSpinnerComponent as ɵo, SelfBuildingSquareSpinnerComponent as ɵp, SemipolarSpinnerComponent as ɵq, SpringSpinnerComponent as ɵr, SwappingSquaresSpinnerComponent as ɵs, TrinityRingsSpinnerComponent as ɵt };
//# sourceMappingURL=angular-epic-spinners.js.map
